<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只柴犬</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-28T07:10:28.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>凯凯超人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 篇（包含ES6）面试题</title>
    <link href="http://example.com/2023/08/20/VScode%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2023/08/20/VScode%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</id>
    <published>2023-08-20T14:58:01.000Z</published>
    <updated>2023-08-28T07:10:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JavaScript">TOC</a></p><h2 id="VScode自定义配置代码片段详细教程"><a href="#VScode自定义配置代码片段详细教程" class="headerlink" title="VScode自定义配置代码片段详细教程"></a>VScode自定义配置代码片段详细教程</h2><p><strong>VScode的html文件中通过“ ！”的快捷方式可以直接生成html模板</strong></p><p>可以通过自定义配置，来配置Vue2、Vue3的预设定的代码片段</p><h3 id="转码连接-进行转译"><a href="#转码连接-进行转译" class="headerlink" title="转码连接 进行转译"></a>转码连接 进行转译</h3><p>你配置的代码片段，在配置的时候需要先经过处理</p><p>转码链接：<a href="https://snippet-generator.app/">snippet generator</a></p><p><img src="https://img-blog.csdnimg.cn/730a93609654461f80e2f3827c6c123a.png" alt=""></p><ul><li>按照上述的步骤</li><li>例如我们创建一个 vue3+ts  指令是  vue3-ts</li></ul><h3 id="vscode-打开配置代码页面"><a href="#vscode-打开配置代码页面" class="headerlink" title="vscode 打开配置代码页面"></a>vscode 打开配置代码页面</h3><p>点击左下角的齿轮（设置），点击<strong>配置用户代码片段（中文版）</strong>，<font color="blue"><strong>User Snippets（英文版）</strong></font></p><p><img src="C:\Users\96356\AppData\Roaming\Typora\typora-user-images\image-20230529142159961.png" alt="image-20230529142159961" style="zoom:67%;" /></p><p>打开之后，会出现设置 触发的环境配置的选择</p><p><img src="https://img-blog.csdnimg.cn/7ddd6ff7b1a340358d570aacd449eb0e.png" style="zoom: 80%;" /></p><p>英文版里面，我们选择   <strong>New Global Snippets file</strong> </p><p><img src="C:\Users\96356\AppData\Roaming\Typora\typora-user-images\image-20230529142559953.png" alt=""></p><p>然后我们需要设定一个名称，例如上面的 <strong>vue3-ts</strong> 就是我上一次设置的</p><p><img src="C:\Users\96356\AppData\Roaming\Typora\typora-user-images\image-20230529142822292.png" alt="image-20230529142822292"></p><p>然后我们打开这个创建的全局环境，将上面的转译之后的代码段，复制到这里</p><p><img src="C:\Users\96356\AppData\Roaming\Typora\typora-user-images\image-20230529142943045.png" style="zoom:80%;" /></p><p>最后保存即可</p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><p>然后我们创建模板的时候，直接 vue3 就会显示出对应的快捷模板代码了。</p><p><img src="C:\Users\96356\AppData\Roaming\Typora\typora-user-images\image-20230529143043611.png" alt="image-20230529143043611"></p><p>点击之后就会生成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;JavaScript&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;VScode自定义配置代码片段详细教程&quot;&gt;&lt;a href=&quot;#VScode自定义配置代码片段详细教程&quot; class=&quot;headerlink&quot; title=&quot;VScode自定义配置代码片段详细</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端 JS 选择题笔试</title>
    <link href="http://example.com/2023/03/23/%E5%89%8D%E7%AB%AF%20JS%20%E9%80%89%E6%8B%A9%E9%A2%98%E7%AC%94%E8%AF%95/"/>
    <id>http://example.com/2023/03/23/%E5%89%8D%E7%AB%AF%20JS%20%E9%80%89%E6%8B%A9%E9%A2%98%E7%AC%94%E8%AF%95/</id>
    <published>2023-03-23T15:52:02.000Z</published>
    <updated>2023-03-20T10:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端-JS-选择题笔试"><a href="#前端-JS-选择题笔试" class="headerlink" title="前端 JS 选择题笔试"></a>前端 JS 选择题笔试</h2><h3 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_38111015/article/details/84885809</span><br></pre></td></tr></table></figure><ul><li><strong>Git 暂存操作的API </strong>        <code>git stash</code></li><li><strong>利用二分法的思想，来查找哪一次代码提交引入了错误 </strong>     <code>git bisect</code></li><li><strong>切换</strong>    <code>git checkout</code></li><li><strong>合并（拉公共分支最新代码的时候使用）</strong>      <code>git rebase</code></li><li><strong>合并（拉代码或者push代码都可使用）</strong>         <code>git merge</code></li><li><strong>远程端下载至本地 </strong>    <code>git fetch/clone</code> </li><li><strong>本地分支-&gt;远程主机</strong>          <code>git push</code> </li></ul><h3 id="Linux-指令"><a href="#Linux-指令" class="headerlink" title="Linux 指令"></a>Linux 指令</h3><ul><li>Linux <code>su</code>（英文全拼：switch user）命令用于变更为其他使用者的身份 </li><li>Linux <code>chown</code>（英文全拼：<strong>change owner</strong>）命令用于设置文件所有者和文件关联组的命令 </li><li>Linux <code>chmod</code>（英文全拼：change mode）命令是控制用户对文件的权限的命令</li></ul><h3 id="JS-基础语法问题"><a href="#JS-基础语法问题" class="headerlink" title="JS 基础语法问题"></a>JS 基础语法问题</h3><h4 id="JS-的基本数据类型"><a href="#JS-的基本数据类型" class="headerlink" title="JS 的基本数据类型"></a>JS 的基本数据类型</h4><p>基本数据类型 string,number(NaN属于这里表示非数字),boolean,symbol,null,undefiend</p><h4 id="JS-变量的命名规则"><a href="#JS-变量的命名规则" class="headerlink" title="JS 变量的命名规则"></a>JS 变量的命名规则</h4><p>在javascript中,标识符<strong>不能以数字开头</strong>,即第一个字符不能为数字,<strong>必须是字母、下划线“_”或美元符号“$”</strong></p><h4 id="JS的五种模块加载方案"><a href="#JS的五种模块加载方案" class="headerlink" title="JS的五种模块加载方案"></a>JS的五种模块加载方案</h4><p><strong>详细可查看</strong>  <a href="https://juejin.cn/post/6844903808418447367?time=1673685516275">https://juejin.cn/post/6844903808418447367?time=1673685516275</a></p><p><a href="https://www.cnblogs.com/mingweiyard/p/13891510.html?time=1673968266192">https://www.cnblogs.com/mingweiyard/p/13891510.html?time=1673968266192</a></p><ul><li>AMD (异步模块定义)和 CMD （公共模块定义）都是<strong>浏览器端</strong>的JS模块化规范，分别由require.js和sea.js实现</li><li>CommonJS（缩写：CJS ）是<strong>服务器端</strong>的js模块化规范，由NodeJS实现</li><li>ES6 提出的方案（ESM），使用 import 和 export 的形式来导入导出模块，在nodeJS新版本中可以直接使用。</li><li>另外还有一些独特的例如  <strong>UMD</strong> （通用模块定义）他是 AMD 和 Common JS 糅合的产物。</li></ul><h4 id="JS-精度丢失问题"><a href="#JS-精度丢失问题" class="headerlink" title="JS 精度丢失问题"></a>JS 精度丢失问题</h4><p>在 JS 的 Number类型中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">const</span> two = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">const</span> three = <span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(two - one); <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(three - two); <span class="comment">//0.09999999999999998</span></span><br></pre></td></tr></table></figure><p><strong>JS 数字丢失精度的原因</strong>：计算机的二进制实现和位数限制有些数无法有限表示，就像一些无理数不能有限表示，如 圆周率 3.1415926…，1.3333… 等。JS 遵循 <a href="https://hd.nowcoder.com/link.html?target=https://en.wikipedia.org/wiki/IEEE_floating_point">IEEE 754</a> 规范，采用双精度存储（double precision），占用 64 bit。</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/774B3E21DB02CD48251FE5A898DAD84A.png" alt=""></p><ul><li>1位用来表示符号位</li><li>11位用来表示指数</li><li>52位表示尾数</li></ul><h3 id="JS-API-细节问题"><a href="#JS-API-细节问题" class="headerlink" title="JS  API 细节问题"></a>JS  API 细节问题</h3><h4 id="valueOf-和-toString"><a href="#valueOf-和-toString" class="headerlink" title="valueOf 和 toString"></a>valueOf 和 toString</h4><ul><li><p>valueOf() 方法用于返回指定对象的原始值，<strong>若对象没有原始值，则将返回对象本身</strong>。</p></li><li><p>toString() 方法主要有3个用途</p><p>1.返回一个【表示对象】的【字符串】</p><p>2.检测对象的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(arr)===&quot;[object Array]&quot;</span><br></pre></td></tr></table></figure><p>3.返回该数字对应进制的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(10.toString(2)) //10专为为2进制&#x27;1010&#x27;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>{} 的 valueOf()方法 的值为{}</p><p>[] 的 valueOf() 方法 的值为 []</p><p>{} 的 toString()方法 的值为[object object] </p><p>[] 的 toString() 方法的值为””(空串)</p></blockquote><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h4><p>这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。</p><p><strong>isNaN()</strong>在接受一个值后之后，会尝试将这个值转换为数值。某些不是数值的值会直接转换为数值，例如字符串”10”或Boolean值，会返回 false。<strong>而任何不能被转换为数值的值都会导致这个函数返回true</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// true  因为NaN不是数值</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">10</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;10&#x27;</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;blue&#x27;</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h4><p><strong>parseFloat()</strong> 从第一位开始检查，是数字就转换，直到一个不是数字的内容</p><p>开头就不是数字，那么直接返回 <code>NaN</code></p><p>认识小数点（但只认识第一个），没有小数点认整数,， <strong>并且其忽略前导0</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;1234blue&#x27;</span>) <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;0xA&#x27;</span>)    <span class="comment">//0后面都是字符（和进制无关）0</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;22.34.5&#x27;</span>)  <span class="comment">//只认识第一个小数点，第二个当字符了所以停止 为 22.34</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;0908.5&#x27;</span>)   <span class="comment">//忽略前导0 所以是908.5</span></span><br></pre></td></tr></table></figure><h3 id="HTML-相关"><a href="#HTML-相关" class="headerlink" title="HTML 相关"></a>HTML 相关</h3><h4 id="HTML中的特殊字符"><a href="#HTML中的特殊字符" class="headerlink" title="HTML中的特殊字符"></a>HTML中的特殊字符</h4><p>一般常考的特殊字符有如下几种：</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/bd83f338c6464b2ebcf7252d3473f1c0.png" alt=""></p><h4 id="lt-DOCTYPE-gt-的记忆点"><a href="#lt-DOCTYPE-gt-的记忆点" class="headerlink" title="&lt;!DOCTYPE&gt;  的记忆点"></a>&lt;!DOCTYPE&gt;  的记忆点</h4><ul><li><p>必须声明在HTML文档的第一行，在<code>&lt;html&gt;</code>之前</p></li><li><p>他是没有结束符的</p></li><li><p><strong>其对大小写不敏感，也就是大小写都可以！</strong></p></li><li><p>他不是一个 HTML 标签，是一个指令。用于指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p><p>如下就是声明 为 HTML5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前的版本例如 HTML 4.01 Strict，是这么声明的。很复杂：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="HTML5-的新特性"><a href="#HTML5-的新特性" class="headerlink" title="HTML5 的新特性"></a>HTML5 的新特性</h4><p>1.语义化标签   </p><p>2.增强型表单包括属性以及元素 ，增加了大量的表单类型和表单属性；</p><p>3.新增<code>视频&lt;video&gt;和音频&lt;audio&gt;标签</code>  ，，还引入了<code>&lt;source&gt;标签</code>配合媒体标签使用；</p><p>4.Canvas 图形 ，新增了<code>&lt;canvas&gt;</code>，使用 JavaScript 在就可以网页上绘制图像；</p><p>5.地理定位  </p><p>6.拖放API ，增加了draggable属性设置元素可拖放；</p><p>7.SVG绘图 </p><p>8.Web Worker  </p><p>9.Web Storage ，提供了两种在客户端存储数据的新方法localStorage和sessionStorage；</p><p>10.Web Socket</p><p>11.增加了DOM查询操作querySelector和querySelectorAll；</p><h4 id="iframe-标签"><a href="#iframe-标签" class="headerlink" title="iframe 标签"></a>iframe 标签</h4><p>一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。</p><font color="red">iframe会阻塞主页面的onload事件；</font><h3 id="HTML-（dom）加载与解析过程"><a href="#HTML-（dom）加载与解析过程" class="headerlink" title="HTML （dom）加载与解析过程"></a>HTML （dom）加载与解析过程</h3><ul><li>会阻塞dom解析的资源有：<br>1.内联css<br>2.内联js<br>3.普通外联js<br>4.外联defer js<br>5.js之前的外联css</li></ul><p>MDN解析：<strong>当初始HTML文档已完全加载和解析时</strong>，将触发<code>DOMContentLoaded</code>事件，而不需要等待样式表，图像和子框架页面加载（事件可以用来检测HTML页面是否完全加载完毕(fully-loaded)）。</p><h3 id="CSS-相关"><a href="#CSS-相关" class="headerlink" title="CSS 相关"></a>CSS 相关</h3><h4 id="CSS-样式优先级"><a href="#CSS-样式优先级" class="headerlink" title="CSS 样式优先级"></a>CSS 样式优先级</h4><p>右侧表示权重</p><ul><li>!important      </li><li>​    内联样式（1000）      </li><li>​    ID选择器（0100）      </li><li>​    类选择器/属性选择器/伪类选择器（0010）      </li><li>​    元素选择器/伪元素选择器（0001）      </li><li>​    关系选择器/通配符选择器（0000）     </li></ul><p><strong>带!important 标记的样式属性优先级最高</strong>； 样式表的来源相同时：</p><font color="red">**!important > 行内样式>ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性**</font><h4 id="CSS-样式定位归纳"><a href="#CSS-样式定位归纳" class="headerlink" title="CSS 样式定位归纳"></a>CSS 样式定位归纳</h4><p><code>div+p</code>  ： 是紧跟着div后面的p标签</p><h4 id="CSS-GPU加速"><a href="#CSS-GPU加速" class="headerlink" title="CSS GPU加速"></a>CSS GPU加速</h4><p>浏览器在处理下面的 css 的时候，会使用 GPU 渲染 </p><ul><li>transform（当 3D 变换的样式出现时会使用 GPU 加速）    </li><li>opacity 用于指定元素透明度   </li><li>filter 修改所有图片的颜色为黑白   </li><li>will-change 过告知浏览器该元素会有哪些变化，使浏览器提前做好优化准备，增强页面渲染性能。</li></ul><h4 id="CSS3-属性考法"><a href="#CSS3-属性考法" class="headerlink" title="CSS3 属性考法"></a>CSS3 属性考法</h4><h5 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h5><p>CSStransform属性允许旋转，缩放，倾斜或平移给定元素。<strong>只能转换由盒模型定位的元素</strong>。</p><p>盒模型定位元素根据经验是指具有<code>display：block；</code>的元素，<strong>对内联元素不可用</strong>。</p><p><code>transform</code>变形默认圆点为中心。 可通过 <code>transform-origin</code> 设置改变</p><p><code>transform</code>变形后占位不会变化，它会创建一个新的图层来显示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//定义 <span class="number">3</span>D 转换，使用 <span class="number">16</span> 个值的 <span class="number">4</span>x4 矩阵。</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>) <span class="built_in">translate</span>(-<span class="number">100%</span>, -<span class="number">100%</span>); matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) </span><br></pre></td></tr></table></figure><h4 id="CSS加载-的影响"><a href="#CSS加载-的影响" class="headerlink" title="CSS加载 的影响"></a>CSS加载 的影响</h4><ol><li>css加载不会阻塞DOM树的解析</li><li>css加载会阻塞DOM树的渲染</li><li>css加载会阻塞后面js语句的执行</li></ol><h3 id="计算机网络（包括JS来获取信息）相关"><a href="#计算机网络（包括JS来获取信息）相关" class="headerlink" title="计算机网络（包括JS来获取信息）相关"></a>计算机网络（包括JS来获取信息）相关</h3><h4 id="URL-地址格式"><a href="#URL-地址格式" class="headerlink" title="URL 地址格式"></a>URL 地址格式</h4><p>通常情况下，一个URL的格式是：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure><p>protocol 协议 hostname主机名 port端口号 path路径 parameters 参数 query查询 </p><p>协议：//主机：端口/路径名称?搜索条件#哈希标识</p><h5 id="window-Location-获取-Url相关信息"><a href="#window-Location-获取-Url相关信息" class="headerlink" title="window Location 获取 Url相关信息"></a>window Location 获取 Url相关信息</h5><h4 id="window-Location"><a href="#window-Location" class="headerlink" title="window Location"></a>window Location</h4><ul><li>location.host 返回 web 主机的域名+端口，只是如果是80 控制台不会显示而已</li><li>location.hostname  返回 web 主机的域名</li><li>location.pathname  返回当前页面的路径和文件名</li><li>location.port 返回 web 主机的端口 （80 或 443）</li><li>location.protocol 返回所使用的 web 协议（http: 或 https:）</li></ul><h4 id="七层模型和五层模型-及其对应协议"><a href="#七层模型和五层模型-及其对应协议" class="headerlink" title="七层模型和五层模型 及其对应协议"></a>七层模型和五层模型 及其对应协议</h4><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/QQ截图20230117200355.png" alt=""></p><h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><h5 id="进程有独立的地址空间，进程间可以通过网络通信，内存也可以共享，进程是系统进行资源分配和调度的基本单位。"><a href="#进程有独立的地址空间，进程间可以通过网络通信，内存也可以共享，进程是系统进行资源分配和调度的基本单位。" class="headerlink" title="进程有独立的地址空间，进程间可以通过网络通信，内存也可以共享，进程是系统进行资源分配和调度的基本单位。"></a>进程有独立的地址空间，进程间可以通过网络通信，内存也可以共享，进程是系统进行资源分配和调度的基本单位。</h5><p>  <strong>进程和线程的关系：</strong> </p><ol><li>​    一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。      </li><li>​    资源分配给进程，同一进程的所有线程共享该进程的所有资源。      </li><li>​    CPU 分给线程，即真正在 CPU 上运行的是线程。      </li><li><p>​    线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体.     </p><p><strong>进程与线程的区别：</strong> </p><p>（1）调度：<strong>线程</strong>作为<strong>调度</strong>和分配<strong>的基本单位</strong>，<strong>进程</strong>作为<strong>拥有资源</strong>的基本单位 </p><p>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行 </p><p>（3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源. </p><p>（4）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，<strong>导致系统的开销明显大于创建或撤消线程时的开销</strong>。</p></li></ol><h4 id="UDP-和-TCP"><a href="#UDP-和-TCP" class="headerlink" title="UDP 和 TCP"></a>UDP 和 TCP</h4><p><strong>Http2.0 建立在 TCP，Http3.0 建立在 UDP</strong></p><p>目前题目说的，包括常用的还是 Http2.0 </p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/20210306213111446.png" alt=""></p><h4 id="Http-相关"><a href="#Http-相关" class="headerlink" title="Http 相关"></a>Http 相关</h4><h5 id="浏览器Http请求和响应过程"><a href="#浏览器Http请求和响应过程" class="headerlink" title="浏览器Http请求和响应过程"></a><strong>浏览器Http请求和响应过程</strong></h5><p>浏览器端构建HTTP请求，并发送 -&gt; 服务器端接收到HTTP请求，并进行解析 -&gt; 服务器端发送HTTP响应 -&gt; 浏览器端接收到响应，解析Http响应，而后进行页面渲染。</p><h5 id="Http-版本区别"><a href="#Http-版本区别" class="headerlink" title="Http 版本区别"></a>Http 版本区别</h5><ul><li><p>HTTP/0.9：功能捡漏，只支持GET方法，只能发送HTML格式字符串。   </p></li><li><p>HTTP/1.0：支持多种数据格式，增加POST、HEAD等方法，增加头信息，每次只能发送一个请求（无持久连接）   </p></li><li><p>HTTP/1.1：默认持久连接、请求管道化、增加缓存处理、增加Host字段、支持断点传输分块传输等。   </p></li><li><p>HTTP/2.0：<strong>二进制分帧、多路复用(解决了HTTP阻塞线头)、头部压缩、服务器推送</strong></p><p>并没有解决<font color="red"> <strong>TCP 队头阻塞的问题</strong></font></p></li></ul><p>​       采用HTTP/2时，浏览器一般会在单个TCP连接中创建并行的几十个乃至上百个传输。如果HTTP/2连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因为TCP是一个按序传输的链条，因此如果其中一个点丢失了，链路上之后的内容就都需要等待。</p><h5 id="客户端渲染-与-服务器渲染"><a href="#客户端渲染-与-服务器渲染" class="headerlink" title="客户端渲染 与 服务器渲染"></a>客户端渲染 与 服务器渲染</h5><p><strong>客户端渲染</strong></p><p>用户输入地址，客户端向服务器发送请求</p><p> =&gt; 服务器传给浏览器相应的网页文件 </p><p>  =&gt; 浏览器解析文件 </p><p>  =&gt; 遇到ajax请求则向服务器再次请求一些数据 </p><p>  =&gt; 服务器再次向浏览器发送相应的数据 </p><p>  =&gt; 浏览器拿到ajax请求返回的数据后，将数据渲染在页面上</p><p><strong>优点</strong>：</p><ul><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ul><p><strong>缺点：</strong></p><ul><li>可能需要向服务器请求多次数据</li><li><strong>不利于</strong><font color="red">SEO（搜索引擎优化）</font>，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ul><p><strong>服务器渲染</strong></p><p><strong>SPA（单页面）</strong>是客户端渲染的</p><p>客户端向服务器发送一次请求  </p><p>   =&gt; 服务器接收请求，并在服务端操作网页文件，将对应数据导入文件  </p><p>   =&gt; <strong>服务器在服务端渲染好整个网页，发送给客户端</strong>  </p><p>   =&gt; <strong>客户端</strong>接收服务器发送过来的网页文件，<strong>不需要做任何操作，直接呈现</strong></p><p><strong>优点</strong></p><ul><li>只需要向服务器请求一次</li><li><strong>利于</strong><font color="red">SEO 搜索引擎优化</font>，即能被搜索引擎搜索到，能向用户展示你网页的东西</li></ul><p><strong>缺点</strong></p><ul><li>如果数据量过大，在服务器渲染的时间就会过长，造成浏览器暂时的空白</li><li>容易被爬虫爬取</li></ul><p><strong>如何区分客户端渲染和服务器渲染</strong></p><ul><li>若页面做整体的刷新，即网址发生改变，就是服务器渲染</li><li>若页面做了局部刷新，即网址没发生改变，就是客户端渲染</li></ul><h3 id="前端安全系列"><a href="#前端安全系列" class="headerlink" title="前端安全系列"></a>前端安全系列</h3><h4 id="防止XSS"><a href="#防止XSS" class="headerlink" title="防止XSS"></a>防止XSS</h4><p>详细文档：<a href="https://tech.meituan.com/2018/09/27/fe-security.html?time=1673952294336">https://tech.meituan.com/2018/09/27/fe-security.html?time=1673952294336</a></p><p><strong>解决的方法有：</strong></p><ul><li>过滤用户请求种的非法字符</li><li>对请求种的特殊字符进行转译</li><li>配置 CSP（Content Security Policy）</li></ul><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="Chrome浏览器都有哪些进程"><a href="#Chrome浏览器都有哪些进程" class="headerlink" title="Chrome浏览器都有哪些进程"></a>Chrome浏览器都有哪些进程</h4><p>最新的 Chrome 浏览器包括：</p><ul><li>1 个浏览器（Browser）主进程</li><li>1 个 GPU 进程</li><li>1 个网络（NetWork）进程</li><li>多个渲染进程和多个插件进程。</li></ul><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><p>浏览器缓存是性能优化中简单高效的一种方式，按照缓存位置划分为以下几种类型：. <strong>service Worker. Memory Cache. Disk Cache. Push Cache</strong>. 浏览器请求时，会按照如上的优先级顺序，进行查找缓存，都没有命中时，才会去请求网络</p><p>在浏览器中，浏览器会在<strong>js和图片等文件解析执行后直接存入内存缓存中</strong>，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而<strong>css文件则会存入硬盘文件</strong>中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><h4 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h4><ul><li>webpack本地代理，即proxy反向代理</li><li>JSONP 是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，兼容性好（兼容低版本IE），缺点是只支持get请求，不支持post请求。 </li><li>CORS </li><li>跨文档通信 API：<code>window.postMessage()</code></li></ul><h3 id="面像对象编程相关"><a href="#面像对象编程相关" class="headerlink" title="面像对象编程相关"></a>面像对象编程相关</h3><h4 id="面向对象编程设计的特点"><a href="#面向对象编程设计的特点" class="headerlink" title="面向对象编程设计的特点"></a>面向对象编程设计的特点</h4><p>面向对象编程特点：抽象、封装、继承、多态</p><h3 id="Vue-相关"><a href="#Vue-相关" class="headerlink" title="Vue 相关"></a>Vue 相关</h3><h4 id="Vue-路由"><a href="#Vue-路由" class="headerlink" title="Vue 路由"></a>Vue 路由</h4><p><strong>vue中的路由模式</strong></p><p>路由模块的本质就是建立起url和页面之间的映射关系，vue-router有3种路由模式：<strong>hash，history，abstract</strong>.</p><h4 id="vue组件间通信方式"><a href="#vue组件间通信方式" class="headerlink" title="vue组件间通信方式"></a>vue组件间通信方式</h4><p>(这里是 Vue2 和 Vue 3 都算上了)</p><ul><li>通过 props 传递    (父传子属性或者函数等)</li><li>通过 $emit 触发<strong>自定义事件</strong>  </li><li>使用 ref  同样需要触发 $emit</li><li>EventBus （事件总线）  </li><li>$ parent /$children 或 $ root  </li><li>attrs 与 listeners</li><li>Provide 与 Inject</li><li>Vuex</li></ul><h3 id="前端开发细节"><a href="#前端开发细节" class="headerlink" title="前端开发细节"></a>前端开发细节</h3><h4 id="GBK-和-UTF8-编码"><a href="#GBK-和-UTF8-编码" class="headerlink" title="GBK 和 UTF8 编码"></a>GBK 和 UTF8 编码</h4><p><strong>GBK：</strong></p><p>中文、英文、数字均使用双字节来表示</p><p><strong>UTF-8：</strong></p><p>汉字占3个字节、数字占1个字节、英文字母占1个字节</p><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>对原来为明文的文件或数据按某种算法进行处理，加密后的数据不可读，是“密文”，只能在输入相应的密钥之后才能显示出原容</p><ul><li><p>可逆加密算法</p><ul><li><p>对称加密：发送方发送 明文+加密密钥一起打包使用特殊的加密算法得到加密密文，收信方 使用加密密钥和相同加密算法的逆算法进行解密，获取明文。<strong>其特点在：加密密钥只有一个，收发双方使用的是一个。</strong></p><p>优点当然是计算量小而且快，缺点也就是相对于非对称不安全。</p><p>用途： 一般用于保存用户手机号、身份证等敏感但能解密的信息。<br>常见的对称加密算法有: AES、DES、3DES、Blowfish、IDEA、RC4、RC5、RC6、HS256</p></li><li><p>非对称加密：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密。私钥加密的内容，通过公钥可以解密读取出来，反之，通过公钥加密的内容也可以由私钥解密读取出来</p><p>用途： 一般用于签名和认证。私钥服务器保存, 用来加密, 公钥客户拿着用于对于令牌或者签名的解密或者校验使用.</p><p>解释：在区块链网络上进行一笔交易时，我没有办法确定交易的是不是你本人，这个时候就可以让你用私钥加密一段内容作为数字签名发过来，然后我通过已经公开的公钥进行破解，因为私钥只有你本人保留，如果我能用语之对应的公钥成功破解，<strong>就说明是你本人在进行操作</strong>，如果不能破解，则说明是别人盗用了你的身份，因此解决了我是我，这是我在交易的问题。</p><p>常见的非对称加密算法有： RSA、DSA（数字签名用）、ECC（移动设备用）、RS256 (采用SHA-256 的 RSA 签名)</p></li></ul></li><li><p>不可逆加密算法：旦加密就不能反向解密得到密码原文.</p><p>种类: Hash加密算法, 散列算法, 摘要算法等<br><strong>用途：</strong>一般用于效验下载文件正确性，一般在网站上下载文件都能见到；存储用户敏感信息，如密码、 卡号等不可解密的信息。<br>常见的不可逆加密算法有： MD5、SHA、HMAC</p></li><li><p>特殊：Base64编码：网络上最常见的用于传输8Bit字节代码的编码方式之一。</p><p>Base64编码可用于在HTTP环境下传递较长的标识信息。通常用于把二进制数据编码为可写的字符形式的数据。<strong>采用Base64编码解码具有不可读性</strong>，即所编码的数据不会被人用肉眼所直接看到。注意：<strong>Base64只是一种编码方式，不算加密方法</strong>。</p></li></ul><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><h4 id="算法稳定性与时间复杂度"><a href="#算法稳定性与时间复杂度" class="headerlink" title="算法稳定性与时间复杂度"></a>算法稳定性与时间复杂度</h4><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/QQ截图20230117185107.png" alt=""></p><h3 id="JS-里一些奇怪的东东，现在不知道处于哪里"><a href="#JS-里一些奇怪的东东，现在不知道处于哪里" class="headerlink" title="JS 里一些奇怪的东东，现在不知道处于哪里"></a>JS 里一些奇怪的东东，现在不知道处于哪里</h3><h4 id="Redux（react的）-Vuex同类"><a href="#Redux（react的）-Vuex同类" class="headerlink" title="Redux（react的）   Vuex同类"></a>Redux（react的）   <code>Vuex同类</code></h4><p><em>Redux</em> 是 JavaScript 状态容器，提供可预测化的状态管理。</p><p>其和 Vuex 实现的内容一致。 用的貌似不多。</p><p><strong>Redux遵循的原则</strong></p><ul><li>单一数据源：整个应用的state被存储在一棵object tree中，并且这个object tree只存在于唯一一个store中； </li><li>state是只读的：唯一改变state的方法就是触发action，action是一个用于描述发生事件的普通对象； </li><li>使用纯函数修改数据；</li></ul><h4 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h4><p>可查看的教程：<a href="https://blog.csdn.net/weixin_50238437/article/details/126082425">https://blog.csdn.net/weixin_50238437/article/details/126082425</a></p><ul><li>宏任务和微任务都是异步任务，都在任务队列中，但是它们在不同的队列中</li><li><strong>重点：在准备取出每个宏任务准备执行前要执行完所有的微任务</strong></li></ul><p>宏任务包括：</p><ul><li><p><strong>setTimeout 和 setInterval</strong>， I/O， 事件</p></li><li><p>postMessage</p></li><li><p>setImmediate (node中的特性，浏览器已经废弃该API)</p></li><li><p>requestAnimationFrame() 请求动画帧</p><p>他的作用就是代替定时器做更加<strong>流畅高性能</strong>的动画，做可以匹配设备刷新率的动画，他解决了<strong>定时器做动画时间间隔不稳定的问题</strong>（也就是解决定时器做动画不流畅的问题）。他的用法与setTimeout差不多。</p></li><li><p>UI渲染</p></li><li><p>ajax</p></li></ul><p>微任务包括：</p><ul><li>Promise.then  catch finally</li><li>async/await</li><li>MutationObserver（chrome种 node无）</li><li>process.nextTick (node中)</li></ul><p>所以下面这段代码的执行结果为：</p><p><strong>刚开始先同步代码执行，先输出开始和结束</strong></p><p>// 依次输出：开始 结束 佩奇（<strong>因为 promise是微任务</strong>） 定时器执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;定时器执行&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;佩奇&#x27;</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端-JS-选择题笔试&quot;&gt;&lt;a href=&quot;#前端-JS-选择题笔试&quot; class=&quot;headerlink&quot; title=&quot;前端 JS 选择题笔试&quot;&gt;&lt;/a&gt;前端 JS 选择题笔试&lt;/h2&gt;&lt;h3 id=&quot;Git-指令&quot;&gt;&lt;a href=&quot;#Git-指令&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录  （题目 与 类型归纳）</title>
    <link href="http://example.com/2023/03/22/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%20%20%EF%BC%88%E9%A2%98%E7%9B%AE%20%E4%B8%8E%20%E7%B1%BB%E5%9E%8B%E5%BD%92%E7%BA%B3%EF%BC%89/"/>
    <id>http://example.com/2023/03/22/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%20%20%EF%BC%88%E9%A2%98%E7%9B%AE%20%E4%B8%8E%20%E7%B1%BB%E5%9E%8B%E5%BD%92%E7%BA%B3%EF%BC%89/</id>
    <published>2023-03-22T15:52:03.000Z</published>
    <updated>2023-03-20T10:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码随想录-（题目-与-类型归纳）"><a href="#代码随想录-（题目-与-类型归纳）" class="headerlink" title="代码随想录  （题目 与 类型归纳）"></a>代码随想录  （题目 与 类型归纳）</h2><h3 id="一些值的记忆的JAVA代码点"><a href="#一些值的记忆的JAVA代码点" class="headerlink" title="一些值的记忆的JAVA代码点"></a>一些值的记忆的JAVA代码点</h3><h4 id="数组与List"><a href="#数组与List" class="headerlink" title="数组与List"></a>数组与List</h4><h5 id="数组和-List-的相互转换-Arrays-asList"><a href="#数组和-List-的相互转换-Arrays-asList" class="headerlink" title="数组和 List 的相互转换      Arrays.asList"></a>数组和 List 的相互转换      <code>Arrays.asList</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组转 List    </span></span><br><span class="line">List&lt;String&gt; wordList = Arrays.asList(String数组);</span><br><span class="line"><span class="comment">// list 转 int[]</span></span><br><span class="line"><span class="keyword">int</span>[] res = result.stream().mapToInt(Integer::intValue).toArray();</span><br></pre></td></tr></table></figure><h5 id="二维数组-按行初始化-Arrays-fill"><a href="#二维数组-按行初始化-Arrays-fill" class="headerlink" title="二维数组 按行初始化  Arrays.fill"></a>二维数组 按行初始化  <code>Arrays.fill</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chessboard = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line"><span class="comment">// 使用 Arrays方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span>[] c : chessboard) &#123;</span><br><span class="line"><span class="comment">// 填充棋盘</span></span><br><span class="line">Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二维数组转list"><a href="#二维数组转list" class="headerlink" title="二维数组转list"></a>二维数组转list</h5><p>将一个二维数组，变成一个一维度的 List</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span>[] c : chessboard) &#123;</span><br><span class="line"><span class="comment">// String.valueOf() 返回char数组参数的字符串表示形式</span></span><br><span class="line">    <span class="comment">// 那对于不同类型肯定不一样啦</span></span><br><span class="line">list.add(String.valueOf(c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="比较字符串两者字母是否数量一致-Arrays-equals"><a href="#比较字符串两者字母是否数量一致-Arrays-equals" class="headerlink" title="比较字符串两者字母是否数量一致   Arrays.equals"></a>比较字符串两者字母是否数量一致   <code>Arrays.equals</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] str1 = s.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] str2 = t.toCharArray();</span><br><span class="line">Arrays.sort(str1);</span><br><span class="line">Arrays.sort(str2);</span><br><span class="line"><span class="comment">// 使用 equals 方法看看是不是一直 </span></span><br><span class="line"><span class="keyword">return</span> Arrays.equals(str1, str2);</span><br></pre></td></tr></table></figure><h5 id="字符串和-char-互相转换-toCharArray-new-String"><a href="#字符串和-char-互相转换-toCharArray-new-String" class="headerlink" title="字符串和 char[ ] 互相转换  toCharArray()  new String( )"></a>字符串和 char[ ] 互相转换  <code>toCharArray()</code>  <code>new String( )</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] sentence = s.toCharArray();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(sentence);</span><br><span class="line"><span class="comment">// 如果创建一个新的</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 截取</span></span><br><span class="line">String.valueOf(s, <span class="number">0</span>, 取不到的索引位置);</span><br></pre></td></tr></table></figure><h5 id="字符串（数字）宇整型-Int-互相转换"><a href="#字符串（数字）宇整型-Int-互相转换" class="headerlink" title="字符串（数字）宇整型 Int 互相转换"></a>字符串（数字）宇整型 Int 互相转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转数字</span></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(str);  <span class="comment">//比较耗费时间</span></span><br><span class="line"><span class="comment">// 数字转字符串</span></span><br><span class="line">String str = String.valueof(num);</span><br></pre></td></tr></table></figure><h5 id="替换字符的方法-replace"><a href="#替换字符的方法-replace" class="headerlink" title="替换字符的方法 replace"></a>替换字符的方法 <code>replace</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="字符串拼接-List内容-String-join"><a href="#字符串拼接-List内容-String-join" class="headerlink" title="字符串拼接 List内容   String.join"></a>字符串拼接 List内容   <code>String.join</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.join(<span class="string">&quot; &quot;</span>, wordList);</span><br></pre></td></tr></table></figure><h4 id="Collection-相关方法（针对-List）"><a href="#Collection-相关方法（针对-List）" class="headerlink" title="Collection 相关方法（针对  List）"></a>Collection 相关方法（针对  List）</h4><h5 id="将List-的内容全部逆序-Collections-reverse"><a href="#将List-的内容全部逆序-Collections-reverse" class="headerlink" title="将List 的内容全部逆序   Collections.reverse"></a>将List 的内容全部逆序   <code>Collections.reverse</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.reverse(wordList);</span><br></pre></td></tr></table></figure><h4 id="Compare-用法"><a href="#Compare-用法" class="headerlink" title="Compare 用法"></a>Compare 用法</h4><p>其实涉及这块，我还是觉得 用 js 写起来简单一些</p><p><strong>用于sort</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">       Arrays.sort(people, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] person1, <span class="keyword">int</span>[] person2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (person1[<span class="number">0</span>] != person2[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> person2[<span class="number">0</span>] - person1[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> person1[<span class="number">1</span>] - person2[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">有时候甚至不需要这个库</span><br><span class="line">    我们后面其实 这个<span class="keyword">return</span> 返回的应该是一个正数或者负数 注意因为简写所以不需要 <span class="keyword">return</span></span><br><span class="line">    最好别用这种，碰到数据超了 或者值超了 = = 就不行了</span><br><span class="line">    Arrays.sort(points, (p1, p2) -&gt; p1[<span class="number">1</span>] &lt; p2[<span class="number">1</span>] ? -<span class="number">1</span> : <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="优先队列（顶堆）"><a href="#优先队列（顶堆）" class="headerlink" title="优先队列（顶堆）"></a>优先队列（顶堆）</h4><h5 id="实现小（大）顶堆，并按规则排序-PriorityQueue"><a href="#实现小（大）顶堆，并按规则排序-PriorityQueue" class="headerlink" title="实现小（大）顶堆，并按规则排序    PriorityQueue"></a>实现小（大）顶堆，并按规则排序    <code>PriorityQueue</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如 小(大)顶堆内存储的节点为 key ，按照存储key对应的value 大小排序为 小顶堆</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a,Integer b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> HashMap.get(a) - HashMap.get(b);</span><br><span class="line">        <span class="comment">//return HashMap.get(a) - HashMap.get(b);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="优先队列的函数-API"><a href="#优先队列的函数-API" class="headerlink" title="优先队列的函数 API"></a>优先队列的函数 API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其插入会自动进行堆排序的（自行调整堆）</span></span><br><span class="line">minHeap.add(key);</span><br><span class="line"><span class="comment">// 弹出堆顶  返回结果 </span></span><br><span class="line">minHeap.poll();</span><br><span class="line"><span class="comment">// 查看堆顶  返回结果</span></span><br><span class="line">minHeap.peek()；</span><br><span class="line"><span class="comment">// 查看堆是否为空  返回 布尔值</span></span><br><span class="line">minHeap.isEmpty()</span><br></pre></td></tr></table></figure><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="求一个二叉树的最大高度（递归）"><a href="#求一个二叉树的最大高度（递归）" class="headerlink" title="求一个二叉树的最大高度（递归）"></a>求一个二叉树的最大高度（递归）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 还是宏观来看 </span></span><br><span class="line">    <span class="comment">// 根节点为空 肯定没深度</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 有根节点的话  </span></span><br><span class="line">    <span class="comment">// 我们就去看左右子树的深度</span></span><br><span class="line">    <span class="comment">// 左右 深度大的那个 肯定是根节点的深度 -1</span></span><br><span class="line">    <span class="comment">// 最后加上 根节点就是答案</span></span><br><span class="line">    <span class="keyword">int</span> left = maxDepth(root.left);</span><br><span class="line">    <span class="keyword">int</span> right = maxDepth(root.right);</span><br><span class="line">    depth = Math.max(left,right);</span><br><span class="line">    <span class="keyword">return</span> depth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求是不是一颗二叉排序树（递归）"><a href="#求是不是一颗二叉排序树（递归）" class="headerlink" title="求是不是一颗二叉排序树（递归）"></a>求是不是一颗二叉排序树（递归）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> pre = Long.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> left = isValidBST(root.left);</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt;= pre) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root.val;</span><br><span class="line">        <span class="keyword">boolean</span> right = isValidBST(root.right);</span><br><span class="line">        <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分类"><a href="#题目分类" class="headerlink" title="题目分类"></a>题目分类</h3><ul><li>打钩的表示 肯定会做；</li><li><font color="green">绿色</font> 表示我能写出来，但是不一定 不熟，有时候就想不到</li><li><font color="blue">蓝色</font> 表示有想法做出来但是过不了或者 不是考的想法，时间复杂度太高</li><li><font color="orange">橙色</font>的意思是，大概率还是写不出来，但是我看得懂； </li><li><font color="red">红色</font>的意思是，我估计写不出来，只能靠默写，原理不是很明白</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>[x] 二分查找                                                                      方法：二分查找</li><li>[ ] <font color="blue">移除元素</font>                                                                      方法：双指针（可用覆盖隐式双指针）</li><li>[ ] <font color="blue">序数组的平方</font>                                                              方法：双指针</li><li>[ ] <font color="orange">长度最小的子数组</font>                                                      方法：滑动窗口（双指针实现）</li><li>[ ] <font color="orange">螺旋矩阵Ⅱ</font>                                                                  方法：模拟  找到合适判断条件转方向</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li>[x] 移除链表元素                                                                     方法：头结点</li><li>[x] 设计链表                                                                             方法：头结点，index超过 需要先判断null</li><li>[ ] <font color="orange">反转链表</font>                                                                             方法：递归</li><li>[x] 两两交换链表中的节点                                                      方法：<font color="red">递归</font>   或  头结点+双指针</li><li>[x] 删除链表的倒数第 N 个结点                                             方法：头结点+栈</li><li>[ ] <font color="green">链表相交</font>                                                                             方法：双指针</li><li>[ ] 环形链表 II                                                                          方法：<font color="orange">头结点+快慢指针+数学</font>  或  哈希Set</li></ul><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><ul><li>[x] 有效的字母异位词                                                              方法：<font color="green">equals函数</font>  或  哈希表</li><li>[ ] <font color="orange">查找常用字符</font>                                                                      方法：哈希表  （但逻辑比较复杂）</li><li>[x] 两个数组的交集                                                                  方法：哈希Set</li><li>[ ] <font color="orange">快乐数                                                                                  </font>                                                                                方法：数学+哈希Set+ 获取一个数所有位数操作</li><li>[x] 两数之和                                                                              方法：哈希表</li><li>[ ] <font color="orange">四数相加Ⅱ</font>                                                                          方法：分两段暴力 + 哈希表</li><li>[ ] 赎金信                                                                                  方法：哈希表（<font color="green">用数组哈希更快一些</font>）</li><li>[ ] <font color="orange">三数之和</font>                                                                              方法：循环内双指针（去重考虑难度大）</li><li>[ ] <font color="orange">四数之和</font>                                                                              方法：双循环内双指针（去重考虑难度大）</li></ul><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><ul><li>[x] 反转字符串                                                                           方法：双指针</li><li>[ ] <font color="blue">反转字符串Ⅱ</font>                                                                       方法：双指针</li><li>[ ] <font color="blue">替换空格</font>                                                                                方法：字符串API <code>replace</code> 或 StringBuilder遍历</li><li>[x] 反转字符串里的单词       方法：API trim + 正则表达 + 双指针+ StringBuilder   或者 <font color="red">正则+list+collection+join</font></li><li>[x] 左旋转字符串                                                                        方法：StringBuilder</li><li>[ ] <font color="red">重复的子字符串</font>                                                                     方法：数学</li></ul><h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><ul><li>[x] 用栈实现队列                                                                         方法：Java 类定义写法  注意：什么时候将第一个队列全部放到第二个中</li><li>[x] 用队列实现栈                                                                         方法：使用Deque   里面有 removeFirst removeLast方法 更快</li><li>[x] 有效的括号                                                                             方法：使用Deque  正着写就行（就是麻烦点），反着写比较难写</li><li>[x] 删除字符串中的所有相邻重复项                                          方法：使用Deque  正着写，利用 Deque双端 简单一些</li><li>[ ] 逆波兰表达式                                                                         方法：使用Deque栈，使用<strong>正则表达式</strong>判断是否会数字</li><li>[ ] <font color="red">滑动窗口最大值</font>                                                                     方法：使用Deque 编写单调栈，要前后两头都考虑</li><li>[ ] <font color="orange">前K个高频元素</font>                                                                       方法：哈希表 + 优先队列（小顶堆）</li></ul><h3 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h3><p><img src="C:\Users\96356\Desktop\上传图片\20210219190809451.png" alt="20210219190809451" style="zoom:50%;" /></p><h4 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h4><ul><li>[x] 二叉树的前序遍历                                                                     方法：递归</li><li>[x] 二叉树的后序遍历                                                                     方法：递归</li><li>[x] 二叉树的中序遍历                                                                     方法：递归</li><li>[x] 二叉树的层次遍历                                                                     方法：Queue队列 </li></ul><h4 id="二叉树的属性"><a href="#二叉树的属性" class="headerlink" title="二叉树的属性"></a>二叉树的属性</h4><ul><li>[ ] <font color="green">对称二叉树</font>                                                                                 方法：递归</li><li>[x] 二叉树的最大深度                                                                     方法：<font color="orange">递归  </font>或  层次</li><li>[ ] <font color="red">二叉树的最小深度</font>                                                                     方法：<font color="red">递归  </font></li><li>[ ] <font color="blue">完全二叉树的节点个数</font>                                                             方法：<font color="red">递归</font> 或  层次</li><li>[ ] <font color="green">平衡二叉树</font>                                                                                方法：递归</li><li>[ ] <font color="red">二叉树的所有路径</font>                                                                     方法：递归</li><li>[ ] <font color="orange">左叶子之和</font>                                                                                方法：递归   <font color="orange">（如何判断是左叶子！）</font></li><li>[ ] <font color="blue">找树左下角的值</font>                                              方法：<font color="orange">递归（如何判断是最后一层最左侧） 或 特殊的 BFS 方法</font></li><li>[ ] <font color="green">路经总和</font>                                                                                   方法：递归</li></ul><h4 id="二叉树的修改和改造"><a href="#二叉树的修改和改造" class="headerlink" title="二叉树的修改和改造"></a>二叉树的修改和改造</h4><ul><li>[ ] <font color="green">翻转二叉树</font>                                                                                   方法：递归</li><li>[ ] <font color="red">从中序与后序遍历序列构造二叉树</font>                                             方法：<font color="red">哈希表 + 递归</font></li><li>[ ] <font color="green">最大二叉树 </font>                                                                                  方法：递归 （用左右控制截取nums）</li><li>[ ] <font color="orange">合并二叉树</font>                                                                                   方法：递归（都有的创建新节点来做简单）</li></ul><h4 id="搜索二叉树的属性"><a href="#搜索二叉树的属性" class="headerlink" title="搜索二叉树的属性"></a>搜索二叉树的属性</h4><p>注意搜索二叉树其实就是  排序二叉树，可以利用到 左边小，右边大的性质，这样更快</p><font color="red">**其中序排序是 有序序列**</font><ul><li><p>[x] 700. 二叉搜索树中的搜索                                                            方法：递归，利用性质更快</p></li><li><p>[ ] <font color="orange">98.验证二叉搜索树</font>                                                                     方法：递归，用改良中序</p></li><li>[ ] <font color="orange">530.二叉搜索树的最小绝对差</font>                                                   方法：递归，同上改良 </li><li>[ ] <font color="orange">501.二叉搜索树中的众数</font>                                                           方法：<font color="orange">中序递归按情况计数，需要记录前节点</font></li><li>[ ] <font color="green">538.把二叉搜索树转换为累加树</font>                                               方法：右根左 递归，<font color="green">记录前节点累加，类似于上题</font></li></ul><h4 id="二叉树公共祖先问题"><a href="#二叉树公共祖先问题" class="headerlink" title="二叉树公共祖先问题"></a>二叉树公共祖先问题</h4><ul><li>[ ] <font color="red">236.二叉树的最近公共祖先</font> <strong>（最近经常出 字节啥的）</strong>          方法：递归 </li><li>[ ] <font color="orange">235.二叉搜索树的最近公共祖先</font>                                              方法：<font color="orange">循环判断（利用二叉搜索树的性质）</font> 或者 同上题</li></ul><h4 id="二叉搜索树的修改和改造"><a href="#二叉搜索树的修改和改造" class="headerlink" title="二叉搜索树的修改和改造"></a>二叉搜索树的修改和改造</h4><ul><li>[x] 701.二叉搜索树中的插入操作                                                         方法：循环判断 （利用二叉搜素树的性质）                                                                                                           注意：我考虑的插入的一定是 叶子节点               或者 递归</li><li>[ ] <font color="red">450.删除二叉搜索树中的节点 </font>                                                         方法：循环判断  或者 递归   <font color="red"><strong>都比较难没咋看懂</strong></font> </li><li>[ ] <font color="red">669.修剪二叉搜索树</font>                                                                        方法：递归  <font color="red"><strong>难想</strong></font> </li><li>[ ] <font color="orange">108.将有序数组转换为二叉搜索树</font>                                                 方法：递归  <font color="orange">要注意右侧落点（否则- -会<strong>死循环</strong>）</font></li></ul><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/20210219192050666.png" alt=""></p><h4 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h4><ul><li><p>[ ] <font color="orange">77.组合</font>                                                                               方法：回溯  剪枝优化 <code>large - (k - path.size()) + 1</code></p></li><li><p>[ ] <font color="orange">17.电话号码的字母组合</font>                                                    方法：哈希（转换为数组更快）+ 回溯。 树的高度应该是 电话号码的个数</p></li><li><p>[ ] <font color="blue">39.组合总和</font>                                                                       方法：利用begin的回溯法，<font color="orange">需关于值的 剪枝 break 降低复杂度</font></p></li><li><p>[ ] 40.组合总和Ⅱ                                                                   方法：利用begin的回溯法，<strong>需要额外的重复剪枝 continue</strong>，不然答案会重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(begin &lt; i &amp;&amp; candidate[i-<span class="number">1</span>] == candidate[i] )</span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>[ ] <font color="green">216.组合总和Ⅲ</font>                                                                 方法：类似于 组合总数，只是要在 return 的时候注意 只有长度为k的才可以</p></li></ul><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><ul><li>[ ] <font color="orange">131.分割回文串</font>                                                                               方法：回溯  begin ，需要截取字符串 (begin, i+1)</li><li>[ ] <font color="orange">93.复原IP地址</font>     <strong>2021.3.24虾皮笔试</strong>                                           方法：回溯 begin 和上题很像 但是要注意细节处理 使用path记录，最后拼接答案（我用的 get() 和 sub  Integer.parseInt 是比较慢 = =的 ）</li></ul><h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h4><ul><li>[ ] <font color="orange">78.子集</font>                                                                               方法：回溯  begin  递归出口直接写就好</li><li>[ ] <font color="orange">90.子集Ⅱ</font>                                                                               方法：回溯  begin  同上 只是要剪枝。 要先sort一下，不然剪枝无效的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(begin &lt; i &amp;&amp; candidate[i-<span class="number">1</span>] == candidate[i] )</span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4><ul><li><p>[ ] <font color="orange">46.全排列</font>                                                                               方法：回溯  begin=0  + visited数组</p></li><li><p>[ ] <font color="orange">47.全排列Ⅱ</font>                                                                           方法：回溯  begin=0  + visited数组 + 剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( i &gt; <span class="number">0</span> &amp;&amp; numbers[i-<span class="number">1</span>] == numbers[i]  &amp;&amp; visited[i-<span class="number">1</span>] == <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="棋盘问题"><a href="#棋盘问题" class="headerlink" title="棋盘问题"></a>棋盘问题</h4><ul><li><p>[ ] <font color="red">51.N皇后</font>                                                                               方法：回溯  begin 变成 row 行， 每次找到当前行哪一列位置好使进行递归。 答案用的是一个  二位数组记录并判断是否合适</p></li><li><p>[ ] <font color="red">37.解数独</font>                                                                              方法：回溯中有 3层for  ，backtrack有返回值 boolean 因为只要获取一个</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/VCirGskFGPln-S2LGFTgKg</span><br></pre></td></tr></table></figure><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><ul><li><p>[ ] <font color="red">491.递增子序列（和子集问题很像）</font>                                                                               方法：回溯  begin  哈希去重（如果用 path判断的 话 有个样例有bug， 不能盲目i的用之前的去重办法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (path.size() != <span class="number">0</span> &amp;&amp; path.get(path.size() - <span class="number">1</span>) &gt; numbers[i] ) </span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>[ ] <font color="red">332.重新安排行程</font>                                                                              方法：begin = 0， 类似于全排列的做法。 backtrack有返回值 boolean 因为只要获取一个。 在判断的时候，需要判断</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 刚开始就字典序排序</span><br><span class="line">Collections.sort(tickets,(a,b) -&gt; a.get(1).compareTo(b.get(1))); // 字典序排序</span><br><span class="line">//</span><br></pre></td></tr></table></figure><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/20210917104315.png" alt=""></p><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p><h4 id="简单题目"><a href="#简单题目" class="headerlink" title="简单题目"></a>简单题目</h4><ul><li>[x] 455.分发饼干                                                                             方法：贪心 双循环</li><li>[ ] <font color="orange">1005.K次取反后最大化的数组和</font>                                             方法：贪心思路比较难想</li><li>[ ] <font color="orange">860.柠檬水找零</font>                                                                方法：模拟，但是有两种情况，用方法去考虑规避</li></ul><h4 id="中等题目"><a href="#中等题目" class="headerlink" title="中等题目"></a>中等题目</h4><h5 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h5><ul><li>[ ] 376. <font color="red">摆动序列</font>                                                                    方法：非常优化的动态规划 其他方法太复杂</li><li>[ ] <font color="orange">738.单调递增的数字</font>                                                        方法：从右往左改数字</li></ul><h5 id="贪心解决股票问题"><a href="#贪心解决股票问题" class="headerlink" title="贪心解决股票问题"></a>贪心解决股票问题</h5><ul><li>[ ] <font color="orange">122.买卖股票的最佳时期Ⅱ</font>                                                  方法：动态规划 或 贪心</li><li>[ ] <font color="orange">714.买卖股票的最佳时期含手续费 </font>                                      方法：动态规划和上题基本一模一样，这里的贪心策略比较难想</li></ul><h5 id="两个维度权衡问题"><a href="#两个维度权衡问题" class="headerlink" title="两个维度权衡问题"></a>两个维度权衡问题</h5><ul><li>[ ] <font color="orange">135.分发糖果</font>                                                                 方法：贪心算法，从左和从右考虑两次</li><li>[ ] <font color="orange">406.根据身高重建队列</font>                                                  方法：贪心算法，分两步</li></ul><h4 id="有点难度"><a href="#有点难度" class="headerlink" title="有点难度"></a>有点难度</h4><h5 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h5><ul><li>[ ] <font color="red">55.跳跃游戏</font>                                                                 方法：贪心算法 和 动态规划 我觉得对我来说都不好想 = =</li><li>[ ] <font color="red">45.跳跃游戏Ⅱ</font>                                                             方法：贪心算法，从左和从右考虑两次</li></ul><p>重叠区域</p><ul><li>[ ] <font color="orange">452.用最少数量的箭引爆气球</font>                                    方法：贪心算法 这道题用 java sort 的时候需要注意  普通 a[1] -b[1]是不行的  得用三目表达式 return 正负回去</li><li>[ ] <font color="orange">435.无重叠区间</font>                                                           方法：贪心算法 和上题一样只是  需要添加判断等于的时候  最后用减法即可， length - 穿过的箭就是答案</li><li>[ ] <font color="red">763.划分字母区间</font>   <strong>2022美团测试开发题</strong>                 方法：其规则比较难想，转换为上面两题的做法答案思路是不一样的，所以这里他其实巧妙的保存了最后一个元素的索引，然后特殊遍历去做</li><li>[ ] <font color="blue">56.合并区间</font>                                                                 方法：JS使用来回两次 用splice方法增加删除 就是速度慢，java想实现同样的想来太慢了。这个想法是按右侧先排，然后再左右合并。   <strong>代码最简单的想法是，先按左侧排序，然后在将合适的填入（更快）</strong>。</li></ul><ul><li>[ ] <font color="blue">53.最大子序和</font>                                                             方法：用动态规划 最简单</li><li>[ ] <font color="orange">134.加油站</font>                                                                  方法： 在用模拟方法的时候，需要 i+count+1 才可以  他的意思是说  例如 x到 k 就不行，那 x到k中，所有的点到Z肯定也是不行的。</li><li>[ ] <font color="orange">968.监控二叉树</font>   困难题 <strong>天堂硅谷竞赛题</strong>                方法：后续遍历 ，子节点告诉父节点干嘛 摄像头尽可能的装在父节点上，0，1，2表示3种状态，被监视到，放摄像头，没监视到</li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/动态规划上半部分.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/动态规划下部分.png" alt=""></p><ul><li>[x] 509.斐波那契函数                                                方法：基础 一维 动态规划</li><li>[x] 70.爬楼梯                                                              方法：和上面一题  动态转移方程一模一样</li><li>[x] 746.使用最小花费爬楼梯                                     方法：上一题的 在加上 cost[i]，也很简单</li><li>[x] 62.不同路径                                                           方法：简单的二维动态</li><li>[x] 63.不同路径 II                                                      方法：上题 加个判断 </li><li>[ ] <font color="orange">343.整数拆分</font>                                                       方法：动态规划（比较难想，属于背包问题），用数学方法最佳，根据数学推断 分成3一堆一堆，最大</li><li>[ ] <font color="red">96.不同的二叉搜索树</font>                                          方法：动态规划很难想 记不住  建议背下来</li></ul><h4 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h4><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/背包问题的分类.png" alt=""></p><h5 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h5><p>也就是每个东西只能拿一次</p><font color="red">**滚动数组的内循环，从后往前**</font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 内循环 从后往前</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = amount; j &gt;= nums[i]; j--)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>[x] <font color="red">416.分割等和子集</font>                                             方法：就是最基本的 0-1背包问题 只是 weight[i] 变成 nums[i] ，二维一维都可写。  这道题的暴力做法，为回溯。  </p></li><li><p>[x] <font color="red">1049.最后一块石头的重量 II</font>                            方法：转换思想后 完全就是 0-1背包  只是最后 return 你要想清楚返回的是啥</p></li><li><p>[x] <font color="red">494.目标和</font>                                                        方法：转换思想后 是个 0-1背包的 <strong>组合问题</strong>，其动态转移方程 有变化 为  <code>dp[j] += dp[j - nums[i]];</code>  并且初始化 dp[0] 要考虑清楚。</p><p>二维写不出来，= =            回溯看了别人的可以过哎，就是很慢。</p></li><li><p>[x] <font color="red">474.一零和</font>                                                       方法：0-1背包问题，这里的滚动数组 内层变成了二维双循环，所以 滚动数组为二维    滚动数组定义为 <strong>最多有i个0和j个1的strs的最大子集的大小</strong> 其状态转移方程为</p><p><code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code>  zeroNum 与 oneNum 表示为当前</p></li></ul><h5 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h5><font color="red">**其实就是 滚动数组的内循环，不再从后往前，为从前往后**</font>  **这个适用于组合问题**<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 内循环 从前往后</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = nums[i]; j &lt;= amount; j++)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>遍历顺序问题：**组合问题** （求组合个数）对于组合问题或者背包问题    **都采用 先遍历物品，再遍历背包**对于组合问题（问排序数）  **都采用 先遍历背包，再遍历物品****dp的定义为  dp[i] 为当前 i 下 有几个的组合数**采用的 动态转移方程为<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] += dp[j - nums[i]];</span><br></pre></td></tr></table></figure>  初始化要注意：  `dp[0] = 1`**求组合问题中的 最佳****dp的定义为  dp[i] 为当前 i 下 可以的数字组合中，长度的最小值**采用的 动态转移方程为<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] = <span class="built_in">Math</span>.min(dp[j], dp[j- coins[i]] + <span class="number">1</span>) </span><br></pre></td></tr></table></figure>  初始化要注意 一般：  `dp[0] = 0`， 其他都为 `Infinity`  无穷大对于排序问题，其遍历顺序是有区别的我应该先遍历容积，再遍历背包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= n; j++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j &gt;= nums[i])&#123;</span><br><span class="line">    dp[j] += dp[j - nums[i]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- [x] <font color="orange">518.零钱兑换 Ⅱ</font>                                             方法：完全背包的**组合问题 ** 其动态转移方程 有变化 为  `dp[j] += dp[j - nums[i]];`  并且初始化 dp[0] 要考虑清楚。应该初始为 1- [x] <font color="orange">377.组合总数Ⅳ</font>                                              方法：**组合数** 就是目标和 那道题的 完全背包 （数字可以重复用） `dp[j] += dp[j - nums[i]];`  并且初始化 dp[0] 要考虑清楚。应该初始为 1  **不过这道题求的是排序数  不是 组合数  所以 内外循环 遍历顺序需要变换**。  **昨天刚做个这个 所以我第一次做出来了**- [x] <font color="blue">70.爬楼梯（完全背包解法)</font>                         方法：同样这道题 也可以理解为 **排序数** 和上题做法一模一样。 就是 nums[] 物品数组 变成步数而已 {1,2}- [x] <font color="red">322.零钱兑换</font>                                       方法：**求组合问题中的 最佳**- [x] <font color="blue">279.完全平方数</font>                                   方法：**求组合问题中的 最佳**， 和上题一样，就是这题需要自己先构建处 一个 物品[ ] 出来  这题用 java 比较麻烦，因为构造这个 物品[ ]  只能用list 还要转 = -= 自讨苦吃，所以我不写。- [x] <font color="red">139.单词拆分</font>                                      方法：属于**排序问题**   但是这个递推公式比较难想> 如果确定dp[j] 是true，且 [j, i] 这个区间的子串出现在字典里，那么dp[i]一定是true。（j < i ）。>> 所以递推公式是 if([j, i] 这个区间的子串出现在字典里 && dp[j]是true) 那么 dp[i] = true。#### 打家劫舍这个类型的题其实不算 0-1背包问题， **因为 背包问题没有限制取包的规则**- [ ] <font color="orange">198.打家劫舍（线性）</font>                                              方法： `dp[i] = Math.max(dp[i-2] + nums[i] ,dp[i-1])` 没写出来，太蠢了，白写题目了，以前这个题做的出来的啊- [ ] <font color="blue">213.打家劫舍Ⅱ  （环状）</font>                                        方法：由于是环状，其实最后的落点一定在 倒数第一家或者倒数第二家。所以我们可以把数组拆成  0- n-2  和 1- n-1 来取其中最大值，每一段的取值和上一题线性一致。- [ ] <font color="red">337.打家劫舍Ⅲ  （树形dp）</font>                                        方法：**必须后续遍历递归做**，**因为通过递归函数的返回值来做下一步计算**。dp为2维度 为 【不偷，偷】的分别最大值。  递归逻辑为 如果抢了当前节点，两个孩子就不能动，如果没抢当前节点，就可以考虑抢左右孩子（**注意这里说的是“考虑”**）递归出口为 碰到 null 返回 [0,0]#### 股票问题- [ ] <font color="red">121.买卖股票的最佳时机 （只能买卖一次）</font>                方法：这题一定要是1维度的，因为他只买卖一次，不能用下面的二维来做。- [ ] <font color="red">122.买卖股票的最佳时机Ⅱ （可以买卖多次）</font>            方法： 定义dp 的理解上， `dp[i][0]表示第i天不持有股票, dp[i][1]表示第i天持有股票`。 所以首先要合理初始化， 然后遍历讨论 `dp[i][0]` 和 `dp[i][1]` 的可能性，分别各自有两种。- [ ] <font color="red">123.买卖股票的最佳时机Ⅲ （最多买卖两次）</font> 方法：  <font color="red">**这道题的 dp定义为  `dp[i][j]`  描绘的是当天整体处于的状态，不是当天的操作**</font><pre><code> `dp[i][0]` 第 i 天没有操作， 那前面也不可能操作</code></pre><p>  ​                    <code>dp[i][0] = dp[i - 1][0];</code></p><pre><code> `dp[i][1]` 第 i 天第一次买入，这个意思是  之前是的状态是第一次买入，但今天可以不卖 </code></pre><p>  ​    或者是 前面一直是静默状态，今天买入了</p><p>  ​                    <code>dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i])</code></p><pre><code> `dp[i][2]` 第 i 天第一次卖出，这个意思是 之前的状态已经是卖出第一次了，我今天静默；或者是今天确实是第一次卖出</code></pre><p>  ​                    <code>dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);</code></p><pre><code> `dp[i][3]` 第 i 天第二次买入 ，这个意思就是 之前已经卖出过第一次了，此刻已经是买入的状态。有可能为之前已经买入第二次，今天是静默 或者  是今天买的第二次，之前一直是第一次卖出的状态</code></pre><p>  ​                    <code>dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]</code>        </p><pre><code> `dp[i][4]` 第 i 天第二次卖出，这个意思是  此时整体是第二次卖出的状态，有两种可能：第一之前已经卖出了第二次了，我今天是静默；第二我就是今天卖的</code></pre><p>  ​                <code>dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);</code></p>  <font color="blue">**初始化中** </font> `dp[i][1]  = -prices[0]`  第二次买入依赖于第一次卖出的状态，其实相当于第0天第一次买入了，第一次卖出了，然后在买入一次（第二次买入）  ​    `dp[i][3]  = -prices[0]`  <font color="blue">**最后的 return 可定是** `dp[prices.length - 1][4]`</font>，因为我要满足两次都卖出的时候状态并且是最后一天的时候。- [ ] <font color="red">188.买卖股票的最佳时机Ⅳ （最多买卖k次）</font>  方法：这题就是上一题 2 => k **变成循环就完了**- [ ] **309.买卖股票多次  但是买入之后需要一天的冷冻期    方法：**- [ ] <font color="blue">714.买卖多次 但是每次有手续费</font>                    方法：这题就是 122.买卖股票的最佳时机Ⅱ （可以买卖多次） 卖了多个费用而已#### 子序列问题##### 子序列（不连续）问题**全部是正常遍历顺序** - [ ] <font color="red">300.最长递增子序列</font>                                方法：`dp[i] = max(dp[i], dp[j] + 1);`  初始化全为1  两层for 循环- [x] <font color="red">1143.最长公共子序列</font>                               方法：`dp[i][j]` 的含义是 `text1[0:i-1]` 和 `text2[0:j-1]` 的最长公共子序列。  如果`text1[i - 1] 与 text2[j - 1]`不相同，那就看看`text1[0, i - 2]与text2[0, j - 1]的最长公共子序列 和 text1[0, i - 1]与text2[0, j - 2]的最长公共子序列，取最大的。`  ![](http://kyle-pic.oss-cn-hangzhou.aliyuncs.com/img/QQ截图20220915200451.png)- [ ] <font color="blue">1035.不相交的线</font>                                      方法：**和上面一题一模一样，代码都是一样的**，就是换个场景。 语法糖啊。##### 子序列（连续）问题**全部是正常遍历顺序** - [ ] <font color="blue">674.最长连续递增子序列</font>          方法：这道题 和 <font color="red">300.最长递增子序列</font> 想法是一样的，只是 j 的变化范围的区别，在这里必须是连续的 所以 j 的取值只有 i 的前一个，但是 不连续的情况下， j 的取值是 [0, i-1]。  所以只需要在 300的基础上，需改 j 的初始值wei  i - 1 即可。- [ ] <font color="red">718.最长公共子数组</font>                  方法：这道题<font color="red">1143.最长公共子序列</font>  一模一样，就是这里是连续，连续和不连续的区别在于，动态转移方程不同  对于  非连续   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(text1[i-<span class="number">1</span>] == text2[j-<span class="number">1</span>])</span><br><span class="line">    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    dp[i][j] = <span class="built_in">Math</span>.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>  对于 连续  只有   并且最大的并不是 dp最后，所以需要一个 result 去维护  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(text1[i-<span class="number">1</span>] == text2[j-<span class="number">1</span>])</span><br><span class="line">    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br></pre></td></tr></table></figure>- [ ] 53.最大子数和                     方法：正常的一维动态规划##### 编辑距离**全部是正常遍历顺序** - [ ] <font color="orange">392.判断子序列</font>                    方法：用最大公共子序列，然后判断最后结果必须和 s序列长度一样。这个方法是可行的.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这位 t 对比上了 所以去掉这位 继续</span></span><br><span class="line">dp[i][j] = dp[i][j-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>- [ ] <font color="red">115.不同的子序列</font>             方法：这道题其实就是编辑距离，只是仅仅考虑删除，不包括修改和增加。**并且只考虑左侧字符串。** 并且这道题是考虑 匹配的数量，所以动态规划表达式有所区别。- [ ] <font color="blue">583.两个字符串的删除操作</font>    方法：这道题是上一题的变成了 2个字符串都删除，求删到一样的最小步数。其实最佳的结束点就是最大公共子序列，步数就是 长度- 最大公共子序列啊。。- [ ] <font color="red">72.编辑距离</font>                     方法：这道题是最经典的编辑距离的问题，也就是上面 <font color="red">115.不同的子序列</font>的完全版，需要同时考虑 删除、修改和增加，这道题dp考虑的是操作数。  `dp[i][j] 表示以下标i-1为结尾的字符串word1，和以下标j-1为结尾的字符串word2，最近编辑距离为dp[i][j]。`​        其中删除和增加的 动态规划表达式是一样的​        `if (word1[i - 1] != word2[j - 1])`，此时就需要编辑了，如何编辑呢？​        **操作一：word1删除一个元素，那么就是以下标i - 2为结尾的word1 与 j-1为结尾的                   word2的最近编辑距离 再加上一个操作。**​        即 `dp[i][j] = dp[i - 1][j] + 1;`​        **操作二：word2删除一个元素，那么就是以下标i - 1为结尾的word1 与 j-2为结尾的                   word2的最近编辑距离 再加上一个操作。**​         即 `dp[i][j] = dp[i][j - 1] + 1;`​        对于修改​        就是该 word1[i-1] 为 word2[j-1] ，也就是 `dp[i][j] = dp[i-1][j-1] + 1` ​        // 初始化​        `dp[i][0] 和 dp[0][j]`   肯定是分别删除它的全部啦​        #### 回文**这里的题 dp 全部不用 + 1****遍历顺序全部为 i 从下到上  j 从左（i/i+1 开始自己分析情况）到右**- [ ] <font color="red">647.回文子串</font>                               方法：动态规划法 （需要注意遍历顺序）， 另外还有中心扩散法，这个方法比较巧妙并且空间复杂度低- [ ] 5.最长回文子串- [ ] 516.最长回文子序列          方法：动态规划法  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dp[i][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] === s[j]) &#123;</span><br><span class="line">            dp[i][j] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.max(dp[i+<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  **另一种新奇的思路试， 将s.reverse()， s 和 s.reverse() 的最大公共子序列就是最长回文子序列**### 单调栈什么时候用单调栈呢？**通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了**。时间复杂度为O(n)。**单调栈的本质是空间换时间**，因为在遍历的过程中需要用一个栈来记录右边第一个比当前元素高的元素，优点是整个数组只需要遍历一次。**注意点：**<font color="blue">单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。</font><p><strong>单调递增递减怎么看？</strong></p><font color="red">**指的是栈头到栈底应该保持一种单调的状态**</font><ul><li>如果求一个元素右边第一个更大元素，单调栈就是递增的</li><li>如果求一个元素右边第一个更小元素，单调栈就是递减的。</li></ul><p><strong>使用单调栈在 遍历一次数组中  一般来说有3种情况</strong></p><ul><li>当前遍历的元素T[i]小于栈顶元素T[st.top()]的情况</li><li>当前遍历的元素T[i]等于栈顶元素T[st.top()]的情况</li><li>当前遍历的元素T[i]大于栈顶元素T[st.top()]的情况</li></ul><p>难点主要在对三种情况应该具体怎么分析入栈和出栈的</p><ul><li><p>[ ] 739.每日温度                                      方法：求右侧第一个最大的，单调栈从栈顶到栈底，单调递增。</p></li><li><p>[ ] 496.下一个最大的元素Ⅰ（不循环）                   方法： 这道题利用 <code>indexOf</code> 再双循环非常的简单。 使用单调栈的话，其实他非常依赖于 <code>nums2</code> 的长度，因为他把每一个 后面第一个值大于之前某一值的 键值对存入，然后在用数组一的 值作为key去找，其实速度并不快，但是思路也清晰的。（我自己写可能还是不行）</p></li><li><p>[ ] 503.下一个最大的元素Ⅱ（循环）   方法：和上一题一样，就是 nums 需要扩张一倍，然后  index 需要mode一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nextGreaterElements = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numsTemp = [...nums,...nums]</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(-<span class="number">1</span>)</span><br><span class="line">    stack.push(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numsTemp.length; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stack.length &amp;&amp; numsTemp[stack[stack.length - <span class="number">1</span>]] &lt; numsTemp[i])&#123;</span><br><span class="line">            <span class="keyword">let</span> index = stack.pop() % nums.length</span><br><span class="line">            result[index] = numsTemp[i]</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>[ ] <font color="red">47.接雨水</font>                       方法：暴力双指针，带数组双指针（推荐），单调栈（一样是 从小到大的顺序）</p></li></ul><h1 id="额外需要注意的题目"><a href="#额外需要注意的题目" class="headerlink" title="额外需要注意的题目"></a>额外需要注意的题目</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码随想录-（题目-与-类型归纳）&quot;&gt;&lt;a href=&quot;#代码随想录-（题目-与-类型归纳）&quot; class=&quot;headerlink&quot; title=&quot;代码随想录  （题目 与 类型归纳）&quot;&gt;&lt;/a&gt;代码随想录  （题目 与 类型归纳）&lt;/h2&gt;&lt;h3 id=&quot;一些值</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://example.com/2023/03/22/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2023/03/22/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/</id>
    <published>2023-03-22T15:51:03.000Z</published>
    <updated>2023-03-20T10:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端网络相关面试题"><a href="#前端网络相关面试题" class="headerlink" title="前端网络相关面试题"></a>前端网络相关面试题</h3><h3 id="考点1-http-协议"><a href="#考点1-http-协议" class="headerlink" title="考点1:  http 协议"></a>考点1:  http 协议</h3><h4 id="面试题：浏览器Http请求和响应过程"><a href="#面试题：浏览器Http请求和响应过程" class="headerlink" title="面试题：浏览器Http请求和响应过程"></a>面试题：<strong>浏览器Http请求和响应过程</strong></h4><p>浏览器端构建HTTP请求，并发送 -&gt; 服务器端接收到HTTP请求，并进行解析 -&gt; 服务器端发送HTTP响应 -&gt; 浏览器端接收到响应，解析Http响应，而后进行页面渲染。</p><h4 id="面试题：客户端渲染-与-服务器渲染的区别"><a href="#面试题：客户端渲染-与-服务器渲染的区别" class="headerlink" title="面试题：客户端渲染 与 服务器渲染的区别"></a>面试题：客户端渲染 与 服务器渲染的区别</h4><p><strong>客户端渲染</strong></p><p><strong>SPA（单页面）</strong>是客户端渲染的</p><p>用户输入地址，客户端向服务器发送请求</p><p> =&gt; 服务器传给浏览器相应的网页文件 </p><p>  =&gt; 浏览器解析文件 </p><p>  =&gt; 遇到ajax请求则向服务器再次请求一些数据 </p><p>  =&gt; 服务器再次向浏览器发送相应的数据 </p><p>  =&gt; 浏览器拿到ajax请求返回的数据后，将数据渲染在页面上</p><p><strong>优点</strong>：</p><ul><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ul><p><strong>缺点：</strong></p><ul><li>可能需要向服务器请求多次数据</li><li><strong>不利于</strong><font color="red">SEO（搜索引擎优化）</font>，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ul><p><strong>服务器渲染</strong></p><p>客户端向服务器发送一次请求  </p><p>   =&gt; 服务器接收请求，并在服务端操作网页文件，将对应数据导入文件  </p><p>   =&gt; <strong>服务器在服务端渲染好整个网页，发送给客户端</strong>  </p><p>   =&gt; <strong>客户端</strong>接收服务器发送过来的网页文件，<strong>不需要做任何操作，直接呈现</strong></p><p><strong>优点</strong></p><ul><li>只需要向服务器请求一次</li><li><strong>利于</strong><font color="red">SEO 搜索引擎优化</font>，即能被搜索引擎搜索到，能向用户展示你网页的东西</li></ul><p><strong>缺点</strong></p><ul><li>如果数据量过大，在服务器渲染的时间就会过长，造成浏览器暂时的空白</li><li>容易被爬虫爬取</li></ul><p><strong>如何区分客户端渲染和服务器渲染</strong></p><ul><li>若页面做整体的刷新，即网址发生改变，就是服务器渲染</li><li>若页面做了局部刷新，即网址没发生改变，就是客户端渲染</li></ul><h4 id="面试题：常见http-status"><a href="#面试题：常见http-status" class="headerlink" title="面试题：常见http status"></a>面试题：常见http status</h4><p><strong>1XX系列</strong>：<font color="font">指定客户端应相应的某些动作，代表请求已被接受，需要继续处理。</font>由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。</p><p><strong>2XX系列</strong>：<font color="blue"><strong>代表请求已成功被服务器接收、理解、并接受。</strong></font>这系列中最常见的有200、201状态码。</p><p><strong>3XX系列</strong>：<strong>代表需要客户端采取进一步的操作才能完成请求</strong>，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。这系列中最常见的有301、302状态码。</p><p><strong>4XX系列</strong>：<strong>表示请求错误</strong>。代表了客户端看起来可能发生了错误，妨碍了服务器的处理。常见有：401、404状态码。</p><p><strong>5xx系列</strong>：<strong>代表了服务器在处理请求的过程中有错误或者异常状态发生</strong>，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。常见有500、503状态码。</p><p><strong>2开头 （请求成功）表示成功处理了请求的状态代码。</strong></p><ul><li><strong>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</strong></li><li><strong>201 （已创建） 请求成功并且服务器创建了新的资源。</strong></li><li><strong>202 （已接受） 服务器已接受请求，但尚未处理。</strong></li><li>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>206 （部分内容） 服务器成功处理了部分 GET 请求。</li></ul><p><strong>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</strong></p><ul><li>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li><strong>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</strong></li><li><strong>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</strong></li><li>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</li><li>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</li><li>307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul><p><strong>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></p><ul><li>400 （错误请求） 服务器不理解请求的语法。</li><li><strong>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</strong></li><li>403 （禁止） 服务器拒绝请求。</li><li><strong>404 （未找到） 服务器找不到请求的网页。</strong></li><li>405 （方法禁用） 禁用请求中指定的方法。</li><li>406 （不接受） 无法使用请求的内容特性响应请求的网页。</li><li>407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</li><li>408 （请求超时） 服务器等候请求时发生超时。</li><li>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</li><li>410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</li><li>412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415 （不支持的媒体类型） 请求的格式不受请求页面的支持。</li><li>416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</li></ul><p><strong>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</strong></p><ul><li><strong>500 （服务器内部错误） 服务器遇到错误，无法完成请求。</strong></li><li>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</li><li><strong>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</strong></li><li>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul><h4 id="面试题：http-和-https-的区别"><a href="#面试题：http-和-https-的区别" class="headerlink" title="面试题：http 和 https 的区别"></a>面试题：http 和 https 的区别</h4><ul><li><p>HTTP协议传输的数据都是<strong>未加密的</strong>，也就是<strong>明文</strong>的，因此使用HTTP协议传输隐私信息非常不安全</p></li><li><p>HTTPS协议 引入了<strong>数据加密</strong>（对称加密和非对称加密相结合的方式实现）和<strong>身份验证机制</strong>（数字证书来验证服务器身份）。在开始传输数据之前，通过安全可靠的 TLS 协议进行加密，从而保证后续加密传输数据的安全性。</p><blockquote><ol><li>数据加密：HTTPS使用SSL/TLS协议对传输的数据进行加密，从而防止第三方窃听、篡改或伪造数据。<strong>SSL/TLS协议使用对称加密和非对称加密相结合的方式，对传输的数据进行加密和解密</strong>，确保数据的机密性和完整性。</li><li>证书验证：HTTPS使用SSL/TLS协议中的<strong>数字证书来验证服务器的身份，防止中间人攻击和伪造服务器</strong>。数字证书是由可信的第三方机构颁发的，它包含了服务器的公钥和其他相关信息，客户端可以通过验证数字证书来确认服务器的身份和信任服务器。</li><li>安全性强：HTTPS使用SSL/TLS协议对数据进行加密和解密，加密强度高，具有一定的抵抗攻击的能力。同时，HTTPS还可以使用数字证书来验证服务器的身份，可以避免中间人攻击和伪造服务器。</li></ol><p>原来是 SSL，现在 已经被废弃，使用 TLS协议了</p><p><strong>TLS 协议</strong>：<strong>传输层安全性协议</strong>（Transport Layer Security，<strong>TLS</strong>）及其前身<strong>安全套接层</strong>（Secure Sockets Layer，<strong>SSL</strong>）是一种安全协议，目的是为了保证<strong>网络通信安全</strong>和<strong>数据完整性</strong>。</p></blockquote></li></ul><p><strong>HTTPS和HTTP的区别主要如下：</strong></p><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http是超文本传输协议，信息是<strong>明文传输</strong>，https则是具有安全性的 SSL 加密传输协议。</p><p>3、http和https使用的是<strong>完全不同的连接方式</strong>，用的<strong>端口也不一样</strong>，<strong>前者是80，后者是443</strong>。</p><p>4、http的连接很简单，是无状态的；HTTPS协议是由 TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h4 id="面试题：http协议-各版本的区别"><a href="#面试题：http协议-各版本的区别" class="headerlink" title="面试题：http协议 各版本的区别"></a>面试题：http协议 各版本的区别</h4><ul><li><p>HTTP/0.9：功能捡漏，只支持GET方法，只能发送HTML格式字符串。   </p></li><li><p>HTTP/1.0：支持多种数据格式，增加POST、HEAD等方法，增加头信息，每次只能发送一个请求（无持久连接）   </p></li><li><p>HTTP/1.1：默认持久连接、请求管道化、增加缓存处理、增加Host字段、支持断点传输分块传输等。   </p></li><li><p>HTTP/2.0：<strong>二进制分帧、多路复用(解决了HTTP阻塞线头)、头部压缩、服务器推送</strong></p><p>并没有解决<font color="red"> <strong>TCP 队头阻塞的问题</strong></font></p></li></ul><p>​       采用HTTP/2时，浏览器一般会在单个TCP连接中创建并行的几十个乃至上百个传输。如果HTTP/2连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因为TCP是一个按序传输的链条，因此如果其中一个点丢失了，链路上之后的内容就都需要等待。</p><p>http2.0 各个特点展开说就是：</p><ol><li><p><strong>HTTP2使用的是二进制传送，HTTP1.X是文本（字符串）传送。</strong></p><p><strong>二进制传送的单位是帧和流。帧组成了流，同时流还有流ID标示</strong></p></li><li><p><strong>HTTP2支持多路复用</strong></p><p>因为有流ID，所以通过同一个http请求实现多个http请求传输变成了可能，可以通过流ID来标示究竟是哪个流从而定位到是哪个http请求</p></li><li><p><strong>HTTP2头部压缩</strong></p><p>HTTP2通过gzip和compress压缩头部然后再发送，同时客户端和服务器端同时维护一张头信息表，所有字段都记录在这张表中，这样后面每次传输只需要传输表里面的索引Id就行，通过索引ID查询表头的值</p></li><li><p><strong>HTTP2支持服务器推送</strong></p><p>HTTP2支持在未经客户端许可的情况下，主动向客户端推送内容</p></li></ol><h4 id="面试题：http-的请求方式-有哪几种"><a href="#面试题：http-的请求方式-有哪几种" class="headerlink" title="面试题：http 的请求方式 有哪几种"></a>面试题：http 的请求方式 有哪几种</h4><ul><li><p>OPTIONS</p><p>查询服务器支持的请求方式，OPTIONS请求用于查询服务器支持的请求方式，客户端可以用这个方法来测试服务器的功能性。</p><font color="blue">具体的说：客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法</font></li><li><p>HEAD</p><p>与GET请求类似，但是不返回响应体，只返回响应头。</p></li><li><p>GET</p><p>从服务器获取资源，GET请求是最常用的请求方式，用于请求服务器上的数据。</p><p>注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url</p></li><li><p>POST</p><p>向服务器提交数据，用于向服务器发送数据，例如表单数据等。）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form</p></li><li><p>PUT</p><p>更新服务器上的资源，PUT请求用于更新服务器上的指定资源，客户端需要提供完整的资源数据。</p></li><li><p>DELETE</p><p>删除服务器上的资源，DELETE请求用于删除服务器上的指定资源。</p></li><li><p>TRACE</p><p>追踪请求-响应的传输路径，TRACE请求用于追踪请求-响应的传输路径，客户端可以用这个方法来诊断网络连接问题。</p></li><li><p>CONNECT </p><p>这个比较特殊。它不是通过传输数据来操作服务器资源，而是建立一个管道，从而支持客户端和服务器之间的数据传输。因为 CONNECT 请求方法的作用比较特殊，所以一般不在普通的 Web 应用程序中使用。</p></li></ul><h4 id="面试题：GET和POST区别"><a href="#面试题：GET和POST区别" class="headerlink" title="面试题：GET和POST区别"></a>面试题：GET和POST区别</h4><ol><li>get用来获取数据，post用来提交数据</li><li><font color="red">**get参数有长度限制（受限于url长度，具体的数值取决于浏览器和服务器的限制，最长2048字节），而post无限制**</font></li><li><font color="blue">**get请求的数据会附加在url之 ，以 " ？ "分割url和传输数据，多个参数用 "&"连接，而post请求会把请求的数据放在http请求体中。**</font></li><li>get是明文传输，post是放在请求体中，但是开发者可以通过抓包工具看到，也相当于是明文的。</li><li><strong>get请求会保存在浏览器历史记录中，还可能保存在web服务器的日志中</strong></li></ol><h3 id="考点2：-TCP-协议-与-UDP-协议"><a href="#考点2：-TCP-协议-与-UDP-协议" class="headerlink" title="考点2： TCP 协议 与 UDP 协议"></a>考点2： TCP 协议 与 UDP 协议</h3><h4 id="面试题：TCP的三次握手建立连接的过程"><a href="#面试题：TCP的三次握手建立连接的过程" class="headerlink" title="面试题：TCP的三次握手建立连接的过程"></a>面试题：TCP的三次握手建立连接的过程</h4><p>TCP三次握手的过程如下：</p><ol><li>第一次握手（SYN）：客户端向服务器发送一个SYN（Synchronize Sequence Number）报文段，表示客户端请求建立连接。SYN报文段包含一个随机的初始序列号（ISN）。</li><li>第二次握手（SYN+ACK）：服务器收到客户端的SYN报文段之后，会向客户端发送一个SYN+ACK报文段，表示服务器已经收到了客户端的请求，并且同意建立连接。SYN+ACK报文段包含服务器的初始序列号（ISN）和确认号（ACK）。</li><li>第三次握手（ACK）：客户端收到服务器的SYN+ACK报文段之后，会向服务器发送一个ACK（Acknowledgment）报文段，表示客户端已经收到了服务器的响应，并且同意建立连接。<strong>ACK报文段包含确认号（ACK），确认号的值为服务器的初始序列号（ISN）+1</strong>。</li></ol><p><img src="https://uploadfiles.nowcoder.com/images/20230131/473144517_1675143912477/F19F744F8530FAD5C8EAA62339751D08" alt="img"></p><p>完成三次握手后，TCP连接就建立起来了，客户端和服务器可以开始进行数据传输。三次握手的过程中，主要是为了确保客户端和服务器都知道对方的存在，并且建立一个可靠的连接，以保证数据传输的安全性和可靠性<strong>。如果有任何一次握手失败，连接就会建立失败，需要重新发起三次握手建立连接。</strong></p><h4 id="面试题：TCP的四次握手释放连接的过程"><a href="#面试题：TCP的四次握手释放连接的过程" class="headerlink" title="面试题：TCP的四次握手释放连接的过程"></a>面试题：TCP的四次握手释放连接的过程</h4><font color="red">**注意 客户端和服务端 都可以提出释放连接的请求**</font>。**因为 TCP是一种全双工（full-duplex）协议**1. **发起关闭连接的一方（称为主动关闭方，Active Close）**发送一个**FIN报文段**（也就是连接释放报文段），表示停止发送数据，并请求关闭连接。主动关闭方进入FIN_WAIT_1状态，等待另一方的确认。2. **接收到关闭请求的另一方（称为被动关闭方，Passive Close）**收到**FIN报文段**后，它会**发送一个ACK报文段**作为确认，并进入CLOSE_WAIT状态，等待关闭请求的另一方关闭连接。3. **被动关闭方在发送完所有数据之后，也发送一个FIN报文段**，表示它已经没有数据要发送了，并请求关闭连接。被动关闭方进入LAST_ACK状态。4. **主动关闭方收到被动关闭方的FIN报文段后，发送一个ACK报文段作为确认**，并进入TIME_WAIT状态。**在这个状态下，主动关闭方等待2倍的最长报文段寿命（Maximum Segment Lifetime, MSL）后，连接彻底关闭。**![img](https://uploadfiles.nowcoder.com/images/20230131/473144517_1675142925083/D2B5CA33BD970F64A6301FA75AE2EB22)#### 面试题：TCP vs UDP的区别- TCP是一种**面向连接的**、可靠的、基于字节流的传输层通信协议，是专门为了**在不可靠的网络中提供一个可靠的端对端字节流而设计的，面向字节流。**- UDP（用户数据报协议）是iso参考模型中一种**无连接的传输层协议**，提供**简单不可靠的非连接传输层服务**，**面向报文****区别：**1. TCP是面向连接的，可靠性高；UDP是基于非连接的，可靠性低2. 由于TCP是连接的通信，需要有三次握手、重新确认等连接过程，会有延时，实时性差，同时过程复杂，也使其易于攻击；UDP没有建立连接的过程，因而实时性较强，也稍安全3. 在传输相同大小的数据时，   TCP首部开销20字节；实际数据最多为 60字节   UDP首部开销8字节，**TCP报头比UDP复杂，故实际包含的用户数据较少**。TCP在IP协议的基础上添加了序号机制、确认机制、超时重传机制等，保证了传输的可靠性，不会出现丢包或乱序，而UDP有丢包，故**TCP开销大，UDP开销较小**4. 每条TCP连接只能时点到点的；   UDP支持一对一、一对多、多对一、多对多的交互通信，即可多播**应用场景选择**- 对实时性要求高和高速传输的场合下使用UDP;在可靠性要求低，追求效率的情况下使用UDP;- 需要传输大量数据且对可靠性要求高的情况下使用TCP#### 面试题：七层模型和五层模型 及其对应协议![](https://gitee.com/kaikai-superman/imgs/raw/master/img/QQ截图20230117200355.png)- DNS (Domain Name Service 域名服务) 协议基于 UDP协议- FTP (File Transfer Protocol 文件传输协议) 基于 TCP协议- DNS和FTP都是应用层协议**1.应用层**作用：它是与其他计算机进行通信的应用，它是对应应用程序的通信服务的。各种应用软件，包括web应用。协议：DNS、FTP、HTTP、SMTP、TELNET、IRC、WHOIS**2.表示层**作用：这一层的主要作用是定义数据格式和加密。**3.会话层**作用：控制应用程序的会话能力，它定义了一段会话的开始、控制和结束，包括对多个双向消息的控制和管理，以便在只完成一部分消息时可以通知应用。协议：HTTP（Hyper text Transfer Protocol）协议：超文本传输协议使用TCP的80端口FTP（File Transfer Protocol）文本传输协议SMTP（Simple Mail Transfer Protocol）简单邮件传输协议，TCP是我25端口用户发邮件。POP3（Post Office Protocol version3）邮局协议版本3，TCP的110号端口，用于收邮件的。DNS（Domain Name System）域名解析协议。使用TCP和UDP的53号端口，作用是把www的域名解析成IP地址。**4.传输层**作用：对差错恢复协议和无差错恢复协议的选择，对同一主机上不同数据流的输入进行复用，对数据包进行重新排序。是最关键的一层，是唯一负责整体的数据传输和数据控制的。对上三层提供可靠的传输服务，对网络层提供可靠的目的地信息。在这一层数据的单位被称为数据段。协议：TCP、UDP等**5.网络层**作用：主要负责寻找地址和路由选择，网络层还可以实现阻塞控制、网际互联等。协议：IP、IPX、RIP、OSPF等**6.数据链路层**作用：负责物理层面上的互联的、节点间的通信传输；该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。在这一层，数据的单位称为帧（frame）协议：ARP、RARP、SDLC、HDLC、PPP、STP、帧中继等**7.物理层**作用：负责0、1 比特流（0/1序列）与电压的高低、逛的闪灭之间的转换 规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体。在这一层，数据的单位称为比特（bit）。典型规范：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45、fddi令牌环网等#### 面试题：DNS解析的过程DNS是应用层协议，事实上他是为其他应用层协议工作的，包括不限于HTTP和SMTP以及FTP，用于将用户提供的主机名解析为ip地址。具体过程如下：1. 客户机提出域名解析请求 , 并将该请求发送给本地的域名服务器 ;2. 当本地的域名服务器收到请求后 , 就先查询本地的缓存 , 如果有该纪录项 , 则本地的域名服务器就直接把查询的结果返回 ;3. 如果本地的缓存中没有该纪录 , 则本地域名服务器就直接把请求发给根域名服务器 , 然后根域名服务器再返回给本地域名服务器一个所查询域 (根的子域) 的主域名服务器的地址 ;4. 本地服务器再向上一步返回的域名服务器发送请求 , 然后接受请求的服务器查询自己的缓存 , 如果没有该纪录 , 则返回相关的下级的域名服务器的地址 ;5. 重复第四步 , 直到找到正确的纪录 ;6. 本地域名服务器把返回的结果保存到缓存 , 以备下一次使用 , 同时还将结果返回给客户机 ;### 考点3： URL#### 面试题：URL 路径包含什么, URI 是什么**URL 路径包含什么**通常情况下，一个URL的格式是：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure>protocol 协议 hostname主机名 port端口号 path路径 parameters 参数 query查询 协议：//主机：端口/路径名称?搜索条件#哈希标识**URI 是什么****URI**是一个用于标识互联网资源名称的字符串。 该种标识允许用户对网络中（一般指[万维网](https://link.jianshu.com/?t=https://zh.wikipedia.org/wiki/万维网)）的资源通过特定的协议进行交互操作。URI的最常见的形式是统一资源定位符（URL），经常指定为非正式的网址。更罕见的用法是统一资源名称（URN），其目的是通过提供一种途径。用于在特定的命名空间资源的标识，以补充网址。#### 面试题：浏览器地址栏输入 URL 敲下回车后发生了什么？##### Step 1：浏览器解析URL一个`url`的结构解析如下：![](https://gitee.com/kaikai-superman/imgs/raw/master/img/url解析.png)##### **Step 2： DNS查询**浏览器检查本地缓存，如果有的话，直接使用缓存中的副本。没有就要进行 DNS查询的内容，这个部分看上面的 DNS解析过程。<font color="red">**此步骤目的是为了，获取到了域名对应的目标服务器`IP`地址**</font><h5 id="Step-3：建立-TCP-连接"><a href="#Step-3：建立-TCP-连接" class="headerlink" title="Step 3：建立 TCP 连接"></a>Step 3：建立 TCP 连接</h5><p>在确定目标服务器服务器的<code>IP</code>地址后，则经历三次握手建立<code>TCP</code>连接。具体三次连接的步骤看上面。</p><h5 id="Step-4：客户端（浏览器）发送-HTTP-请求"><a href="#Step-4：客户端（浏览器）发送-HTTP-请求" class="headerlink" title="Step 4：客户端（浏览器）发送 HTTP 请求"></a>Step 4：客户端（浏览器）发送 HTTP 请求</h5><p>当建立<code>tcp</code>连接之后，就可以在这基础上进行通信，浏览器发送 <code>http</code> 请求到目标服务器</p><p>请求的内容包括：</p><ul><li>请求行：包含请求方法、URL、HTTP版本信息</li><li>请求头</li><li>请求主体（请求数据）</li></ul><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/111http请求2.png" alt=""></p><p><img src="C:\Users\96356\Desktop\前端学习\前端面试题\上传图片\111http请求2.png" alt="111http请求2" style="zoom:50%;" /></p><h5 id="Step-5：服务器响应请求"><a href="#Step-5：服务器响应请求" class="headerlink" title="Step 5：服务器响应请求"></a>Step 5：服务器响应请求</h5><p>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个<code>HTTP</code>响应消息，包括：</p><ul><li>状态行：包含HTTP版本、状态码、状态码的原因短语</li><li>响应头</li><li>响应正文</li></ul><p>​    <img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/响应请求.png" style="zoom: 50%;" /></p><p>在服务器响应之后，由于现在<code>http</code>默认开始长连接<code>keep-alive</code>，当页面关闭之后，<code>tcp</code>链接则会经过四次挥手完成断开</p><h5 id="Step-6-页面渲染"><a href="#Step-6-页面渲染" class="headerlink" title="Step 6 : 页面渲染"></a>Step 6 : 页面渲染</h5><p><strong>当浏览器接收到服务器响应的资源后，首先会对资源进行解析</strong>：</p><ul><li>查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等</li><li>查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式</li></ul><p>关于页面的渲染过程如下：</p><ul><li>解析 HTML 和 CSS：浏览器首先将 HTML 和 CSS 解析成 DOM（文档对象模型）和 CSSOM（CSS 对象模型）两个树形结构，这两个结构合并后便构成了渲染树（Render Tree）。</li><li>布局：浏览器根据渲染树中每个元素的位置和大小计算出它们在屏幕上的实际位置，这个过程叫做布局（Layout），也称为回流（Reflow）。</li><li>绘制：浏览器根据渲染树和布局计算出来的元素位置和大小，将它们绘制到屏幕上，这个过程叫做绘制（Paint）。</li><li>合成：浏览器将绘制好的层按照它们的层级关系合成成最终的图像，并显示在屏幕上。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前端网络相关面试题&quot;&gt;&lt;a href=&quot;#前端网络相关面试题&quot; class=&quot;headerlink&quot; title=&quot;前端网络相关面试题&quot;&gt;&lt;/a&gt;前端网络相关面试题&lt;/h3&gt;&lt;h3 id=&quot;考点1-http-协议&quot;&gt;&lt;a href=&quot;#考点1-http-协议&quot; c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端性能" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>VuePurchase易购平台项目笔记</title>
    <link href="http://example.com/2023/03/20/VuePurchase%E6%98%93%E8%B4%AD%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/03/20/VuePurchase%E6%98%93%E8%B4%AD%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-20T15:55:01.000Z</published>
    <updated>2023-03-20T10:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VuePurchase易购平台项目笔记"><a href="#VuePurchase易购平台项目笔记" class="headerlink" title="VuePurchase易购平台项目笔记"></a>VuePurchase易购平台项目笔记</h1><h2 id="安装前端包与配置环境"><a href="#安装前端包与配置环境" class="headerlink" title="安装前端包与配置环境"></a>安装前端包与配置环境</h2><p><strong>Step1：首先在当前地址中，创建我们的 项目文件  vue-purchase</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-purchase</span><br></pre></td></tr></table></figure><p>默认选择  Default  Vue2.0 的版本。  <strong>我当前脚手架的版本是  5.0.8。</strong></p><p><strong>Step2：进入该项目文件   <code>cd vue-purchase</code></strong></p><p>并配置我们需要依赖的库  例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 前端安装依赖</span><br><span class="line">npm i axios -S</span><br><span class="line">npm i querystring -S</span><br><span class="line">npm i echarts -S</span><br><span class="line">// 路由</span><br><span class="line">npm i vue-router@3</span><br><span class="line">// 配置后端服务 </span><br><span class="line">// 技术：node.js + mysql + mock.js</span><br><span class="line">npm i express -S</span><br><span class="line">npm i cors -S</span><br><span class="line">npm i mockjs -S</span><br><span class="line">npm i mysql -S</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 可以在事先就引入 Element UI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add element</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/引入Element.png" alt=""></p><font color="red">选择部分导入  import on demand</font>  再选择  **zh-CN**出现  `Successfully invoked generator for plugin: vue-cli-plugin-element` 表示成功**Step3：`vue-purchase ` 项目中专门配置一个 server 文件夹用于配置服务器相关代码** **Step4：启动前端项目**<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>**Step5：删除初试项目中没用部分**例如 App.vue 全部初始为啥也没有，组件里原本的东西都不要。**Step6：添加所需部分****assets**  静态资源然后 assets 文件夹内，创建 css  和 images 文件夹，方便以后使用。并再 css 文件中引入`reset.css` 、`iconfont.css`-  `reset.css`，其是重置浏览器标签的样式表，百度可以直接搜到里面的内容。- `iconfont.css` ，其是作者自己创建的一个图标库内容  其css的内容为 引入外部css文件。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://at.alicdn.com/t/font_2448847_ogyed8on8j.css&quot;</span>);</span><br></pre></td></tr></table></figure>然后这两个库需要再 main.js 入口文件中进行 注册：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css 初始化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/css/reset.css&quot;</span></span><br><span class="line"><span class="comment">// iconfont</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/css/iconfont.css&quot;</span></span><br></pre></td></tr></table></figure>**plugins**  Element UI另外就是 需要补全 `plugins` 文件夹中  element.js 文件引入的内容。其实可以需要用到然后再引入，但是为了方便嘛这里全部引入算了。引入的内容需要取 Element2.0的官网，快速入手中找到`完整组件列表和引入方式（完整组件列表以 [components.json](https://github.com/ElemeFE/element/blob/master/components.json) 为准）`将其后面代码中所有的内容 都放到 element.js 中就进行替换即可。**request**   axios封装另外就是要创建 request 文件夹，里面 request.js 。里面实现 axios 的二次封装。**views**  布局文件再创建一个 views文件夹，内部创建两个布局（因为我有一个登录界面 和 一个后端页面）所以呈现的结构为：![](https://gitee.com/kaikai-superman/imgs/raw/master/img/views.png)**router 路由**  <font color="blue">另外就是 router，store 文件夹需要自己初始化配置好。</font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/views/Layout&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;@/views/Login&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&quot;history&quot;</span>,</span><br><span class="line"><span class="attr">base</span>:process.env.BASE_URL,</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置数据库用于后端服务"><a href="#配置数据库用于后端服务" class="headerlink" title="配置数据库用于后端服务"></a>配置数据库用于后端服务</h2><p>首先你需要有一个 Apache  + mysql  我这里使用的是  phpStudy， 作者用的那个 服务在我这开不起来。</p><blockquote><p>APACHE就是一个网络服务器，这个服务器侦听一个TCP端口，一般是80，对端口收到的命令进行解释，然后提交一些结果。APACHE解释的最主要的命令就是GET和POST，一般对应客户端在浏览器输入地址、浏览器里面点击链接和提交一个表单。</p><p>APACHE对GET和POST命令进行解释的时候，如果GET和POST的对象是一个HTML、CSS、JS、RAR、TXT等一般文件，就直接把文件的内容发回客户端；</p></blockquote><p><a href="https://blog.csdn.net/Quantum_Dog/article/details/109270685">https://blog.csdn.net/Quantum_Dog/article/details/109270685</a></p><p><strong>Step1：先开启 Apache 和 mysql</strong></p><p>Apache 映射的端口为 80</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/phpStudy.png" style="zoom: 50%;" /></p><p><strong>Step2：需要下载 phpMyAdmin</strong></p><p>需要打开软件管理，下载 phpMyAdmin</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/下载phpMyAdmin.png" alt=""></p><p>然后点击第一张图的数据库工具，打开按钮进入 phpMyAdmin</p><p>默认账号和密码 都是 root</p><p><strong>Step3：创建ego数据库 并载入数据表</strong></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/创建ego数据库.png" alt=""></p><p>并载入数据表</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/载入ego数据表.png" alt=""></p><h2 id="使用-Element-UI-实现侧边栏页面"><a href="#使用-Element-UI-实现侧边栏页面" class="headerlink" title="使用 Element UI 实现侧边栏页面"></a>使用 Element UI 实现侧边栏页面</h2><p>侧边栏去  ElementUI中进行复制，保留自己想要的部分。</p><p>主要功能是要实现配置侧边导航栏的路由跳转，需要和 Element UI 进行级联</p><p>配置 router 文件夹 中的 index.js 如下</p><p>需要注意的点为 </p><ul><li>/ 为一级路由， 后面 home页面路由、 产品管理路由、订单管理路由、广告分类路由均为同级别的二级路由，其各自里面的组件配置为三级路由</li></ul><p>以 产品管理路由为例子</p><ul><li><p>GoodsManage 作为路由的出口 用于显示三级路由的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 路由出口 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>其里面包含两个三级路由 GoodsCategory 和 GoodsList</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;../views/Layout/layout.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../views/Login/login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home/home.vue&#x27;</span></span><br><span class="line"><span class="comment">// 产品管理</span></span><br><span class="line"><span class="keyword">import</span> GoodsManage <span class="keyword">from</span> <span class="string">&quot;../views/GoodsManage/goodsManage.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> GoodsCategory <span class="keyword">from</span> <span class="string">&quot;../views/GoodsManage/GoodsCategory/goodsCategory.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> GoodsList <span class="keyword">from</span> <span class="string">&quot;../views/GoodsManage/GoodsList/goodsList.vue&quot;</span></span><br><span class="line"><span class="comment">// 订单管理</span></span><br><span class="line"><span class="keyword">import</span> OrderManage <span class="keyword">from</span> <span class="string">&quot;../views/OrderManage/orderManage.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> OrderCollect <span class="keyword">from</span> <span class="string">&quot;../views/OrderManage/OrderCollect/orderCollect.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> OrderList <span class="keyword">from</span> <span class="string">&quot;../views/OrderManage/OrderList/orderList.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> OrderAudit <span class="keyword">from</span> <span class="string">&quot;../views/OrderManage/OrderAudit/orderAudit.vue&quot;</span></span><br><span class="line"><span class="comment">// 广告分类</span></span><br><span class="line"><span class="keyword">import</span> AdvertiseCategory <span class="keyword">from</span> <span class="string">&quot;../views/AdvertiseCategory/advertiseCategory.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> AdvertiseList <span class="keyword">from</span> <span class="string">&quot;../views/AdvertiseCategory/AdvertiseList/advertiseList.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> AdvertiseMagage <span class="keyword">from</span> <span class="string">&quot;../views/AdvertiseCategory/AdvertiseMagage/advertiseMagage.vue&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Layout,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line"><span class="comment">// 配置 home页面路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:Home</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置 产品管理路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;goodsManage&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;goodsManage&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:GoodsManage,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;goodsCategory&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;goodsCategory&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:GoodsCategory</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;goodsList&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;goodsList&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:GoodsList</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置 订单管理路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;orderManage&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;orderManage&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:OrderManage,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;orderCollect&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;orderCollect&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:OrderCollect</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;orderList&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;orderList&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:OrderList</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;orderAudit&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;orderAudit&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:OrderAudit</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置 广告分类路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;advertiseCategory&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;advertiseCategory&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:AdvertiseCategory,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;advertiseList&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;advertiseList&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:AdvertiseList</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;advertiseMagage&quot;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&quot;advertiseMagage&quot;</span>,</span><br><span class="line"><span class="attr">component</span>:AdvertiseMagage</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Login</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Element UI 中进行路由联动的属性为 <code>router</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*default-active 用于根据路由 选择高亮哪一个*/        </span><br><span class="line">&lt;el-menu default-active=&quot;$route.path&quot; router class=&quot;el-menu-vertical-demo&quot; :collapse=&quot;isCollapse&quot;   </span><br><span class="line">        background-color= &quot;#252236&quot;</span><br><span class="line">        text-color=&quot;#fff&quot;</span><br><span class="line">        active-text-color=&quot;#ffd04b&quot; &gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/router.png" alt=""></p><p>所以我们需要修改后面的 index 索引来配置路由，其实挺简单的</p><p>如下所示为 menu组件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 点击跳转的路由 产品管理为 home  二级路由--&gt;</span><br><span class="line">&lt;el-submenu index=&quot;/goodsManage&quot;&gt;</span><br><span class="line">    &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-location&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;产品管理&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 点击跳转的路由   三级路由--&gt;</span><br><span class="line">    &lt;el-menu-item-group&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/goodsManage/goodsList&quot;&gt;产品列表&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/goodsManage/goodsCategory&quot;&gt;产品分类&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-menu-item-group&gt;</span><br><span class="line">&lt;/el-submenu&gt;</span><br></pre></td></tr></table></figure><h2 id="实现上方菜单导航折叠"><a href="#实现上方菜单导航折叠" class="headerlink" title="实现上方菜单导航折叠"></a>实现上方菜单导航折叠</h2><ul><li><p>首先修改 content.vue 中的 顶部区域 header 添加标签效果，并配置样式</p></li><li><p>另外左侧 Menu.vue 你会发现有空隙，你查看css样式，发现导航栏被渲染为li了，里面有个 border。你需要修改：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu</span>&#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>而后导航的折叠，其实是由 Element UI 中的一个属性 collapse   所决定的</p><p><code>collapse   是否水平折叠收起菜单（仅在 mode 为 vertical 时可用）  boolean —  false</code></p><p>所以我们动态的 修改collapse 就可以实现这个效果。</p><p>不过这涉及到 子组件中的通信</p><ul><li><p>iscollapse 属性写在父组件 layout.vue中，传递给 menu组件。 menu组件可 v-model动态判断</p></li><li><p>在content组件标签上，父组件需要挂载一个 <strong>自定义事件</strong> , 这里让这个事件去修改 iscollapse 的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Content @OperateCollapse=&quot;OperateCollapse()&quot; &gt;&lt;/Content&gt;</span><br></pre></td></tr></table></figure></li><li><p>在content组件中 触发函数中去调用他，这里不用传递参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">changeMenu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;OperateCollapse&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>另外要实现点击改变 样式的效果 这里使用了一个 动态 class  <code>:class=&quot;&#123;active:isCollapse&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot; :class=&quot;&#123;active:isCollapse&#125;&quot;&gt;</span><br><span class="line">   &lt;Content @OperateCollapse=&quot;OperateCollapse()&quot;  :isCollapse=&quot;isCollapse&quot; &gt;</span><br><span class="line">   &lt;/Content&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* transition: all 1s; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*被触发的时候 改变 padding-left*/</span></span><br><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">64px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现上方右侧的-当前时间"><a href="#实现上方右侧的-当前时间" class="headerlink" title="实现上方右侧的 当前时间"></a>实现上方右侧的 当前时间</h3><p>需要用到  day.js 库  官网： <a href="https://dayjs.fenxianglu.cn/">https://dayjs.fenxianglu.cn/</a></p><p>具体安装看 我的安装笔记，用法也同安装里写的一样。</p><p>如下 获取我们想要的时间，不过这还是静态数据，插值语法引入界面，是不会动的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.nowTime = dayjs(<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="实现后端部署"><a href="#实现后端部署" class="headerlink" title="实现后端部署"></a>实现后端部署</h3><p>涉及到 express </p><p>首先要先配置  index.js 其涉及到 express 创建本地服务器 </p><p>server 文件夹里面的所有东西 <strong>这里我直接全复制过来了，不懂这个的编写</strong>  ，需要先把没讲到的注释掉，这个看 nodemon 报错就好了，注掉需要下载的东西和对应的路由。</p><p>vscode 控制台路径 到 server文件夹 </p><p>需要下载 库 <code>nodemon</code>  进行全局配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemon -g</span><br></pre></td></tr></table></figure><p>然后在命令行中输入  <code>nodemon</code> ，就会打开 定义的 9898端口</p><p>使用 <code>http://localhost:9898/home/dataCount</code>  做个测试，出来就 ok</p><h2 id="实现主页首页"><a href="#实现主页首页" class="headerlink" title="实现主页首页"></a>实现主页首页</h2><h3 id="实现顶部数据统计信息"><a href="#实现顶部数据统计信息" class="headerlink" title="实现顶部数据统计信息"></a>实现顶部数据统计信息</h3><p>首先需要在 src 中 创建一个  api 文件， 并在其中创建文件 base.js  和  index.js</p><ul><li>base.js 映射了之前 在 server 中配置的 接口路由</li><li>index.js 根据base.js 提供的接口路由地址，使用 axios get 获取数据，并封装到对应的方法中，用于调用</li></ul><p>而后 我们需要在 入口文件 main.js 中引入 index.js 中的 api，自己写项目的话需要自己写哦。</p><p>在 home 组件中我们需要请求数据 配置 axios 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;HomeVue&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">objCount</span>:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 防止数据还没有请求过来 显示为空的情况</span></span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">num</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!val) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> val.toLocaleString();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//-获取顶部统计数据信息</span></span><br><span class="line">        <span class="built_in">this</span>.getHomeCount();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//-获取顶部统计数据信息----------------------------------------</span></span><br><span class="line">      <span class="keyword">async</span> <span class="function"><span class="title">getHomeCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.getHomeCount()</span><br><span class="line">        <span class="built_in">console</span>.log(res.data.data.list);</span><br><span class="line">        <span class="built_in">this</span>.objCount = res.data.data.list;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后 上面使用 对objCount 使用插值语法就可以了。</p><p>作者这里 Mock.js 产生的数据格式有点问题，一个list就包含这8个值了。</p><p> 另外他还配置了一个 过滤器 filter，所以其插值语法，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&#x27;num&#x27;&gt;&#123;&#123;objCount.saleTotal  | num&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="用-echarts-画图"><a href="#用-echarts-画图" class="headerlink" title="用 echarts 画图"></a>用 echarts 画图</h3><p>将原项目中 plugins 里的 echarts 整个包 复制到 我这里的 plugin中</p><p>在 入口文件 main.js 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"><span class="comment">// 身上就会挂载一个  $myEcharts</span></span><br><span class="line">Vue.use(echarts)</span><br></pre></td></tr></table></figure><p>去 echarts 官网中 查看完整代码</p><p>在 Home.vue中 引入 echarts 整个引入就好了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后折线图绘制的代码，写在methods里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制折线图</span></span><br><span class="line"><span class="function"><span class="title">drawline</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 需要绘制的区域</span></span><br><span class="line">  <span class="keyword">var</span> chartDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(chartDom);</span><br><span class="line">  <span class="keyword">var</span> option;</span><br><span class="line"></span><br><span class="line">  option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  option &amp;&amp; myChart.setOption(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理画饼图也是一样的操作。</p><p>获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制 Mock.js 模拟数据 的折线图</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getHomeFormat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.getHomeFormat()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-获取绘制折线图--------&#x27;</span>, res.data.result.data.sale_money);</span><br><span class="line">    <span class="keyword">let</span> arr = res.data.result.data.sale_money;</span><br><span class="line">    <span class="comment">//声明变量存储x轴 y轴数据</span></span><br><span class="line">    <span class="keyword">let</span> xData = [], yData = [], yBarData = [], pieData = [];</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">        xData.push(ele.name)</span><br><span class="line">        yData.push(ele.total_amount)</span><br><span class="line">        yBarData.push(ele.num)</span><br><span class="line">        <span class="comment">//获取对象结构存储饼图数据-----</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">        obj.name = ele.name;</span><br><span class="line">        obj.value = ele.total_amount;</span><br><span class="line">        pieData.push(obj)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绘制折线图---动态数据---------------</span></span><br><span class="line">    <span class="built_in">this</span>.drawline(xData, yData, yBarData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制饼图--动态数据-------[&#123;name:&#x27;&#x27;,value:&#x27;&#x27;&#125;,&#123;&#125;]----</span></span><br><span class="line">    <span class="built_in">this</span>.drawPie(pieData)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>看着将数据填充入 echarts中，并修改一些属性就可以了。</p><p>然后再 mounted 生命周期函数中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//-获取顶部统计数据信息</span></span><br><span class="line">    <span class="built_in">this</span>.getHomeCount()</span><br><span class="line">    <span class="comment">// 获取数据并 绘制折线图和饼图</span></span><br><span class="line">    <span class="built_in">this</span>.getHomeFormat()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="实现下方的订单"><a href="#实现下方的订单" class="headerlink" title="实现下方的订单"></a>实现下方的订单</h3><p>这个通过接口获取数据 添加到data中  很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取订单数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getHomeOrder</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.getHomeOrder()</span><br><span class="line">    <span class="built_in">this</span>.Orderlist = res.data.list</span><br></pre></td></tr></table></figure><p>然后插值语法显示即可</p><h3 id="实现产品管理"><a href="#实现产品管理" class="headerlink" title="实现产品管理"></a>实现产品管理</h3><h4 id="实现产品分类页面"><a href="#实现产品分类页面" class="headerlink" title="实现产品分类页面"></a>实现产品分类页面</h4><p>这个页面没啥好说的 就是引 elementUI，然后显示和查询特定都是有接口的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.getGoodsList(<span class="number">1</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 根据产品名称 查询数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getGoodsList</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.getGoodsList(&#123;page&#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">        <span class="keyword">if</span>(res.data.status === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableData = res.data.data</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;请求产品数据失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这个表单中 <strong>prop 指的是 tableData中直接的键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;list-table&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">    :data=&quot;tableData&quot;</span><br><span class="line">    border</span><br><span class="line">    style=&quot;width: 100%&quot;&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      type=&quot;selection&quot;</span><br><span class="line">      width=&quot;55&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;id&quot; label=&quot;商品ID&quot; width=&quot;100&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;title&quot; label=&quot;商品名称&quot; width=&quot;180&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;price&quot; label=&quot;商品价格&quot; width=&quot;100&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;num&quot; label=&quot;商品数量&quot; width=&quot;180&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;category&quot; label=&quot;商品类目&quot; width=&quot;100&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;image&quot; label=&quot;商品图片&quot; width=&quot;180&quot; &gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;sellPoint&quot; label=&quot;商品卖点&quot; width=&quot;180&quot;  show-overflow-tooltip&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;descs&quot; label=&quot;商品描述&quot; width=&quot;180&quot; show-overflow-tooltip&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">      &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">        &lt;el-button</span><br><span class="line">          size=&quot;mini&quot;</span><br><span class="line">          type=&quot;primary&quot;</span><br><span class="line">          icon=&quot;el-icon-edit&quot;</span><br><span class="line">          @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button</span><br><span class="line">          size=&quot;mini&quot;</span><br><span class="line">          type=&quot;danger&quot;</span><br><span class="line">          icon=&quot;el-icon-delete&quot;</span><br><span class="line">          @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">  &lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="实现公共分页器"><a href="#实现公共分页器" class="headerlink" title="实现公共分页器"></a>实现公共分页器</h4><p>另外比较特殊的就是实现分页器，因为后面每个页面都需要用到。</p><p>所以分页器是一个  components。</p><p>再 components 文件夹中创建 Pagination 文件夹，里面创建一个 pagination.vue</p><p>这个分页器同样是由 element UI 来做</p><p>主要有两个功能</p><ol><li><p>我请求的数据分页每个多少个啊 总共多少啊  goodList.vue 需要传递给 pagination.vue 当然采用的是 props 因为是父传子</p></li><li><p>然后子这边页面发生变化 ，elementUi提供的方法为 <code>@current-change=&quot;getPagination&quot;</code>，绑定我们的自定义事件<code>getPagination</code>，这个事件应该把 再子组件中的数据传给父组件。可以使用自定义事件，再getPagination方法中我们触发自定义事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// current 为当前页</span></span><br><span class="line"><span class="function"><span class="title">getPagination</span>(<span class="params">current</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;getPagination&#x27;</span>,current)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那对应的 父组件中 注册子组件的标签上 应该配有自定义事件 <code>getPagination</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 部分三 ：分页器组件部分 --&gt;</span><br><span class="line">&lt;pagination :totalPage=&quot;totalPage&quot; :pageSize=&quot;pageSize&quot; @getPagination=&quot;getPagination&quot;&gt;&lt;/pagination&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取点击页码：</span></span><br><span class="line"><span class="function"><span class="title">getPagination</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//默认产品列表的分页功能</span></span><br><span class="line">    <span class="built_in">this</span>.getGoodsList(page)</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 根据页面 查询数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getGoodsList</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.getGoodsList(&#123;page&#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;表单数据 res.data&quot;</span>, res.data)</span><br><span class="line">        <span class="keyword">if</span>(res.data.status === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableData = res.data.data</span><br><span class="line">            <span class="built_in">this</span>.totalPage = res.data.total</span><br><span class="line">            <span class="built_in">this</span>.pageSize = res.data.pageSize</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;请求产品数据失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="实现搜索产品名-显示数据功能"><a href="#实现搜索产品名-显示数据功能" class="headerlink" title="实现搜索产品名 显示数据功能"></a>实现搜索产品名 显示数据功能</h4><p>查询其实就是 调用接口很简单，这里要注意 传过去的对象，键一定要是 research</p><p>另外就是 有一些特殊的情况，例如如果查出来的数据是大于 页面容量8的话，需要截断显示。</p><p>接口调用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据产品名称 查询数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getGoodsSearch</span>(<span class="params">goodsName</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// let res = await this.$api.getGoodsSearch(&#123;goodsName&#125;)</span></span><br><span class="line">    <span class="comment">//   console.log(res.data)</span></span><br><span class="line">    <span class="comment">// if(res.data.status === 200)&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(res.data)</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//   alert(&quot;没有这个表单数据&quot;)</span></span><br><span class="line">    <span class="built_in">this</span>.$api.getGoodsSearch(&#123;<span class="attr">search</span>:goodsName&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res.data)</span><br><span class="line">      <span class="keyword">if</span>(res.data.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.listTotal = res.data.result</span><br><span class="line">        <span class="comment">// 我拿到的数据是 如果超过页面上线 就要分页 </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.listTotal.length &gt; <span class="number">8</span>)&#123;</span><br><span class="line">          <span class="comment">// 截取出8个 作为第一页展示</span></span><br><span class="line">          <span class="built_in">this</span>.tableData = res.data.result.slice(<span class="number">0</span>,<span class="number">8</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.totalPage = res.data.result.length</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = <span class="built_in">Math</span>.min(<span class="number">8</span>, <span class="built_in">this</span>.pageSize)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 啥数据没查出来 就是空</span></span><br><span class="line">        <span class="built_in">this</span>.tableData = []</span><br><span class="line">        <span class="built_in">this</span>.totalPage = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>, err.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">onSubmit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">this</span>.formInline.goodsName)&#123;</span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">&#x27;请输入信息再去搜索&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.getGoodsSearch(<span class="built_in">this</span>.formInline.goodsName)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>另外又有一个新的bug，就是我如果截取了前8个，剩下点第二页的时候，由于前面的事件绑定是显示全部数据的第二页，此时我应该显示的是查询剩下的内容。</p><p>我们在 data 中添加一个 searchStatus 用来标识，我是不是处于查询状态</p><p>然后根据状态执行对应修改页码的逻辑即可，分页逻辑是归纳的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取点击页码：</span></span><br><span class="line"><span class="function"><span class="title">getPagination</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.seachStatus)</span><br><span class="line">        <span class="comment">//默认产品列表的分页功能</span></span><br><span class="line">        <span class="built_in">this</span>.getGoodsList(page)</span><br><span class="line">    <span class="comment">// 在查询状态下，显示查询剩余内容</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 0-7 8-15 </span></span><br><span class="line">        <span class="built_in">this</span>.tableData = <span class="built_in">this</span>.listTotal.slice((page - <span class="number">1</span>) * <span class="number">8</span>, page * <span class="number">8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="实现选择时间的格式修改"><a href="#实现选择时间的格式修改" class="headerlink" title="实现选择时间的格式修改"></a>实现选择时间的格式修改</h4><p>时间需要进行格式的转换，这里还是使用 dayJS</p><p>首先需要先 导入 dayJS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&quot;dayjs&quot;</span></span><br></pre></td></tr></table></figure><p>然后由于 el-table-colum 属性的title 是由prop 这个属性来定义的，不能修改，可以再下面使用template进行修改，例如如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;载入时间&quot; width=&quot;180&quot;&gt;</span><br><span class="line">  &lt;!--prop=&quot;create_time&quot;  prop获取列字段标识/template  slot-scope=&quot;scope&quot;当前作用域下 scope获取当前行的数据信息 --&gt;</span><br><span class="line">   &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &#123;&#123; dayjs(scope.row.create_time).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125; </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><h4 id="实现删除商品-指的是每一行的右侧"><a href="#实现删除商品-指的是每一行的右侧" class="headerlink" title="实现删除商品 指的是每一行的右侧"></a>实现删除商品 指的是每一行的右侧</h4><font color="red">我现在的实现有问题 得以后解决，因为我现在没有第5页数据了，我得学会了添加才能回来再试对不对</font><p>触发删除的按钮为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">           size=&quot;mini&quot;</span><br><span class="line">           type=&quot;danger&quot;</span><br><span class="line">           icon=&quot;el-icon-delete&quot;</span><br><span class="line">           @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><p>定义这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 数据某一行 删除方法</span></span><br><span class="line"><span class="function"><span class="title">handleDelete</span>(<span class="params">index, row</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, row);</span><br><span class="line">  <span class="built_in">this</span>.$confirm(<span class="string">&#x27;确定删除这一行的商品数据?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 删除这个数据  这里就是请求后端的删除接口</span></span><br><span class="line">    <span class="built_in">this</span>.deleteItemById(row.id)</span><br><span class="line">    <span class="comment">// 删除成功了之后 应该重新渲染页面 dom</span></span><br><span class="line">    <span class="comment">// 理论上现在是第几页 就重新再渲染一次第几页</span></span><br><span class="line">    <span class="comment">// 要考虑到这次删掉是最后一条，那我应该跳到上一页</span></span><br><span class="line">    <span class="comment">// 这个判断需要判断 我删除之后 此时条的总数是不是 pageSize 的倍数，是的话就应该渲染上一页</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.tableData.length % <span class="built_in">this</span>.pageSize == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">this</span>.getGoodsList(<span class="built_in">this</span>.currentPage - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">this</span>.getGoodsList(<span class="built_in">this</span>.currentPage)</span><br><span class="line"></span><br><span class="line">  &#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">    &#125;);          </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中定义了 删除数据接口 <code>deleteItemById</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据的接口 ------</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteItemById</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.deleteGoods(&#123;id&#125;)</span><br><span class="line">    <span class="keyword">if</span>(res.data.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现数据的添加页面"><a href="#实现数据的添加页面" class="headerlink" title="实现数据的添加页面"></a>实现数据的添加页面</h4><h5 id="先配置路由"><a href="#先配置路由" class="headerlink" title="先配置路由"></a>先配置路由</h5><p>数据添加是一个新的页面，逻辑上应该是 点击添加商品按钮后，跳转到新的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-check&quot;  @click=&quot;toProductPage() &quot;&gt;添加商品&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><p>并再 GoodList 文件中 再创建一个 <code>goodsAddPage.vue</code></p><p>然后需要配置路由，打开 router 的 index.js 中配置在 goodsManage下配置一个新的子路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;goodsAddPage&quot;</span>,</span><br><span class="line">    <span class="attr">pat</span>:<span class="string">&quot;goodsAddPage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:GoodsAddPage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/配置路由.png" style="zoom:50%;" /></p><p>配置 click 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击跳转 增添商品页面 ++++</span></span><br><span class="line"><span class="function"><span class="title">togoodsAddPage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="string">&quot;/goodsManage/goodsAddPage&quot;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="配置数据添加页面"><a href="#配置数据添加页面" class="headerlink" title="配置数据添加页面"></a><font color="orange">配置数据添加页面</font></h5><p>碰到一个问题就是，我这个路由并没有在左侧的 导航栏中有对应的 index高亮。我们还是想要在产品列表对应高亮，所以这个怎么办呢？</p><p>首先应该在路由中配置 <strong>meta</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;goodsAddPage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;goodsAddPage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:GoodsAddPage,</span><br><span class="line">    <span class="attr">meta</span>:&#123; <span class="comment">// 配置高亮标识 对应的路由路径</span></span><br><span class="line">          <span class="attr">activeMenu</span>:<span class="string">&quot;/goodsManage/goodsList&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做法：当目前的访问path 为<code>/goodsManage/goodsAddPage</code>时，我会自动的先变成 <code>/goodsManage/goodsList</code>。 这样我的 Menu 激活就能实现了。</strong></p><p>刷新并且打印这个添加页面的 $route，你可以看到此页面是存在 meta的。</p><p>我们就利用这个东西，来实现上面的变换功能。</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/meta.png" style="zoom:50%;" /></p><font color="red">**这里实现方式，是使用 `watch` 来监听路由的变化，获取 meta 里的值。**</font><p>在 <strong>Menu.vue</strong> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;watch--to&quot;</span>, to)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;watch--from&quot;</span>, <span class="keyword">from</span>)</span><br><span class="line">        <span class="comment">// 判断当前的路由里面 meta 中是否有值</span></span><br><span class="line">        <span class="comment">// 我只拿里面的 meta 和 path</span></span><br><span class="line">        <span class="keyword">let</span> &#123;meta, path&#125; = to</span><br><span class="line">        <span class="built_in">console</span>.log()</span><br><span class="line">        <span class="keyword">if</span>(meta.activeMenu)&#123;</span><br><span class="line">            <span class="built_in">this</span>.active = meta.activeMenu</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.active = path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将上面 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;active&quot; router class=&quot;el-menu-vertical-demo&quot; :collapse = &quot;isCollapse&quot;   </span><br><span class="line">       background-color= &quot;#252236&quot;</span><br><span class="line">       text-color=&quot;#fff&quot;</span><br><span class="line">       active-text-color=&quot;#ffd04b&quot; &gt;</span><br></pre></td></tr></table></figure><font color="orange">**但是这样有个问题，就是刚进入的时候，menu的 active 会失效，因为watch 并没有监听到路由的改变。**</font><p>所以可以在 created()  中先初始化一下最初的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.$route.meta.activeMenu)&#123;</span><br><span class="line">        <span class="built_in">this</span>.active = <span class="built_in">this</span>.$route.meta.activeMenu</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.active = <span class="built_in">this</span>.$route.path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="实现产品类型列表-的-树形菜单"><a href="#实现产品类型列表-的-树形菜单" class="headerlink" title="实现产品类型列表 的 树形菜单"></a>实现产品类型列表 的 树形菜单</h5><p>首先我们需要创建一个新的 vue组件，goodsTreeProdct.vue 。然后需要找到 Element UI 中的 树形菜单， 选择懒加载的组件。</p><p>将这个组件作为我们 goodsAddPage的子组件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;产品类型列表&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tree&quot;&gt;</span><br><span class="line">        &lt;goodsTreeProdct&gt;&lt;/goodsTreeProdct&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>具体属性需要看 Element 文案</p><p>我们需要实现的就是 每一层点击，都要进行一次数据后端读取 api 为 <code>this.$api.goodsItemCategory()</code>。整体该组件代码如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">    树状懒加载结构</span><br><span class="line">        show-checkbox 节点是否可被选择  boolean  默认为 false</span><br><span class="line">        props 配置选项 具体看下表   object</span><br><span class="line">            label指定节点标签为节点对象的某个属性值string, function(data, node)——</span><br><span class="line">            children指定子树为节点对象的某个属性值string——</span><br><span class="line">            disabled指定节点选择框是否禁用为节点对象的某个属性值boolean, function(data, node)——</span><br><span class="line">            isLeaf指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效boolean, function(data, node)——</span><br><span class="line">        load  加载子树数据的方法，仅当 lazy 属性 为 true 时生效  并且其是一个函数 function(node, resolve)</span><br><span class="line">        lazy是否懒加载子节点，需与 load 方法结合使用boolean—false</span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-tree</span><br><span class="line">        :props=&quot;props&quot;</span><br><span class="line">        :load=&quot;loadNode&quot;</span><br><span class="line">        lazy&gt;</span><br><span class="line">        &lt;/el-tree&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">          label: &#x27;name&#x27;,</span><br><span class="line">          children: &#x27;zones&#x27;,</span><br><span class="line">          isLeaf: &#x27;leaf&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      loadNode(node, resolve) &#123;</span><br><span class="line">        // 初始上来就是 第0层，然后展开第一层的内容</span><br><span class="line">        if (node.level === 0) &#123;</span><br><span class="line">          // 这个 data 应该来自于 ajax请求</span><br><span class="line">          // let data = [&#123; name: &#x27;region&#x27; &#125;]</span><br><span class="line">          this.$api.goodsItemCategory().then(</span><br><span class="line">              res =&gt; &#123;</span><br><span class="line">                if(res.data.status == 200)</span><br><span class="line">                  return resolve(res.data.result);  </span><br><span class="line">                else</span><br><span class="line">                  return resolve([])</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        if (node.level &gt;= 1) &#123;</span><br><span class="line">          // 请求下一级别</span><br><span class="line">          this.$api.goodsItemCategory(&#123;type:node.data.cid&#125;).then(</span><br><span class="line">              res =&gt; &#123;</span><br><span class="line">                if(res.data.status == 200)</span><br><span class="line">                  return resolve(res.data.result);  </span><br><span class="line">                else</span><br><span class="line">                  return resolve([])</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="实现产品类型列表-的-右侧添加表单"><a href="#实现产品类型列表-的-右侧添加表单" class="headerlink" title="实现产品类型列表 的 右侧添加表单"></a>实现产品类型列表 的 右侧添加表单</h5><h6 id="用全局总线来实现-左侧分类右侧显示"><a href="#用全局总线来实现-左侧分类右侧显示" class="headerlink" title="用全局总线来实现 左侧分类右侧显示"></a>用全局总线来实现 左侧分类右侧显示</h6><p>首先第一行这个 所属分类，我们需要拿到左侧导航栏这个node的名称。在element的回调方法中有 <code>@node-click = &quot;clickHandle&quot;</code>，我们配置自定义函数 clickHandle，<strong>用来触发全局总线传递数据（因为这里是 子传子）</strong></p><p>在 树结构Vue中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击tree的节点触发的事件</span></span><br><span class="line"><span class="function"><span class="title">clickHandle</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;sendTreeNode&#x27;</span>,data)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在  FormVue 组件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;sendTreeNode&#x27;</span>,<span class="built_in">this</span>.sendTreeNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="然后右侧表单整体的布局需要修改为需要效果"><a href="#然后右侧表单整体的布局需要修改为需要效果" class="headerlink" title="然后右侧表单整体的布局需要修改为需要效果"></a>然后右侧表单整体的布局需要修改为需要效果</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;所属分类&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">            &#123;&#123;ruleForm.category&#125;&#125;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;商品名称&quot; prop=&quot;title&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;ruleForm.title&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;商品价格&quot; prop=&quot;price&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;ruleForm.price&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;商品数量&quot; prop=&quot;num&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;ruleForm.num&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;商品卖点&quot; prop=&quot;sellPoint&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;ruleForm.sellPoint&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;上传图片&quot; prop=&quot;image&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;GoodsUpload @sendImage=&quot;sendImage&quot; :fileList=&quot;fileList&quot;&gt;&lt;/GoodsUpload&gt; --&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;商品描述&quot; prop=&quot;descs&quot;&gt;</span><br><span class="line">            &lt;!-- 富文本编辑器 --&gt;</span><br><span class="line">            &lt;!-- &lt;WangEditor @sendEditor=&quot;sendEditor&quot; :editorData=&quot;editor&quot; ref=&quot;myEditor&quot;&gt;&lt;/WangEditor&gt; --&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;首页轮播推荐&quot; prop=&quot;isBanner&quot;&gt;</span><br><span class="line">            &lt;el-switch v-model=&quot;ruleForm.isBanner&quot; active-color=&quot;#13ce66&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;是否推荐商品&quot; prop=&quot;recommend&quot;&gt;</span><br><span class="line">            &lt;el-switch v-model=&quot;ruleForm.recommend&quot; active-color=&quot;#13ce66&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;是否上架商品&quot; prop=&quot;shelves&quot;&gt;</span><br><span class="line">            &lt;el-switch v-model=&quot;ruleForm.shelves&quot; active-color=&quot;#13ce66&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">            &lt;el-button v-show=&quot;ruleForm.title!=&#x27;详情&#x27;&quot; type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;保存&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button  v-show=&quot;ruleForm.title!=&#x27;详情&#x27;&quot;  @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button @click=&quot;goGoodsList()&quot; type=&quot;info&quot; plain&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br></pre></td></tr></table></figure><p>其中data的内容为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">ruleForm</span>: &#123;</span><br><span class="line">          <span class="attr">category</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">num</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">sellPoint</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">image</span>: [],</span><br><span class="line">          <span class="attr">descs</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">isBanner</span>: <span class="literal">true</span>,<span class="comment">//轮推荐</span></span><br><span class="line">          <span class="attr">recommend</span>: <span class="literal">true</span>,<span class="comment">//推荐</span></span><br><span class="line">          <span class="attr">shelves</span>: <span class="literal">true</span>,<span class="comment">//商品上架</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">rules</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入商品名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">price</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入产品的价格&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">num</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入产品的数量&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">sellPoint</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入商品的卖点&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">type</span>: [</span><br><span class="line">            &#123; <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请至少选择一个活动性质&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">descs</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入商品的描述&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h6 id="实现表单-Form-中的图片上传-并回调存储信息"><a href="#实现表单-Form-中的图片上传-并回调存储信息" class="headerlink" title="实现表单 Form 中的图片上传 并回调存储信息"></a>实现表单 Form 中的图片上传 并回调存储信息</h6><p>首先又要创建一个 组件 <code>upLoadImg.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;上传图片&quot; prop=&quot;image&quot;&gt;</span><br><span class="line">    &lt;upLoadImgVue&gt;&lt;/upLoadImgVue&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><p>随后我们去 ElmentUI 中寻找 图片上传的 组件。<font color="blue"><strong>选用的是 Upload 上传中的  照片墙。</strong></font></p><p>其中 vue 模板中的代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">           action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span><br><span class="line">           list-type=&quot;picture-card&quot;</span><br><span class="line">           :on-preview=&quot;handlePictureCardPreview&quot;</span><br><span class="line">           :on-remove=&quot;handleRemove&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line">&lt;el-dialog :visible.sync=&quot;dialogVisible&quot;&gt;</span><br><span class="line">    &lt;img width=&quot;100%&quot; :src=&quot;dialogImageUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><p>我们其实要修改的是 action中，我们传递的服务器地址接口 post请求。</p><p>我们这里的服务器是 express 构建的，所以我们在 sever 中定义了</p><h6 id="我们需要在-server-下创建一个-upload文件夹，用于我们的文件上传"><a href="#我们需要在-server-下创建一个-upload文件夹，用于我们的文件上传" class="headerlink" title="我们需要在 server 下创建一个 upload文件夹，用于我们的文件上传"></a><strong>我们需要在 server 下创建一个 upload文件夹，用于我们的文件上传</strong></h6><p>然后再 src 的 api/base.js 文件中对应的接口为：</p><p><code>uploadUrl:&quot;/api/upload&quot;,</code></p><p><em>`//导出图片 上传</em>`</p><p><code>export const uploadUrl=&#39;/api/upload&#39;</code></p><p>随后再 我们的 <code>upLoadImg.vue</code> 中进行引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;uploadUrl&#125; <span class="keyword">from</span> <span class="string">&quot;../../../api/base&quot;</span></span><br><span class="line"><span class="comment">// 并在 data 中进行注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;upLoadImgVue&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            uploadUrl,</span><br><span class="line">            <span class="attr">dialogImageUrl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">dialogVisible</span>: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>将原来控件中的 action 修改为 双向绑定  <code>:action=&quot;uploadUrl&quot;</code></p><font color="blue">**我这里碰到了一个 bug，就是我上传的图片如果有中文 会乱码**</font><p><strong>现在上传成功了，现在需要将 这个上传图片的地址，存到我 form 表单的 image 属性中</strong></p><p>在控件中引入 <code>:on-success=&quot;handleSuccess&quot;</code></p><p>然后就在 handleSuccess中执行需要的内容即可，我们这边需要将 图片url 传递给 父组件表单vue。</p><p>这里肯定需要一个  <strong>子传父的 自定义事件</strong>  这肯定会的啦，就不详细说了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传成功回调处理</span></span><br><span class="line"><span class="function"><span class="title">handleSuccess</span>(<span class="params">response, file, fileList</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// url: &quot;upload\\1677749642735-614.png&quot;</span></span><br><span class="line">    <span class="keyword">const</span> fileName = host + <span class="string">&quot;/&quot;</span> + response.url.split(<span class="string">&quot;\\&quot;</span>).pop();</span><br><span class="line">    <span class="built_in">console</span>.log(fileName)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(response,file,fileList)</span><br><span class="line">    <span class="built_in">this</span>.$emit(<span class="string">&quot;sendImage&quot;</span>, fileName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 表单中的 image 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sendImage</span>(<span class="params">imgUrl</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.ruleForm.image.push(imgUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现表单-Form-中的富文本组件-上传"><a href="#实现表单-Form-中的富文本组件-上传" class="headerlink" title="实现表单 Form 中的富文本组件 上传"></a>实现表单 Form 中的富文本组件 上传</h6><p>富文本编译器，需要用到第三方的插件，这里使用的是 <strong>wangEditor 富文本编译器</strong></p><p>所以我们也需要创建 wangEditor 这个Vue文件，<strong>然后我们这里也同样采用 自定义事件，进行父传子</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;wangEditor @sendWangEditor=&quot;sendWangEditor&quot;&gt;&lt;/wangEditor&gt;</span><br></pre></td></tr></table></figure><h6 id="最后实现商品的添加"><a href="#最后实现商品的添加" class="headerlink" title="最后实现商品的添加"></a>最后实现商品的添加</h6><p>点击保存应该 可以提交此时的填写的商品信息，并且添加到数据库。</p><p>在表单Vue中，对按钮绑定事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;添加商品&quot;</span>, <span class="built_in">this</span>.ruleForm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>router （express） 定义的 接口为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/goods/item/insertTbItem&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>对应 src api 下的 base.js 中的  <code>addGoods:&quot;/api/goods/item/insertTbItem&quot;,*//商品添加地址*</code></p><p>然后对应的  src api 下的 index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addGoods</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> axios.get(base.addGoods, &#123; params &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="然后就是撰写-Form-表单的方法："><a href="#然后就是撰写-Form-表单的方法：" class="headerlink" title="然后就是撰写 Form 表单的方法："></a><strong>然后就是撰写 Form 表单的方法：</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交事件  --------</span></span><br><span class="line"><span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取表单的输入信息：----&#x27;</span>, <span class="built_in">this</span>.ruleForm);</span><br><span class="line">        <span class="comment">//添加商品----参数： title cid  category sellPoint price num descs paramsInfo image</span></span><br><span class="line">        <span class="keyword">let</span> &#123; title, cid, category, sellPoint, price, num, descs, image &#125; = <span class="built_in">this</span>.ruleForm;</span><br><span class="line">          <span class="built_in">this</span>.insertTbItem(&#123;</span><br><span class="line">              title, cid, category, sellPoint, price, num, descs,</span><br><span class="line">              <span class="attr">image</span>: <span class="built_in">JSON</span>.stringify(image)</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 添加商品的接口 -----------------</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">insertTbItem</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$api.addGoods(params)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;+++++++++++++++++++++++++++++++++&quot;</span>, res)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;添加商品&quot;</span>, res.data);</span><br><span class="line">  <span class="keyword">if</span> (res.data.status === <span class="number">200</span>) &#123;<span class="comment">//添加成功--</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//信息提示</span></span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;恭喜你，添加商品成功&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//跳转到产品列表界面--- </span></span><br><span class="line">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/goodsManage/goodsList&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//错误信息提示</span></span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">&#x27;错了哦，添加商品失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>INSERT INTO project(title, image, sellPoint, price, cid, category, num,  descs, paramsInfo) VALUES (&#39;214&#39;,&#39;[&quot;http://localhost:9898/1677766470520-618.png&quot;]&#39;,&#39;13134&#39;,&#39;142&#39;,&#39;1001&#39;,&#39;新鲜水果&#39;,&#39;13124&#39;,&#39;&lt;p&gt;hello&lt;/p&gt;&#39;,&#39;&#39;)</code></p><p>这个源代码里 sql 语句是正确的，但是数据库有一个字段  upgrated </p><h5 id="实现点击重置功能"><a href="#实现点击重置功能" class="headerlink" title="实现点击重置功能"></a>实现点击重置功能</h5><font color="blue">**重置功能，但是 上传图片区域 **</font><p><strong>首先对于 上传图片 的 upLoadImage Vue 文件</strong>，需要先定义一个 ref 用于找到这个控件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;el-upload</span><br><span class="line">...</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      multiple</span><br><span class="line">      &gt;</span><br><span class="line">...</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>并在 methods 中定义 方法 clear</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">clear</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 自带 api clearFiles</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.upload.clearFiles()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后在 Form 组件中，</strong>对 upLoad 标签，给定一个 ref</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;upLoadImgVue  @sendImage=&quot;sendImage&quot; ref=&quot;uploadImage&quot;&gt;&lt;/upLoadImgVue&gt;</span><br></pre></td></tr></table></figure><p>然后重置按钮，添加对应的 找到 ref 执行器 clear 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs[formName].resetFields();</span><br><span class="line">    <span class="comment">// 清空图片列表  这个办法是 组件自己的方法</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.uploadImage.clear()</span><br><span class="line">    <span class="comment">// WangEidtor</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><font color="blue">**重置功能， 富文本区域并没有 清空**</font><p><strong>同样在 Form 组件中定义一个  ref</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;wangEditor @sendWangEditor=&quot;sendWangEditor&quot; ref=&quot;wangEdit&quot;&gt;&lt;/wangEditor&gt;</span><br></pre></td></tr></table></figure><p>然后在重置按钮中，写方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs[formName].resetFields();</span><br><span class="line">    <span class="comment">// 清空图片列表  这个办法是 组件自己的方法</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.uploadImage.clear()</span><br><span class="line">    <span class="comment">// WangEidtor</span></span><br><span class="line">    <span class="comment">// this.$refs.wangEdit.html = &quot;&quot;</span></span><br><span class="line">    <span class="comment">// 或者 用其 api 方法</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.wangEdit.editor.clear()  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="实现List-页面的-选中某几项-然后批量删除"><a href="#实现List-页面的-选中某几项-然后批量删除" class="headerlink" title="实现List 页面的 选中某几项 然后批量删除"></a>实现List 页面的 选中某几项 然后批量删除</h4><p>首先 table 在 Element UI 中对于选择哪几个，是有专门的触发函数的 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- event: </span><br><span class="line">  select:当用户手动勾选数据行的 Checkbox 时触发的事件  selection row </span><br><span class="line">  select-all当用户手动勾选全选 Checkbox 时触发的事件selection</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 部分二 ：表格部分 --&gt;</span><br><span class="line">&lt;div class=&quot;list-table&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">    :data=&quot;tableData&quot;</span><br><span class="line">    header-cell-class-name=&quot;textCenter&quot;</span><br><span class="line">    border</span><br><span class="line">    style=&quot;width: 100%&quot;</span><br><span class="line">    @select=&quot;selectHandle&quot;</span><br><span class="line">    @select-all=&quot;selectHandle&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>触发的事件回调函数 是一致的 都是我们自己定义的 <strong>selectHandle</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击勾选选择框 ————————————</span></span><br><span class="line"><span class="function"><span class="title">selectHandle</span>(<span class="params">selection</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 可以获取所有选中的 行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;selection&quot;</span>, selection)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>点击按钮批量删除，触发对应方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="function"><span class="title">partDelete</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;批量删除 --ids--&quot;</span>, <span class="built_in">this</span>.ids);</span><br><span class="line">    <span class="comment">// 需要拼接是因为 我们的接口输入的是个 字符串</span></span><br><span class="line">    <span class="keyword">let</span> idsStr = <span class="built_in">this</span>.ids.join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">&#x27;确定删除选中的商品数据?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$api.batchDelete(&#123;<span class="attr">ids</span>:idsStr&#125;).then(</span><br><span class="line">            <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 删除成功需要重新渲染列表</span></span><br><span class="line">                <span class="keyword">if</span>(res.data.status == <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="built_in">this</span>.getGoodsList(<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong><font color="orange">然后需要解决的bug问题是，我将这页选择的都删了，这页没有了，怎么显示回上一页</font></strong></p><h2 id="将整个项目推送到-gitee中"><a href="#将整个项目推送到-gitee中" class="headerlink" title="将整个项目推送到 gitee中"></a>将整个项目推送到 gitee中</h2><p><strong>Step1：首先初始你需要新建一个项目</strong></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/新建仓库.png" alt=""></p><p><strong>Step2：在项目文件中打开 git bash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">//在这之前，首次需要 注册邮箱和姓名</span><br><span class="line">git config --global user.email &quot;963561243@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;JiangKaisheng&quot;</span><br><span class="line">//然后再</span><br><span class="line">git commit -m &quot;搭建项目&quot;</span><br><span class="line"> </span><br><span class="line">// 初始第一次  远程一下</span><br><span class="line">git remote add origin https://gitee.com/kaikai-superman/vue2_-purchase-ego.git</span><br><span class="line"></span><br><span class="line">// push 到 master 分支上</span><br><span class="line">git push -u origin &quot;master&quot;</span><br></pre></td></tr></table></figure><p>而后每一次提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先要 pull 一下保持更新</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>在实际的开发中 肯定不会在 master 分支上的</p><p>所以我们可能需要自己建立分支 </p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/建立分支.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/实际创建.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 可查看 本地和远端 分别由什么分支</span><br><span class="line">// 注意查看之前最好先 更新 git pull 一下</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VuePurchase易购平台项目笔记&quot;&gt;&lt;a href=&quot;#VuePurchase易购平台项目笔记&quot; class=&quot;headerlink&quot; title=&quot;VuePurchase易购平台项目笔记&quot;&gt;&lt;/a&gt;VuePurchase易购平台项目笔记&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>网络安全篇章</title>
    <link href="http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/</id>
    <published>2023-03-20T15:51:03.000Z</published>
    <updated>2023-03-20T10:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络安全篇章"><a href="#网络安全篇章" class="headerlink" title="网络安全篇章"></a>网络安全篇章</h2><h3 id="考点1：网络劫持"><a href="#考点1：网络劫持" class="headerlink" title="考点1：网络劫持"></a>考点1：网络劫持</h3><h4 id="面试题：网络劫持分为哪两种"><a href="#面试题：网络劫持分为哪两种" class="headerlink" title="面试题：网络劫持分为哪两种"></a>面试题：网络劫持分为哪两种</h4><p><strong>DNS劫持：</strong></p><p>例子：输入京东被强制跳转到淘宝，这就属于DNS劫持</p><p>方式有：</p><ul><li><p>DNS强制解析：</p><p>通过修改运营商的本地DNS记录，来引导用户流量到缓存服务器。</p></li><li><p>302跳转的方式：</p><p>通过监控网路出口的流量，分析判断哪些内容是可以进行劫持处理的，再对劫持的内存发起302跳转的回复，引导用户获取内容</p></li></ul><p><strong>HTTP劫持：</strong></p><p>例子：访问谷歌，但是一直有贪玩蓝月的广告</p><font color="red">**由于http明文传输，运营商会修改你的http响应内容（即加广告）**</font><p><strong>总结</strong></p><p>DNS劫持由于涉嫌违法，已经监管起来，现在很少有DNS劫持，</p><p><strong>而http劫持依旧非常盛行，最有效的办法就是全站https，将http加密，这使得运营商无法获得明文，就无法劫持你的响应内容。</strong></p><h3 id="考点2：前端安全的-引起与-防御"><a href="#考点2：前端安全的-引起与-防御" class="headerlink" title="考点2：前端安全的 引起与 防御"></a>考点2：前端安全的 引起与 防御</h3><h4 id="面试题：有哪些可能引起前端安全的问题？"><a href="#面试题：有哪些可能引起前端安全的问题？" class="headerlink" title="面试题：有哪些可能引起前端安全的问题？"></a>面试题：有哪些可能引起前端安全的问题？</h4><p><strong>1.跨站脚本(Cross-Site Scripting, XSS)：</strong></p><p>一种代码注入方式，为了与CSS区分，所以被称为 <code>XSS</code>。</p><p>早期常见于网络论坛，起因是网站没有对用户的输入进行严格的限制，使得攻击者可以将脚本上传到帖子，让其他人浏览到恶意脚本的页面，其注入方式很简单，包括但不限于<code>javascript/css/flash</code>等；</p><p><strong>2. iframe的滥用：</strong></p><p>iframe中的内容是由第三方来提供的，默认情况下，他们不受控制，他们可以在iframe中运行javascript脚本、Flash插件、弹出对话框等等，这可能会破坏前端用户体验。</p><p><strong>3.跨站点请求伪造（Cross-Site Request Forgeries，CSRF）:</strong></p><p>指攻击者通过设置好的陷阱，<strong>强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</strong></p><p><strong>4.恶意第三方库：</strong></p><p>无论是后端服务器应用还是前端应用开发，绝大多数时候，都是在借助开发框架和各种类库进行快速开发，一旦第三方库被植入恶意代码很容易引起安全问题。</p><h4 id="面试题：什么是-跨站脚本-XSS攻击？"><a href="#面试题：什么是-跨站脚本-XSS攻击？" class="headerlink" title="面试题：什么是 跨站脚本 XSS攻击？"></a>面试题：什么是 跨站脚本 XSS攻击？</h4><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p><p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。 </p><p>攻击者可以通过这种攻击方式可以进行以下操作：</p><blockquote><p><strong>获取页面的数据，如 DOM、cookie、localStorage；</strong></p><p><strong>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器； 破坏页面结构；流量劫持（将链接指向某网站）；</strong></p></blockquote><h5 id="攻击类型-XSS-可以分为存储型、反射型和-DOM-型"><a href="#攻击类型-XSS-可以分为存储型、反射型和-DOM-型" class="headerlink" title="攻击类型  XSS 可以分为存储型、反射型和 DOM 型"></a>攻击类型  XSS 可以分为存储型、反射型和 DOM 型</h5><ul><li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li><li>反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li><li>DOM 型指的通过修改页面的 DOM 节点形成的 XSS。</li></ul><p><strong>三者的区别在于：</strong></p><p>DOM 型 XSS 攻击中，<strong>取出和执⾏恶意代码由浏览器端完成</strong>，属于<strong>前端JavaScript 自身的安全漏洞</strong>，</p><p>而其他两种 XSS 都属于<strong>服务端的安全漏洞</strong>。</p><h3 id="面试题：如何防御-XSS-攻击？"><a href="#面试题：如何防御-XSS-攻击？" class="headerlink" title="面试题：如何防御 XSS 攻击？"></a>面试题：如何防御 XSS 攻击？</h3><p>三种方式都可以：</p><ul><li>在服务器端对用户输入的内容进行转义，例如使用HTML实体替换敏感字符，避免浏览器将其当作HTML代码解析执行。</li><li>在输出时对用户输入的内容进行过滤和转义，避免用户输入的恶意脚本被执行。</li></ul><p><strong>在网站中使用 HTTP头中的Content-Security-Policy（CSP）字段 CSP ，限制可以加载的资源，例如脚本、样式表、图片等。</strong></p><p>通常有两种方式来开启 CSP，</p><ul><li>一种是设置 HTTP 首部中的Content-Security-Policy，</li><li>一种是设置 meta 标签的方式 <code>&lt;metahttp-equiv=&quot;Content-Security-Policy&quot;&gt;</code>，对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</li></ul><ol><li><p>存储型XSS</p><p><strong>存储型XSS是攻击者将恶意代码存储到服务器上，当用户访问包含恶意代码的页面时，恶意代码会被执行。</strong>攻击者通常会在论坛、留言板、博客等需要存储用户输入的地方进行攻击。</p><ul><li></li></ul></li><li><p>反射型XSS</p><p><strong>反射型XSS是攻击者将恶意代码注入到URL中，当用户访问包含恶意代码的URL时，恶意代码会被执行。</strong>防御通常，攻击者会通过诱骗用户点击恶意链接、在搜索引擎中搜索恶意关键字等方式进行攻击。</p><ul><li>在服务器端对URL进行过滤和验证，例如限制输入长度、过滤特殊字符等。</li></ul></li><li><p>DOM型XSS</p></li></ol><p>​        <strong>DOM型XSS是攻击者将恶意代码注入到网页的DOM节点中，当用户浏览网页时，恶意代码会被执行</strong>。防御        DOM型XSS的方法有：</p><ul><li>避免使用<code>eval</code>()函数、<code>innerHTML</code>属性、<code>document.write()</code>等容易受到攻击的API。如果必须使用这些API，可以使用一些安全的编码方式来防止注入攻击，例如使用<code>JSON.stringify()</code>函数对变量进行编码，使用正则表达式进行过滤等。</li></ul><h3 id="面试题：什么是-CSRF-攻击？"><a href="#面试题：什么是-CSRF-攻击？" class="headerlink" title="面试题：什么是 CSRF 攻击？"></a>面试题：什么是 CSRF 攻击？</h3><p>CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p><p> <strong>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</strong></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p><strong>常见的 CSRF 攻击有三种：</strong></p><ul><li>GET 类型的 CSRF 攻击：比如在网站中的一个 <code>img</code> 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。</li><li>POST 类型的 CSRF 攻击：比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。 </li><li>链接类型的 CSRF 攻击：比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。</li></ul><h4 id="面试题：怎么预防-CSRF-的三种攻击"><a href="#面试题：怎么预防-CSRF-的三种攻击" class="headerlink" title="面试题：怎么预防 CSRF 的三种攻击"></a>面试题：怎么预防 CSRF 的三种攻击</h4><h5 id="1-进行同源检测"><a href="#1-进行同源检测" class="headerlink" title="1.进行同源检测"></a>1.进行同源检测</h5><p>服务器根据 http 请求头中 <strong>origin 或者 referer 信息</strong> 来判断请求是否为允许访问的站点，从而对请求进行过滤。</p><p>当origin 或者 referer 信息都不存在的时候，直接阻止请求。</p><blockquote><p>这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。</p><p>所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer 字段会告诉服务器该网页是从哪个页面链接过来的）</p></blockquote><h5 id="2-使用-CSRF-Token-进行验证，"><a href="#2-使用-CSRF-Token-进行验证，" class="headerlink" title="2.使用 CSRF Token 进行验证，"></a>2.使用 CSRF Token 进行验证，</h5><p>服务器向用户返回一个随机数 Token ，</p><p>当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，</p><p>然后服务器对这个 token 进行验证。</p><p>这种方法解决了使用 cookie单一验证方式时，可能会被冒用的问题。</p><blockquote><p>但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。</p><p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。</p><p>这种情况可以通过改变 token 的构建方式来解决。</p></blockquote><h5 id="3-对-Cookie-进行双重验证"><a href="#3-对-Cookie-进行双重验证" class="headerlink" title="3. 对 Cookie 进行双重验证"></a>3. 对 Cookie 进行双重验证</h5><p>服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，</p><p>然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，</p><p>然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。</p><p><strong>使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。</strong></p><blockquote><p>并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。</p><p>这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p></blockquote><h5 id="4-在设置-cookie-属性的时候设置-Samesite-，"><a href="#4-在设置-cookie-属性的时候设置-Samesite-，" class="headerlink" title="4.在设置 cookie 属性的时候设置 Samesite ，"></a>4.在设置 cookie 属性的时候设置 Samesite ，</h5><p><strong>限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。</strong></p><blockquote><p>Samesite 一共有两种模式，</p><p>一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，</p><p>在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络安全篇章&quot;&gt;&lt;a href=&quot;#网络安全篇章&quot; class=&quot;headerlink&quot; title=&quot;网络安全篇章&quot;&gt;&lt;/a&gt;网络安全篇章&lt;/h2&gt;&lt;h3 id=&quot;考点1：网络劫持&quot;&gt;&lt;a href=&quot;#考点1：网络劫持&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端（JS）代码编程题</title>
    <link href="http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%EF%BC%88JS%EF%BC%89%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%EF%BC%88JS%EF%BC%89%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B%E9%A2%98/</id>
    <published>2023-03-20T15:51:03.000Z</published>
    <updated>2023-03-20T10:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端（JS）代码编程题"><a href="#前端（JS）代码编程题" class="headerlink" title="前端（JS）代码编程题"></a>前端（JS）代码编程题</h2><h3 id="JS-专属API"><a href="#JS-专属API" class="headerlink" title="JS 专属API"></a>JS 专属API</h3><p><a href="https://cloud.tencent.com/developer/chapter/13597">https://cloud.tencent.com/developer/chapter/13597</a></p><h4 id="数值定义"><a href="#数值定义" class="headerlink" title="数值定义"></a>数值定义</h4><p><strong>正数最小值 和 最大值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示无穷接近于0 的最小正数</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line"><span class="built_in">Number</span>,MAX_VALUE</span><br></pre></td></tr></table></figure><p><strong>负无穷大 和 正无穷大</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负无穷大</span></span><br><span class="line">-<span class="literal">Infinity</span></span><br><span class="line"><span class="built_in">Number</span>.NEGATIVE_INFINITY</span><br><span class="line"><span class="comment">// 正无穷大</span></span><br><span class="line"><span class="literal">Infinity</span></span><br><span class="line"><span class="built_in">Number</span>.POSITIVE_INFINITY</span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><strong>创建一个二维数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(prices.length).fill(<span class="number">0</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Array</span>(<span class="number">2</span>).fill(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><strong>数组的两个索引值交换的 ES6写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nums[i], nums[j]] = [nums[j], nums[i]];</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><strong>字符串变字符串数组，再转Number类型</strong></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/微信截图_20230110194438.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lineObj = line.toString().split(<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 map 方法 映射成 Number类型</span></span><br><span class="line"><span class="keyword">let</span> lineArray = lineStr.map(<span class="built_in">Number</span>)</span><br></pre></td></tr></table></figure><p><strong>将字符串逆序</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sArray = s.split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">sReverseArray = sArray.reverse()</span><br><span class="line">sReverse = sReverseArray.join(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Number类型变字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.toString()</span><br></pre></td></tr></table></figure><p><strong>单字符和 ASCCII码</strong></p><p>在 JS 中 不像java  可以直接  ‘b’ -‘a’ = 1</p><p>因为JS不存在 char这个类型，所以我们需要利用 api  <code>charCodeAt(index)</code> 来做，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;b&#x27;</span>.charCodeAt(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.charCodeAt(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="哈希表-（任意类型均可）-Map"><a href="#哈希表-（任意类型均可）-Map" class="headerlink" title="哈希表 （任意类型均可） Map"></a>哈希表 （任意类型均可） <code>Map</code></h4><p>JS中不限制传入键和值的 类型 。</p><p>JS 使用的是 <code>Map</code>，与 Java 中的 <code>HashMap</code> 有所区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个哈希表</span></span><br><span class="line"><span class="keyword">const</span> symbolValues = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">symbolValues.set(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">const</span> value = symbolValues.get(<span class="string">&quot;I&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次添加 + 遍历值</span></span><br><span class="line"><span class="keyword">for</span>(num <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="comment">//利用Map的数据结构统计次数</span></span><br><span class="line">    <span class="keyword">if</span> (!map.has(num)) &#123;</span><br><span class="line">        map.set(num, <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.set(num, map.get(num) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [...map.values()]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.entries())<span class="comment">// 类似于 MapIterator &#123;&quot;name&quot; =&gt; &quot;An&quot;, &quot;des&quot; =&gt; &quot;JS&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.keys()) <span class="comment">// 类似于 MapIterator &#123;&quot;name&quot;, &quot;des&quot;&#125;</span></span><br><span class="line">size：返回字典中所包含的元素个数</span><br></pre></td></tr></table></figure><ol><li><p>Map 转 Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="comment">// ES6 的解构</span></span><br><span class="line"><span class="built_in">console</span>.log([...map])<span class="comment">// [[1, 1], [2, 2], [3, 3]]</span></span><br></pre></td></tr></table></figure></li><li><p>Array 转 Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(map)<span class="comment">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>将 map 形式 转化为 数组形式，并且按照 原来的 values </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 首先将字典转成数组，然后对数组中的第二个元素（频度）从大到小排序</span><br><span class="line"></span><br><span class="line">const list = Array.from(map).sort((a, b) =&gt; b[1] - a[1])</span><br></pre></td></tr></table></figure><h4 id="sort-函数-针对数组"><a href="#sort-函数-针对数组" class="headerlink" title="sort 函数  针对数组"></a>sort 函数  <code>针对数组</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据绝对值大小  </span></span><br><span class="line">nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//从大到小</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.abs(b) - <span class="built_in">Math</span>.abs(a)</span><br><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.abs(a) - <span class="built_in">Math</span>.abs(b)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="join-函数"><a href="#join-函数" class="headerlink" title="join 函数"></a>join 函数</h4><p>可以将一个数组（什么类型都可以）按照某种分隔符进行拼接，<strong>拼接成字符串</strong></p><p>例如我现在有一个 里面是Number类型的 数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]</span><br><span class="line"><span class="comment">// 映射成 Number类型</span></span><br><span class="line"><span class="keyword">var</span> arrNumber = arr.map(<span class="built_in">Number</span>)</span><br><span class="line"><span class="comment">// ”123&quot; </span></span><br><span class="line">arr.join(arr)</span><br><span class="line"><span class="comment">// 转成 Number类型</span></span><br><span class="line"><span class="built_in">Number</span>(arr.join(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="built_in">Number</span>(arrNumber.join(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4><p>可以用于实现累加，代码最精简</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = candys.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="splice-函数"><a href="#splice-函数" class="headerlink" title="splice 函数"></a>splice 函数</h4><p>其可以用于截取，也可用于在指定位置添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0; i &lt; people.length; i++) &#123;</span><br><span class="line">    peopleNew.splice(people[i][1], 0, people[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>达到下面的效果：</p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/QQ截图20230117162826.png" style="zoom:50%;" /></p><h4 id="slice-函数-数组和字符串的截取"><a href="#slice-函数-数组和字符串的截取" class="headerlink" title="slice 函数   数组和字符串的截取"></a>slice 函数   <code>数组和字符串的截取</code></h4><p>用于 字符串和 数组的截取均可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;kaikai&quot;</span></span><br><span class="line">str.slice(<span class="number">0</span>,<span class="number">2</span>)  <span class="comment">// &quot;ka&quot;</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">nums.slice(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><h4 id="at-函数，取最后一个数组元素"><a href="#at-函数，取最后一个数组元素" class="headerlink" title="at 函数，取最后一个数组元素"></a>at 函数，<code>取最后一个数组元素</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.at(-<span class="number">1</span>) <span class="comment">//3</span></span><br><span class="line"><span class="comment">// arr[arr.length - 1]  也是可以的</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h4><p><strong>字符串根据 &gt;= 1个空格 进行隔开</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tokens = line.split(<span class="regexp">/\s+/</span>);</span><br></pre></td></tr></table></figure><h3 id="颜色分类（来自：小米-2022-秋招-卷1）"><a href="#颜色分类（来自：小米-2022-秋招-卷1）" class="headerlink" title="颜色分类（来自：小米 2022 秋招 卷1）"></a>颜色分类（来自：小米 2022 秋招 卷1）</h3><p><strong>问题描述:</strong> 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排 列。 </p><p>此题中，我们使用整数 0、 1 和 2 分别表示<strong>红色、白色和蓝色</strong>。 </p><p>输入描述: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：数组nums </span><br></pre></td></tr></table></figure><p>输出描述: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：数组nums </span><br></pre></td></tr></table></figure><p>输入样例: <strong>（输入字符串）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p>输出样例: <strong>（输出字符串）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong>答案做法</strong>：不适用 <strong>Array.sort()</strong> 方法的情况下</p><p>其实很简单，定义一个指针，就是碰到0，就与这个指针交换一下位置并且更新指针，这样最后所有的0都会再最左边。以此类推再来一次1。</p><p>力扣上我记得也是有这道题的，使用 Java 也非常容易实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">nums, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = nums[j];</span><br><span class="line">    nums[j] = nums[i];</span><br><span class="line">    nums[i] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortColors</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ptr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums, i, ptr);</span><br><span class="line">            ptr++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === <span class="number">1</span>) &#123;</span><br><span class="line">            swap(nums, i, ptr);</span><br><span class="line">            ptr++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h3 id="罗马数字转整数（来自：小米-2022-秋招-卷1）"><a href="#罗马数字转整数（来自：小米-2022-秋招-卷1）" class="headerlink" title="罗马数字转整数（来自：小米 2022 秋招 卷1）"></a>罗马数字转整数（来自：小米 2022 秋招 卷1）</h3><p><strong>问题描述</strong>: 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M, 分别对应数字：1，5， 10， 50，100，500，1000。例如， 罗马数字 2 写做 II ，即 为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于 大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： </p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 </p><p>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </p><p>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 </p><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。 </p><p><strong>输入描述:</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXVII</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure><p><strong>问题解决</strong></p><p>这道题看起来好像要判断子问题，其实对于整体结果而言就是，特殊情况剪掉，其他正常加就ok。</p><p>一次循环即可，不过要判断当前位 和 下一位的大小，如果是小的在左边，那说明是总数要减去当前值的，否则就是加上当前值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> symbolValues = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">    symbolValues.set(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> length = str.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = symbolValues.get(str[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span> &amp;&amp; value &lt; symbolValues.get(str[i + <span class="number">1</span>])) &#123;</span><br><span class="line">            result -= value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端（JS）代码编程题&quot;&gt;&lt;a href=&quot;#前端（JS）代码编程题&quot; class=&quot;headerlink&quot; title=&quot;前端（JS）代码编程题&quot;&gt;&lt;/a&gt;前端（JS）代码编程题&lt;/h2&gt;&lt;h3 id=&quot;JS-专属API&quot;&gt;&lt;a href=&quot;#JS-专属API&quot;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/03/20/NodeJS%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/03/20/NodeJS%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-20T10:12:35.928Z</published>
    <updated>2023-03-05T13:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="Node-js-（最全）基础-全栈项目"><a href="#Node-js-（最全）基础-全栈项目" class="headerlink" title="Node.js （最全）基础+全栈项目"></a>Node.js （最全）基础+全栈项目</h3><p>​            作者：kerwin</p><p>​            版本：QF1.0</p><p>​            版权：千锋HTML5大前端教研院</p><p>​            公众号: 大前端私房菜</p><h4 id="一、Node-js基础"><a href="#一、Node-js基础" class="headerlink" title="一、Node.js基础"></a>一、Node.js基础</h4><h5 id="1-认识Node-js"><a href="#1-认识Node-js" class="headerlink" title="1.  认识Node.js"></a>1.  认识Node.js</h5><blockquote><p>Node.js是一个javascript运行环境。它让javascript可以开发后端程序，实现几乎其他后端语言实现的所有功能，可以与PHP、Java、Python、.NET、Ruby等后端语言平起平坐。</p><p>Nodejs是基于V8引擎，V8是Google发布的开源JavaScript引擎，本身就是用于Chrome浏览器的js解释部分，但是Ryan Dahl 这哥们，鬼才般的，把这个V8搬到了服务器上，用于做服务器的软件。</p></blockquote><h6 id="01-nodejs的特性"><a href="#01-nodejs的特性" class="headerlink" title="01 nodejs的特性"></a>01 nodejs的特性</h6><ul><li>Nodejs语法完全是js语法，只要你懂js基础就可以学会Nodejs后端开发</li><li>NodeJs超强的高并发能力,实现高性能服务器</li><li>开发周期短、开发成本低、学习成本低</li></ul><h6 id="02-使用-Node-js-需要了解多少-JavaScript"><a href="#02-使用-Node-js-需要了解多少-JavaScript" class="headerlink" title="02 使用 Node.js 需要了解多少 JavaScript"></a>02 使用 Node.js 需要了解多少 JavaScript</h6><blockquote><p><a href="http://nodejs.cn/learn/how-much-javascript-do-you-need-to-know-to-use-nodejs">http://nodejs.cn/learn/how-much-javascript-do-you-need-to-know-to-use-nodejs</a></p></blockquote><h6 id="03-浏览器环境vs-node环境"><a href="#03-浏览器环境vs-node环境" class="headerlink" title="03 浏览器环境vs node环境"></a>03 浏览器环境vs node环境</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220209152247426.png" alt="image-20220209152247426"></p><p>Node.js 可以解析JS代码（没有浏览器安全级别的限制）提供很多系统级别的API，如：</p><ul><li><p>文件的读写 (File System)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./ajax.png&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(content)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>进程的管理 (Process)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(argv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(process.argv.slice(<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>网络通信 (HTTP/HTTPS)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  res.write(<span class="string">&quot;hello nodejs&quot;</span>)</span><br><span class="line">  res.end()</span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-开发环境搭建"><a href="#2-开发环境搭建" class="headerlink" title="2.  开发环境搭建"></a>2.  开发环境搭建</h5><blockquote><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p></blockquote><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220210095903409.png" alt="image-20220210095903409"></p><h5 id="3-模块、包、commonJS"><a href="#3-模块、包、commonJS" class="headerlink" title="3.  模块、包、commonJS"></a>3.  模块、包、commonJS</h5><p>​            <img src="%E7%AC%94%E8%AE%B0.assets/image-20220210100015768.png" alt="image-20220210100015768"></p><h6 id="02-CommonJS规范"><a href="#02-CommonJS规范" class="headerlink" title="02 CommonJS规范"></a>02 CommonJS规范</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220210101652166.png" alt="image-20220210101652166" style="zoom: 67%; float: left;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220210101720533.png" alt="image-20220210101720533" style="zoom: 67%; float: left;" /></p><h6 id="03-modules模块化规范写法"><a href="#03-modules模块化规范写法" class="headerlink" title="03 modules模块化规范写法"></a>03 modules模块化规范写法</h6><p>我们可以把公共的功能 抽离成为一个单独的 js 文件 作为一个模块，默认情况下面这个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或者属性，就必须在模块里面通过 exports 或者 module.exports 暴露属性或者方法。</p><p>m1.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;gp19&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;module 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口暴露方法一：</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">say</span>: sayName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口暴露方法二：</span></span><br><span class="line"><span class="built_in">exports</span>.say = sayName</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误！</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">say</span>: sayName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="built_in">require</span>(<span class="string">&#x27;./m1&#x27;</span>)</span><br><span class="line">m1.say()</span><br></pre></td></tr></table></figure><h5 id="4-Npm-amp-Yarn"><a href="#4-Npm-amp-Yarn" class="headerlink" title="4.  Npm&amp;Yarn"></a>4.  Npm&amp;Yarn</h5><h6 id="01-npm的使用"><a href="#01-npm的使用" class="headerlink" title="01 npm的使用"></a>01 npm的使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install 包名 –g  （uninstall,update）</span><br><span class="line">npm install 包名 --save-dev (uninstall,update)</span><br><span class="line">npm list -g (不加-g，列举当前目录下的安装包)</span><br><span class="line">npm info 包名（详细信息） npm info 包名 version(获取最新版本)</span><br><span class="line">npm install md5@<span class="number">1</span>（安装指定版本）</span><br><span class="line">npm outdated(  检查包是否已经过时)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>  &#125;  ^ 表示 如果 直接npm install 将会 安md5</span><br><span class="line">    <span class="number">2.</span>*.*  最新版本</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;~2.1.0&quot;</span>  &#125;  ~ 表示 如果 直接npm install 将会 安装md5 <span class="number">2.1</span>.*  最新版本</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;*&quot;</span>  &#125;  * 表示 如果 直接npm install 将会 安装 md5  最新版本</span><br></pre></td></tr></table></figure><h6 id="02-全局安装-nrm"><a href="#02-全局安装-nrm" class="headerlink" title="02 全局安装 nrm"></a>02 全局安装 nrm</h6><blockquote><p>NRM (npm registry manager)是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换。</p></blockquote><p><code>手动切换方法： npm config set registry https://registry.npm.taobao.org</code></p><p><strong>安装 nrm</strong></p><p>在命令行执行命令，npm install -g nrm，全局安装nrm。</p><p><strong>使用 nrm</strong></p><p>执行命令 nrm ls 查看可选的源。 其中，带*的是当前使用的源，上面的输出表明当前源是官方源。</p><p><strong>切换 nrm</strong></p><p>如果要切换到taobao源，执行命令nrm use taobao。</p><p><strong>测试速度</strong></p><p>你还可以通过 nrm test 测试相应源的响应时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm test</span><br></pre></td></tr></table></figure><blockquote><p> 扩展：</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220210114017616.png" alt="image-20220210114017616"></p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h6 id="03-yarn使用"><a href="#03-yarn使用" class="headerlink" title="03 yarn使用"></a>03 yarn使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对比npm:</span><br><span class="line">速度超快: Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</span><br><span class="line">    超级安全: 在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</span><br><span class="line"></span><br><span class="line">开始新项目</span><br><span class="line">yarn init </span><br><span class="line">添加依赖包</span><br><span class="line">yarn add [package] </span><br><span class="line">yarn add [package]@[version] </span><br><span class="line">yarn add [package] --dev </span><br><span class="line">升级依赖包</span><br><span class="line"> yarn upgrade [package]@[version] </span><br><span class="line">移除依赖包</span><br><span class="line"> yarn remove [package]</span><br><span class="line"> </span><br><span class="line">安装项目的全部依赖</span><br><span class="line"> yarn install </span><br></pre></td></tr></table></figure><h5 id="5-内置模块"><a href="#5-内置模块" class="headerlink" title="5.  内置模块"></a>5.  内置模块</h5><h6 id="01-http模块"><a href="#01-http模块" class="headerlink" title="01  http模块"></a>01  http模块</h6><blockquote><p>要使用 HTTP 服务器和客户端，则必须 <code>require(&#39;http&#39;)</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建本地服务器来从其接收数据</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建本地服务器来从其接收数据</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求事件</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">request, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h6 id="02-url模块"><a href="#02-url模块" class="headerlink" title="02   url模块"></a>02   url模块</h6><p><strong>02.1 parse</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlString = <span class="string">&#x27;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&#x27;</span></span><br><span class="line"><span class="keyword">const</span> parsedStr = url.parse(urlString)</span><br><span class="line"><span class="built_in">console</span>.log(parsedStr)</span><br></pre></td></tr></table></figure><p><strong>02.2 format</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlObject = &#123;</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&#x27;https:&#x27;</span>,</span><br><span class="line">  <span class="attr">slashes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">auth</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;www.baidu.com:443&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;443&#x27;</span>,</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">  <span class="attr">hash</span>: <span class="string">&#x27;#tag=110&#x27;</span>,</span><br><span class="line">  <span class="attr">search</span>: <span class="string">&#x27;?id=8&amp;name=mouse&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;mouse&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&#x27;/ad/index.html&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/ad/index.html?id=8&amp;name=mouse&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> parsedObj = url.format(urlObject)</span><br><span class="line"><span class="built_in">console</span>.log(parsedObj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>02.3 resolve</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> a = url.resolve(<span class="string">&#x27;/one/two/three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>)  ( 注意最后加/ ，不加/的区别 )</span><br><span class="line"><span class="keyword">var</span> b = url.resolve(<span class="string">&#x27;http://example.com/&#x27;</span>, <span class="string">&#x27;/one&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> c = url.resolve(<span class="string">&#x27;http://example.com/one&#x27;</span>, <span class="string">&#x27;/two&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;,&quot;</span> + c)</span><br></pre></td></tr></table></figure><h6 id="03-querystring模块"><a href="#03-querystring模块" class="headerlink" title="03  querystring模块"></a>03  querystring模块</h6><p><strong>03.1 parse</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> qs = <span class="string">&#x27;x=3&amp;y=4&#x27;</span></span><br><span class="line"><span class="keyword">var</span> parsed = querystring.parse(qs)</span><br><span class="line"><span class="built_in">console</span>.log(parsed)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>03.2 stringify</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> qo = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> parsed = querystring.stringify(qo)</span><br><span class="line"><span class="built_in">console</span>.log(parsed)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>03.3 escape/unescape</strong></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220213211406894.png" alt="image-20220213211406894" style="zoom:67%;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220213211423142.png" alt="image-20220213211423142" style="zoom:67%;" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;id=3&amp;city=北京&amp;url=https://www.baidu.com&#x27;</span></span><br><span class="line"><span class="keyword">var</span> escaped = querystring.escape(str)</span><br><span class="line"><span class="built_in">console</span>.log(escaped)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;id%3D3%26city%3D%E5%8C%97%E4%BA%AC%26url%3Dhttps%3A%2F%2Fwww.baidu.com&#x27;</span></span><br><span class="line"><span class="keyword">var</span> unescaped = querystring.unescape(str)</span><br><span class="line"><span class="built_in">console</span>.log(unescaped)</span><br></pre></td></tr></table></figure><h6 id="04-http模块补充"><a href="#04-http模块补充" class="headerlink" title="04  http模块补充"></a>04  http模块补充</h6><p><strong>04.1 接口：jsonp</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (urlObj.pathname) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/api/user&#x27;</span>:</span><br><span class="line">      res.end(<span class="string">`<span class="subst">$&#123;urlObj.query.cb&#125;</span>(&#123;&quot;name&quot;: &quot;gp145&quot;&#125;)`</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      res.end(<span class="string">&#x27;404.&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>04.2 跨域：CORS</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> urlObj = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    data += chunk</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    responseResult(querystring.parse(data))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">responseResult</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (urlObj.pathname) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;/api/login&#x27;</span>:</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          <span class="attr">message</span>: data</span><br><span class="line">        &#125;))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        res.end(<span class="string">&#x27;404.&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>04.3 模拟get</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、接口 2、跨域</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url = request.url.substr(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  response.writeHeader(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  https.get(<span class="string">`https://m.lagou.com/listmore.json<span class="subst">$&#123;url&#125;</span>`</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      data += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        <span class="attr">ret</span>: <span class="literal">true</span>,</span><br><span class="line">        data</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>04.4 模拟post：服务器提交（攻击）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postData = querystring.stringify(&#123;</span><br><span class="line">  <span class="attr">province</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">  <span class="attr">district</span>: <span class="string">&#x27;宝山区&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;同济支路199号智慧七立方3号楼2-4层&#x27;</span>,</span><br><span class="line">  <span class="attr">latitude</span>: <span class="number">43.0</span>,</span><br><span class="line">  <span class="attr">longitude</span>: <span class="number">160.0</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;求购一条小鱼&#x27;</span>,</span><br><span class="line">  <span class="attr">contact</span>: <span class="string">&#x27;13666666&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">  <span class="attr">time</span>: <span class="number">1571217561</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&#x27;https:&#x27;</span>,</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;ik9hkddr.qcloud.la&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/index.php/trade/add_item&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: Buffer.byteLength(postData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> req = https.request(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> data += chunk)</span><br><span class="line">    res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  req.write(postData)</span><br><span class="line">  req.end()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   doPost()</span></span><br><span class="line"><span class="comment">// &#125;, 1000)</span></span><br></pre></td></tr></table></figure><p><strong>04.5 爬虫</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="comment">// protocol: &#x27;https:&#x27;,</span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;i.maoyan.com&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> req = https.request(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      data += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      filterData(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filterData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//   console.log(data)</span></span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.load(data)</span><br><span class="line">    <span class="keyword">let</span> $movieList = $(<span class="string">&#x27;.column.content&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log($movieList)</span><br><span class="line">    <span class="keyword">let</span> movies = []</span><br><span class="line">    $movieList.each(<span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span><br><span class="line">      movies.push(&#123;</span><br><span class="line">        <span class="attr">title</span>: $(value).find(<span class="string">&#x27;.movie-title .title&#x27;</span>).text(),</span><br><span class="line">        <span class="attr">detail</span>: $(value).find(<span class="string">&#x27;.detail .actor&#x27;</span>).text(),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(movies))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  req.end()</span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h6 id="05-event模块"><a href="#05-event模块" class="headerlink" title="05  event模块"></a>05  event模块</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEventEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> MyEventEmitter()</span><br><span class="line"></span><br><span class="line">event.on(<span class="string">&#x27;play&#x27;</span>, <span class="function">(<span class="params">movie</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(movie)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">event.emit(<span class="string">&#x27;play&#x27;</span>, <span class="string">&#x27;我和我的祖国&#x27;</span>)</span><br><span class="line">event.emit(<span class="string">&#x27;play&#x27;</span>, <span class="string">&#x27;中国机长&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="06-fs文件操作模块"><a href="#06-fs文件操作模块" class="headerlink" title="06  fs文件操作模块"></a>06  fs文件操作模块</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件夹</span></span><br><span class="line">fs.mkdir(<span class="string">&#x27;./logs&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹改名</span></span><br><span class="line">fs.rename(<span class="string">&#x27;./logs&#x27;</span>, <span class="string">&#x27;./log&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件夹</span></span><br><span class="line">fs.rmdir(<span class="string">&#x27;./log&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写内容到文件里</span></span><br><span class="line">fs.writeFile(</span><br><span class="line">  <span class="string">&#x27;./logs/log1.txt&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="comment">// 错误优先的回调函数</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给文件追加内容</span></span><br><span class="line">fs.appendFile(<span class="string">&#x27;./logs/log1.txt&#x27;</span>, <span class="string">&#x27;\nworld&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./logs/log1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line">fs.unlink(<span class="string">&#x27;./logs/log1.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量写文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  fs.writeFile(<span class="string">`./logs/log-<span class="subst">$&#123;i&#125;</span>.txt`</span>, <span class="string">`log-<span class="subst">$&#123;i&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件/目录信息</span></span><br><span class="line">fs.readdir(<span class="string">&#x27;./&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  data.forEach(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.stat(<span class="string">`./<span class="subst">$&#123;value&#125;</span>`</span>, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(value + &#x27;:&#x27; + stats.size)</span></span><br><span class="line">      <span class="built_in">console</span>.log(value + <span class="string">&#x27; is &#x27;</span> + (stats.isDirectory() ? <span class="string">&#x27;directory&#x27;</span> : <span class="string">&#x27;file&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(<span class="string">&#x27;./logs/log-1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(content)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法一</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./logs/log-0.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(content)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法二</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).promises</span><br><span class="line">fs.readFile(<span class="string">&#x27;./logs/log-0.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>fs</code>模块中，提供同步方法是为了方便使用。那我们到底是应该用异步方法还是同步方法呢？</p><p>由于Node环境执行的JavaScript代码是服务器端代码，所以，绝大部分需要在服务器运行期反复执行业务逻辑的代码，<em>必须使用异步代码</em>，否则，同步代码在执行时期，服务器将停止响应，因为JavaScript只有一个执行线程。</p><p>服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码，因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行。</p><h6 id="07-stream流模块"><a href="#07-stream流模块" class="headerlink" title="07  stream流模块"></a>07  stream流模块</h6><p><code>stream</code>是Node.js提供的又一个仅在服务区端可用的模块，目的是支持“流”这种数据结构。</p><p>什么是流？流是一种抽象的数据结构。想象水流，当在水管中流动时，就可以从某个地方（例如自来水厂）源源不断地到达另一个地方（比如你家的洗手池）。我们也可以把数据看成是数据流，比如你敲键盘的时候，就可以把每个字符依次连起来，看成字符流。这个流是从键盘输入到应用程序，实际上它还对应着一个名字：标准输入流（stdin）。</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220407085931744.png" alt="image-20220407085931744"></p><p>如果应用程序把字符一个一个输出到显示器上，这也可以看成是一个流，这个流也有名字：标准输出流（stdout）。流的特点是数据是有序的，而且必须依次读取，或者依次写入，不能像Array那样随机定位。</p><p>有些流用来读取数据，比如从文件读取数据时，可以打开一个文件流，然后从文件流中不断地读取数据。有些流用来写入数据，比如向文件写入数据时，只需要把数据不断地往文件流中写进去就可以了。</p><p>在Node.js中，流也是一个对象，我们只需要响应流的事件就可以了：<code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开一个流:</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">&#x27;sample.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;DATA:&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;END&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ERROR: &#x27;</span> + err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要注意，<code>data</code>事件可能会有多次，每次传递的<code>chunk</code>是流的一部分数据。</p><p>要以流的形式写入文件，只需要不断调用<code>write()</code>方法，最后以<code>end()</code>结束：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ws1 = fs.createWriteStream(<span class="string">&#x27;output1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">ws1.write(<span class="string">&#x27;使用Stream写入文本数据...\n&#x27;</span>);</span><br><span class="line">ws1.write(<span class="string">&#x27;END.&#x27;</span>);</span><br><span class="line">ws1.end();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>pipe</code> 就像可以把两个水管串成一个更长的水管一样，两个流也可以串起来。一个<code>Readable</code>流和一个<code>Writable</code>流串起来后，所有的数据自动从<code>Readable</code>流进入<code>Writable</code>流，这种操作叫<code>pipe</code>。</p><p>在Node.js中，<code>Readable</code>流有一个<code>pipe()</code>方法，就是用来干这件事的。</p><p>让我们用<code>pipe()</code>把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，这实际上是一个复制文件的程序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readstream = fs.createReadStream(<span class="string">&#x27;./1.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> writestream = fs.createWriteStream(<span class="string">&#x27;./2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">readstream.pipe(writestream)</span><br></pre></td></tr></table></figure><h6 id="08-zlib"><a href="#08-zlib" class="headerlink" title="08 zlib"></a>08 zlib</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220407105916114.png" alt="image-20220407105916114" style="zoom:50%;" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.createGzip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readstream = fs.createReadStream(<span class="string">&#x27;./note.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> writestream = fs.createWriteStream(<span class="string">&#x27;./note2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">readstream</span><br><span class="line">  .pipe(gzip)</span><br><span class="line">  .pipe(writestream)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="09-crypto"><a href="#09-crypto" class="headerlink" title="09 crypto"></a>09 crypto</h6><p>crypto模块的目的是为了提供通用的加密和哈希算法。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。Nodejs用C/C++实现这些算法后，通过cypto这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。</p><p>MD5是一种常用的哈希算法，用于给任意数据一个“签名”。这个签名通常用一个十六进制的字符串表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = crypto.createHash(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可任意多次调用update():</span></span><br><span class="line">hash.update(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">hash.update(<span class="string">&#x27;Hello, nodejs!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">&#x27;hex&#x27;</span>)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>update()</code>方法默认字符串编码为<code>UTF-8</code>，也可以传入Buffer。</p><p>如果要计算SHA1，只需要把<code>&#39;md5&#39;</code>改成<code>&#39;sha1&#39;</code>，就可以得到SHA1的结果<code>1f32b9c9932c02227819a4151feed43e131aca40</code>。</p><p>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;);</span><br><span class="line"></span><br><span class="line">const hmac = crypto.createHmac(&#x27;sha256&#x27;, &#x27;secret-key&#x27;);</span><br><span class="line"></span><br><span class="line">hmac.update(&#x27;Hello, world!&#x27;);</span><br><span class="line">hmac.update(&#x27;Hello, nodejs!&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(hmac.digest(&#x27;hex&#x27;)); // 80f7e22570...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法。</p><p>AES是一种常用的对称加密算法，加解密都用同一个密钥。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span> (<span class="params">key, iv, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> decipher = crypto.createCipheriv(<span class="string">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class="line">    <span class="comment">// decipher.setAutoPadding(true);</span></span><br><span class="line">    <span class="keyword">return</span> decipher.update(data, <span class="string">&#x27;binary&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>) + decipher.final(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span> (<span class="params">key, iv, crypted</span>) </span>&#123;</span><br><span class="line">     crypted = Buffer.from(crypted, <span class="string">&#x27;hex&#x27;</span>).toString(<span class="string">&#x27;binary&#x27;</span>);</span><br><span class="line">     <span class="keyword">let</span> decipher = crypto.createDecipheriv(<span class="string">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class="line">     <span class="keyword">return</span> decipher.update(crypted, <span class="string">&#x27;binary&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>) + decipher.final(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">key,iv必须是<span class="number">16</span>个字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出，加密后的字符串通过解密又得到了原始内容。</p><h5 id="6-路由"><a href="#6-路由" class="headerlink" title="6.   路由"></a>6.   路由</h5><h6 id="01-基础"><a href="#01-基础" class="headerlink" title="01   基础"></a>01   基础</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @作者: kerwin</span></span><br><span class="line"><span class="comment"> * @公众号: 大前端私房菜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">res, path</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html;charset=utf8&quot;</span> &#125;)</span><br><span class="line">    res.write(fs.readFileSync(path, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    res.end()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = &#123;</span><br><span class="line">    <span class="string">&quot;/login&quot;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        render(res, <span class="string">&quot;./static/login.html&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;/home&quot;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        render(res, <span class="string">&quot;./static/home.html&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/404&quot;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html;charset=utf8&quot;</span> &#125;)</span><br><span class="line">        res.write(fs.readFileSync(<span class="string">&quot;./static/404.html&quot;</span>, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="02-获取参数"><a href="#02-获取参数" class="headerlink" title="02   获取参数"></a>02   获取参数</h6><p>get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;/api/login&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> myURL = <span class="keyword">new</span> URL(req.url, <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(myURL.searchParams.get(<span class="string">&quot;username&quot;</span>))   </span><br><span class="line">    render(res,<span class="string">`&#123;ok:1&#125;`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;/api/login&quot;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> post = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></span><br><span class="line">        req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">            post += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></span><br><span class="line">        req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            post = <span class="built_in">JSON</span>.parse(post);</span><br><span class="line">            render(res, <span class="string">`&#123;ok:1&#125;`</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="03-静态资源处理"><a href="#03-静态资源处理" class="headerlink" title="03   静态资源处理"></a>03   静态资源处理</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readStaticFile</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> myURL = <span class="keyword">new</span> URL(req.url, <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> filePathname = path.join(__dirname, <span class="string">&quot;/static&quot;</span>, myURL.pathname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(filePathname)) &#123;</span><br><span class="line">        <span class="comment">// console.log(1111)</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`<span class="subst">$&#123;mime.getType(myURL.pathname.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>])&#125;</span>;charset=utf8`</span> &#125;)</span><br><span class="line">        res.write(fs.readFileSync(filePathname, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        res.end()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、Express"><a href="#二、Express" class="headerlink" title="二、Express"></a>二、Express</h4><blockquote><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p></blockquote><p>基于 Node.js 平台，快速、开放、极简的 web 开发框架。</p><h5 id="1-特色"><a href="#1-特色" class="headerlink" title="1.特色"></a>1.特色</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220411103139587.png" alt="image-20220411103139587" style="zoom: 50%;float:left;" /></p><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure><h5 id="3-路由"><a href="#3-路由" class="headerlink" title="3.路由"></a>3.路由</h5><p>路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p><p>路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback…], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。</p><p>下面是一个基本的路由示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond with &quot;hello world&quot; when a GET request is made to the homepage</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配根路径的请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /about 路径的请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/about&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /random.text 路径的请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/random.text&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;random.text&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<strong>字符串模式的路由路径</strong>  <strong>（注意这个 不是 正则表达式）</strong>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配 acd 和 abcd</span></span><br><span class="line">app.get(<span class="string">&#x27;/ab?cd&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;ab?cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /ab/******</span></span><br><span class="line">app.get(<span class="string">&#x27;/ab/:id&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;aaaaaaa&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abbcd、abbbcd等</span></span><br><span class="line">app.get(<span class="string">&#x27;/ab+cd&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;ab+cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></span><br><span class="line">app.get(<span class="string">&#x27;/ab*cd&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;ab*cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /abe 和 /abcde</span></span><br><span class="line">app.get(<span class="string">&#x27;/ab(cd)?e&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> res.send(<span class="string">&#x27;ab(cd)?e&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<strong>正则表达式</strong>的路由路径示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配任何路径中含有 a 的路径：</span></span><br><span class="line">app.get(<span class="regexp">/a/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;/a/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></span><br><span class="line">app.get(<span class="regexp">/.*fly$/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;/.*fly$/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>可以为请求处理提供多个回调函数，其行为类似 中间件。</strong>唯一的区别是这些回调函数有可能调用 next(‘route’) 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/example/a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello from A!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用多个回调函数处理路由（记得指定 next 对象）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/example/b&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;response will be sent by the next function ...&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello from B!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用回调函数数组处理路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb2 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello from C!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组形式 更加的优雅</span></span><br><span class="line">app.get(<span class="string">&#x27;/example/c&#x27;</span>, [cb0, cb1, cb2])</span><br></pre></td></tr></table></figure><p><strong>混合使用函数和函数数组处理路由</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/example/d&#x27;</span>, [cb0, cb1], <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;response will be sent by the next function ...&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello from D!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-中间件"><a href="#4-中间件" class="headerlink" title="4.中间件"></a>4.中间件</h5><p>Express 是一个自身功能极简，完全是<strong>由路由和中间件构成一个的 web 开发框架</strong>：从本质上来说，<strong>一个 Express 应用就是在调用各种中间件。</strong></p><p>中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。</p><p>中间件的功能包括：</p><ul><li>执行任何代码。</li><li>修改请求和响应对象。</li><li>终结请求-响应循环。</li><li>调用堆栈中的下一个中间件。</li></ul><p>如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。</p><p>Express 应用可使用如下几种中间件：</p><ul><li>应用级中间件</li><li>路由级中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><p>使用可选则挂载路径，可在应用级别或路由级别装载中间件。另外，你还可以同时装在一系列中间件函数，从而在一个挂载点上创建一个子中间件栈。</p><h6 id="（1）应用级中间件"><a href="#（1）应用级中间件" class="headerlink" title="（1）应用级中间件"></a>（1）应用级中间件</h6><p>应用级中间件绑定到 app 对象 使用 app.use() 和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等，全部小写。例如：</p><font color="red">**不过他要注意 app.use 挂载的顺序，你不能一进来就 验证token吧，肯定要调用login 或者其他请求的时候，才开始 app.use挂载。**</font><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有挂载路径的中间件，应用的每个请求都会执行该中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time:&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="（2）路由级中间件"><a href="#（2）路由级中间件" class="headerlink" title="（2）路由级中间件"></a>（2）路由级中间件</h6><p>路由级中间件和应用级中间件一样，只是它绑定的对象为 express.Router()。</p><p>这个就是对需要挂载的路由，进行一定的拦截与验证。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有挂载路径的中间件，通过该路由的每个请求都会执行该中间件</span></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time:&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></span><br><span class="line">router.use(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果 user id 为 0, 跳到下一个路由</span></span><br><span class="line">  <span class="keyword">if</span> (req.params.id == <span class="number">0</span>) next(<span class="string">&#x27;route&#x27;</span>)</span><br><span class="line">  <span class="comment">// 负责将控制权交给栈中下一个中间件</span></span><br><span class="line">  <span class="keyword">else</span> next() <span class="comment">//</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 渲染常规页面</span></span><br><span class="line">  res.render(<span class="string">&#x27;regular&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 /user/:id， 渲染一个特殊页面</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params.id)</span><br><span class="line">  res.render(<span class="string">&#x27;special&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由挂载至应用</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><h6 id="（3）错误处理中间件"><a href="#（3）错误处理中间件" class="headerlink" title="（3）错误处理中间件"></a>（3）错误处理中间件</h6><p>错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。</p><p><strong>其肯定是放在最后的，理论上算应用级中间件的后置。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="（4）内置的中间件"><a href="#（4）内置的中间件" class="headerlink" title="（4）内置的中间件"></a>（4）内置的中间件</h6><p>express.static 是 Express 唯一内置的中间件。它基于 serve-static，负责在 Express 应用中提托管静态资源。每个应用可有多个静态目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.use(express.static(<span class="string">&#x27;uploads&#x27;</span>))</span><br><span class="line">app.use(express.static(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><h6 id="（5）第三方中间件"><a href="#（5）第三方中间件" class="headerlink" title="（5）第三方中间件"></a>（5）第三方中间件</h6><p>安装所需功能的 node 模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。</p><p>下面的例子安装并加载了一个解析 cookie 的中间件： cookie-parser</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install cookie-parser</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载用于解析 cookie 的中间件</span></span><br><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure><h5 id="5-获取请求参数"><a href="#5-获取请求参数" class="headerlink" title="5. 获取请求参数"></a>5. 获取请求参数</h5><p>get</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.query</span><br></pre></td></tr></table></figure><p>post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(express.json())</span><br><span class="line">req.body</span><br></pre></td></tr></table></figure><h5 id="6-利用-Express-托管静态文件"><a href="#6-利用-Express-托管静态文件" class="headerlink" title="6.利用 Express 托管静态文件"></a>6.利用 Express 托管静态文件</h5><p>通过 Express 内置的 express.static 可以方便地托管静态文件，例如图片、CSS、JavaScript 文件等。</p><p>将静态资源文件所在的目录作为参数传递给 express.static 中间件就可以提供静态资源文件的访问了。例如，假设在 public 目录放置了图片、CSS 和 JavaScript 文件，你就可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，public 目录下面的文件就可以访问了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/images/kitten.jpg</span></span><br><span class="line">http:<span class="comment">//localhost:3000/css/style.css</span></span><br><span class="line">http:<span class="comment">//localhost:3000/js/app.js</span></span><br><span class="line">http:<span class="comment">//localhost:3000/images/bg.png</span></span><br><span class="line">http:<span class="comment">//localhost:3000/hello.html</span></span><br></pre></td></tr></table></figure><blockquote><p>所有文件的路径都是相对于存放目录的，因此，存放静态文件的目录名不会出现在 URL 中。</p></blockquote><p>如果你的静态资源存放在多个目录下面，你可以多次调用 express.static 中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.use(express.static(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><p>访问静态资源文件时，express.static 中间件会根据目录添加的顺序查找所需的文件。</p><p>如果你希望所有通过 express.static 访问的文件都存放在一个“虚拟（virtual）”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&#x27;/static&#x27;, express.static(&#x27;public&#x27;))</span><br></pre></td></tr></table></figure><p>现在，你就可以通过带有 “/static” 前缀的地址来访问 public 目录下面的文件了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/static/images/kitten.jpg</span></span><br><span class="line">http:<span class="comment">//localhost:3000/static/css/style.css</span></span><br><span class="line">http:<span class="comment">//localhost:3000/static/js/app.js</span></span><br><span class="line">http:<span class="comment">//localhost:3000/static/images/bg.png</span></span><br><span class="line">http:<span class="comment">//localhost:3000/static/hello.html</span></span><br></pre></td></tr></table></figure><h5 id="7-服务端渲染（模板引擎）"><a href="#7-服务端渲染（模板引擎）" class="headerlink" title="7.服务端渲染（模板引擎）"></a>7.服务端渲染（模板引擎）</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220411104609389.png" alt="image-20220411104609389" style="zoom:50%;float:left" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs</span><br></pre></td></tr></table></figure><p>需要在应用中进行如下设置才能让 Express 渲染模板文件：</p><ul><li>views, 放模板文件的目录，比如： app.set(‘views’, ‘./views’)</li><li>view engine, 模板引擎，比如： app.set(‘view engine’, ‘ejs’)</li></ul><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220411104652068.png" alt="image-20220411104652068" style="zoom:50%;float:left" /></p><h4 id="三、MongoDB"><a href="#三、MongoDB" class="headerlink" title="三、MongoDB"></a>三、MongoDB</h4><h5 id="1-关系型与非关系型数据库"><a href="#1-关系型与非关系型数据库" class="headerlink" title="1.关系型与非关系型数据库"></a>1.关系型与非关系型数据库</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413085332378.png" alt="image-20220413085332378" style="zoom:67%;float:left" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090707891.png" alt="image-20220413090707891" style="zoom: 67%;float:left;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090406721.png" alt="image-20220413090406721"></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090614205.png" alt="image-20220413090614205"></p><h5 id="2-安装数据库"><a href="#2-安装数据库" class="headerlink" title="2.安装数据库"></a>2.安装数据库</h5><p><a href="https://docs.mongodb.com/manual/administration/install-community/">https://docs.mongodb.com/manual/administration/install-community/</a></p><h5 id="3-启动数据库"><a href="#3-启动数据库" class="headerlink" title="3.启动数据库"></a>3.启动数据库</h5><h6 id="（1）windows"><a href="#（1）windows" class="headerlink" title="（1）windows"></a>（1）windows</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath d:/data/db</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><h6 id="（2）mac"><a href="#（2）mac" class="headerlink" title="（2）mac"></a>（2）mac</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><h5 id="4-在命令行中操作数据库"><a href="#4-在命令行中操作数据库" class="headerlink" title="4.在命令行中操作数据库"></a>4.在命令行中操作数据库</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090814836.png" alt="image-20220413090814836" style="zoom:50%;float:left;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090825381.png" alt="image-20220413090825381" style="zoom:50%;float:left" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090837613.png" alt="image-20220413090837613" style="zoom:50%;float:left" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090858199.png" alt="image-20220413090858199" style="zoom:50%;float:left" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090907539.png" alt="image-20220413090907539" style="zoom:50%;float:left" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413090916971.png" alt="image-20220413090916971" style="zoom:50%;float:left" /></p><h5 id="5-可视化工具进行增删改查"><a href="#5-可视化工具进行增删改查" class="headerlink" title="5.可视化工具进行增删改查"></a>5.可视化工具进行增删改查</h5><p>Robomongo Robo3T adminMongo</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220413091031852.png" alt="image-20220413091031852"></p><h5 id="6-nodejs连接操作数据库"><a href="#6-nodejs连接操作数据库" class="headerlink" title="6.nodejs连接操作数据库"></a>6.nodejs连接操作数据库</h5><p>连接数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://127.0.0.1:27017/company-system&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建模型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserType = &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">introduction</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">avatar</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">role</span>:<span class="built_in">Number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> UserModel = mongoose.model(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> Schema(UserType))</span><br><span class="line"><span class="built_in">module</span>.exports  = UserModel </span><br></pre></td></tr></table></figure><p>增加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel.create(&#123;</span><br><span class="line">    introduction,username,gender,avatar,password,role</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserModel.find(&#123;<span class="attr">username</span>:<span class="string">&quot;kerwin&quot;</span>&#125;,[<span class="string">&quot;username&quot;</span>,<span class="string">&quot;role&quot;</span>,<span class="string">&quot;introduction&quot;</span>,<span class="string">&quot;password&quot;</span>]).sort(&#123;<span class="attr">createTime</span>:-<span class="number">1</span>&#125;).skip(<span class="number">10</span>).limit(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserModel.updateOne(&#123;</span><br><span class="line">    _id</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    introduction,username,gender,avatar</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserModel.deleteOne(&#123;_id&#125;)</span><br></pre></td></tr></table></figure><h4 id="四、接口规范与业务分层"><a href="#四、接口规范与业务分层" class="headerlink" title="四、接口规范与业务分层"></a>四、接口规范与业务分层</h4><h5 id="1-接口规范"><a href="#1-接口规范" class="headerlink" title="1.接口规范"></a>1.接口规范</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220414094020921.png" alt="image-20220414094020921" style="zoom: 67%; float: left;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220414094043782.png" alt="image-20220414094043782" style="zoom: 67%;float:left" /></p><h5 id="2-业务分层"><a href="#2-业务分层" class="headerlink" title="2.业务分层"></a>2.业务分层</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220414094653807.png" alt="image-20220414094653807"></p><h4 id="五、登录鉴权"><a href="#五、登录鉴权" class="headerlink" title="五、登录鉴权"></a>五、登录鉴权</h4><h5 id="1-Cookie-amp-Session"><a href="#1-Cookie-amp-Session" class="headerlink" title="1. Cookie&amp;Session"></a>1. Cookie&amp;Session</h5><p>「HTTP 无状态」<strong>我们知道，HTTP 是无状态的。也就是说，HTTP 请求方和响应方间无法维护状态，都是一次性的，它不知道前后的请求都发生了什么。但有的场景下，我们需要维护状态。最典型的，一个用户登陆微博，发布、关注、评论，都应是在登录后的用户状态下的。</strong>「标记」那解决办法是什么呢？<img src="%E7%AC%94%E8%AE%B0.assets/image-20220414095345868.png" alt="image-20220414095345868"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">&quot;connect-mongo&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&quot;this is session&quot;</span>, <span class="comment">// 服务器生成 session 的签名</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将为初始化的 session 存储</span></span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">      <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span>,<span class="comment">// 过期时间</span></span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 为 true 时候表示只有 https 协议才能访问cookie</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>: <span class="literal">true</span>, <span class="comment">//为 true 表示 超时前刷新，cookie 会重新计时； 为 false 表示在超时前刷新多少次，都是按照第一次刷新开始计时。</span></span><br><span class="line">    <span class="attr">store</span>: MongoStore.create(&#123;</span><br><span class="line">      <span class="attr">mongoUrl</span>: <span class="string">&#x27;mongodb://127.0.0.1:27017/kerwin_session&#x27;</span>,</span><br><span class="line">      <span class="attr">ttl</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span> <span class="comment">// 过期时间</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.url===<span class="string">&quot;/login&quot;</span>)&#123;</span><br><span class="line">    next()</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user)&#123;</span><br><span class="line">      req.session.garbage = <span class="built_in">Date</span>();</span><br><span class="line">      next();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     res.redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-JSON-Web-Token-JWT"><a href="#2-JSON-Web-Token-JWT" class="headerlink" title="2. JSON Web Token (JWT)"></a>2. JSON Web Token (JWT)</h5><h6 id="（1）介绍"><a href="#（1）介绍" class="headerlink" title="（1）介绍"></a>（1）介绍</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220415082822828.png" alt="image-20220415082822828"></p><p>我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220415083015066.png" alt="image-20220415083015066"></p><p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p><p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p><p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！</p><p>缺点：</p><blockquote><ol><li>占带宽，正常情况下要比 session_id 更大，需要消耗更多流量，挤占更多带宽，假如你的网站每月有 10 万次的浏览器，就意味着要多开销几十兆的流量。听起来并不多，但日积月累也是不小一笔开销。实际上，许多人会在 JWT 中存储的信息会更多；</li><li>无法在服务端注销，那么久很难解决劫持问题；</li><li>性能问题，JWT 的卖点之一就是加密签名，由于这个特性，接收方得以验证 JWT 是否有效且被信任。对于有着严格性能要求的 Web 应用，这并不理想，尤其对于单线程环境。</li></ol></blockquote><p>注意：</p><blockquote><p>CSRF攻击的原因是浏览器会自动带上cookie，而不会带上token；</p><p>以CSRF攻击为例：</p><p>cookie：用户点击了链接，cookie未失效，导致发起请求后后端以为是用户正常操作，于是进行扣款操作；<br>token：用户点击链接，由于浏览器不会自动带上token，所以即使发了请求，后端的token验证不会通过，所以不会进行扣款操作；</p></blockquote><h6 id="（2）实现"><a href="#（2）实现" class="headerlink" title="（2）实现"></a>（2）实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsonwebtoken 封装</span></span><br><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&quot;kerwin&quot;</span></span><br><span class="line"><span class="keyword">const</span> JWT = &#123;</span><br><span class="line">    <span class="function"><span class="title">generate</span>(<span class="params">value,exprires</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsonwebtoken.sign(value,secret,&#123;<span class="attr">expiresIn</span>:exprires&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">verify</span>(<span class="params">token</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> jsonwebtoken.verify(token,secret)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = JWT</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node中间件校验</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 如果token有效 ,next() </span></span><br><span class="line">  <span class="comment">// 如果token过期了, 返回401错误</span></span><br><span class="line">  <span class="keyword">if</span>(req.url===<span class="string">&quot;/login&quot;</span>)&#123;</span><br><span class="line">    next()</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = req.headers[<span class="string">&quot;authorization&quot;</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span>(token)&#123;</span><br><span class="line">    <span class="keyword">var</span> payload = JWT.verify(token)</span><br><span class="line">    <span class="comment">// console.log(payload)</span></span><br><span class="line">    <span class="keyword">if</span>(payload)&#123;</span><br><span class="line">      <span class="keyword">const</span> newToken = JWT.generate(&#123;</span><br><span class="line">        <span class="attr">_id</span>:payload._id,</span><br><span class="line">        <span class="attr">username</span>:payload.username</span><br><span class="line">      &#125;,<span class="string">&quot;1d&quot;</span>)</span><br><span class="line">      res.header(<span class="string">&quot;Authorization&quot;</span>,newToken)</span><br><span class="line">      next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.status(<span class="number">401</span>).send(&#123;<span class="attr">errCode</span>:<span class="string">&quot;-1&quot;</span>,<span class="attr">errorInfo</span>:<span class="string">&quot;token过期&quot;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//生成token</span></span><br><span class="line"><span class="keyword">const</span> token = JWT.generate(&#123;</span><br><span class="line">    <span class="attr">_id</span>: result[<span class="number">0</span>]._id,</span><br><span class="line">    <span class="attr">username</span>: result[<span class="number">0</span>].username</span><br><span class="line">&#125;, <span class="string">&quot;1d&quot;</span>)</span><br><span class="line"></span><br><span class="line">res.header(<span class="string">&quot;Authorization&quot;</span>, token)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端拦截</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @作者: kerwin</span></span><br><span class="line"><span class="comment"> * @公众号: 大前端私房菜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;authorization &#125; = response.headers</span><br><span class="line">    authorization &amp;&amp; <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;token&quot;</span>,authorization)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;status&#125; = error.response</span><br><span class="line">    <span class="keyword">if</span>(status===<span class="number">401</span>)&#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">        <span class="built_in">window</span>.location.href=<span class="string">&quot;/login&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="六、文件上传管理"><a href="#六、文件上传管理" class="headerlink" title="六、文件上传管理"></a>六、文件上传管理</h4><p>Multer 是一个 node.js 中间件，用于处理 <code>multipart/form-data</code> 类型的表单数据，它主要用于上传文件。</p><p><strong>注意</strong>: Multer 不会处理任何非 <code>multipart/form-data</code> 类型的表单数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save multer</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前后端分离-前端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> FormData()</span><br><span class="line">params.append(<span class="string">&#x27;kerwinfile&#x27;</span>, file.file)</span><br><span class="line">params.append(<span class="string">&#x27;username&#x27;</span>, <span class="built_in">this</span>.username)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">http.post(<span class="string">&#x27;/api/upload&#x27;</span>, params, config).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.imgpath = <span class="string">&#x27;http://localhost:3000&#x27;</span> + res.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Multer 会添加一个 <code>body</code> 对象 以及 <code>file</code> 或 <code>files</code> 对象 到 express 的 <code>request</code> 对象中。 <code>body</code> 对象包含表单的文本域信息，<code>file</code> 或 <code>files</code> 对象包含对象表单上传的文件信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//前后端分离-后端</span></span><br><span class="line">router.post(<span class="string">&#x27;/upload&#x27;</span>, upload.single(<span class="string">&#x27;kerwinfile&#x27;</span>),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(req.file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="七、APIDOC-API-文档生成工具"><a href="#七、APIDOC-API-文档生成工具" class="headerlink" title="七、APIDOC - API 文档生成工具"></a>七、APIDOC - API 文档生成工具</h4><p>apidoc 是一个简单的 RESTful API 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 <code>apidoc lang</code> 命令行查看所有的支持列表。</p><p>apidoc 拥有以下特点：</p><ol><li>跨平台，linux、windows、macOS 等都支持；</li><li>支持语言广泛，即使是不支持，也很方便扩展；</li><li>支持多个不同语言的多个项目生成一份文档；</li><li>输出模板可自定义；</li><li>根据文档生成 mock 数据；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g apidoc</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="%E7%AC%94%E8%AE%B0.assets/image-20220415085343339.png" alt="image-20220415085343339"></h2><p>注意：</p><p>(1) 在当前文件夹下 apidoc.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;****接口文档&quot;</span>,</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;关于****的接口文档描述&quot;</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;****&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）可以利用vscode apidoc snippets 插件创建api</p><h4 id="八、Koa2"><a href="#八、Koa2" class="headerlink" title="八、Koa2"></a>八、Koa2</h4><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220417075653414.png" alt="image-20220417075653414" style="zoom:50%;" /></p><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p><h5 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2. 快速开始"></a>2. 快速开始</h5><h6 id="2-1-安装koa2"><a href="#2-1-安装koa2" class="headerlink" title="2.1 安装koa2"></a>2.1 安装koa2</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 初始化package.json</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line"># 安装koa2 </span><br><span class="line">npm install koa</span><br></pre></td></tr></table></figure><h6 id="2-2-hello-world-代码"><a href="#2-2-hello-world-代码" class="headerlink" title="2.2 hello world 代码"></a>2.2 hello world 代码</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;hello koa2&#x27;</span> <span class="comment">//json数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220417092053231.png" alt="image-20220417092053231"></p><h6 id="2-3-启动demo"><a href="#2-3-启动demo" class="headerlink" title="2.3 启动demo"></a>2.3 启动demo</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><h5 id="3-koa-vs-express"><a href="#3-koa-vs-express" class="headerlink" title="3. koa vs express"></a>3. koa vs express</h5><p>通常都会说 Koa 是洋葱模型，这重点在于中间件的设计。但是按照上面的分析，会发现 Express 也是类似的，不同的是Express 中间件机制使用了 Callback 实现，这样如果出现异步则可能会使你在执行顺序上感到困惑，因此如果我们想做接口耗时统计、错误处理 Koa 的这种中间件模式处理起来更方便些。最后一点响应机制也很重要，Koa 不是立即响应，是整个中间件处理完成在最外层进行了响应，而 Express 则是立即响应。</p><h6 id="3-1更轻量"><a href="#3-1更轻量" class="headerlink" title="3.1更轻量"></a>3.1更轻量</h6><ul><li>koa 不提供内置的中间件；</li><li>koa 不提供路由，而是把路由这个库分离出来了（koa/router）</li></ul><h6 id="3-2-Context对象"><a href="#3-2-Context对象" class="headerlink" title="3.2 Context对象"></a>3.2 Context对象</h6><p>koa增加了一个Context的对象，作为这次请求的上下文对象（在koa2中作为中间件的第一个参数传入）。同时Context上也挂载了Request和Response两个对象。和Express类似，这两个对象都提供了大量的便捷方法辅助开发, 这样的话对于在保存一些公有的参数的话变得更加合情合理</p><h6 id="3-3-异步流程控制"><a href="#3-3-异步流程控制" class="headerlink" title="3.3 异步流程控制"></a>3.3 异步流程控制</h6><p>​    express采用callback来处理异步，    koa v1采用generator，koa v2 采用async/await。</p><p>​    generator和async/await使用同步的写法来处理异步，明显好于callback和promise，</p><h6 id="3-4-中间件模型"><a href="#3-4-中间件模型" class="headerlink" title="3.4 中间件模型"></a>3.4 中间件模型</h6><p>​    express基于connect中间件，线性模型；</p><p>​     koa中间件采用洋葱模型（对于每个中间件，在完成了一些事情后，可以非常优雅的将控制权传递给下一个中间件，并能够等待它完成，当后续的中间件完成处理后，控制权又回到了自己）</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220417083817823.png" alt="image-20220417083817823" style="zoom:50%;float:left;" /></p><p>   <img src="%E7%AC%94%E8%AE%B0.assets/image-20220417085913567.png" alt="image-20220417085913567"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    res.send(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    res.send(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve,<span class="number">1000</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    ctx.body=<span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    ctx.body=<span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;) </span><br><span class="line">app.use(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve,<span class="number">1000</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h5 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h5><h6 id="4-1基本用发"><a href="#4-1基本用发" class="headerlink" title="4.1基本用发"></a>4.1基本用发</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/list&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=[<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods())</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h6 id="4-2-router-allowedMethods作用"><a href="#4-2-router-allowedMethods作用" class="headerlink" title="4.2 router.allowedMethods作用"></a>4.2 router.allowedMethods作用</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220417102845079.png" alt="image-20220417102845079"></p><h6 id="4-3-请求方式"><a href="#4-3-请求方式" class="headerlink" title="4.3 请求方式"></a>4.3 请求方式</h6><p>Koa-router 请求方式： <code>get</code> 、 <code>put</code> 、 <code>post</code> 、 <code>patch</code> 、 <code>delete</code> 、 <code>del</code>  ，而使用方法就是 <code>router.方式()</code>  ，比如 <code>router.get()</code> 和 <code>router.post()</code> 。而 <code>router.all()</code> 会匹配所有的请求方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/user&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=[<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">.put(<span class="string">&quot;/user/:id&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;user update&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">&quot;/user&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;user post&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.del(<span class="string">&quot;/user/:id&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;user del&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods())</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h6 id="4-4-拆分路由"><a href="#4-4-拆分路由" class="headerlink" title="4.4 拆分路由"></a>4.4 拆分路由</h6><p>list.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router()</span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=[<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">.put(<span class="string">&quot;/:id&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;list update&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;list post&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.del(<span class="string">&quot;/:id&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">info</span>:<span class="string">&quot;list del&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">&quot;./user&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">require</span>(<span class="string">&quot;./list&quot;</span>)</span><br><span class="line">router.use(<span class="string">&#x27;/user&#x27;</span>, user.routes(), user.allowedMethods())</span><br><span class="line">router.use(<span class="string">&#x27;/list&#x27;</span>, list.routes(), list.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>entry入口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router/index&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods())</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h6 id="4-5-路由前缀"><a href="#4-5-路由前缀" class="headerlink" title="4.5 路由前缀"></a>4.5 路由前缀</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.prefix(<span class="string">&#x27;/api&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="4-6-路由重定向"><a href="#4-6-路由重定向" class="headerlink" title="4.6 路由重定向"></a>4.6 路由重定向</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/home&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;home页面&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//写法1 </span></span><br><span class="line">router.redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.redirect(<span class="string">&quot;/home&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-静态资源"><a href="#5-静态资源" class="headerlink" title="5.  静态资源"></a>5.  静态资源</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(</span><br><span class="line">  path.join( __dirname,  <span class="string">&quot;public&quot;</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;[demo] static-use-middleware is starting at port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-获取请求参数"><a href="#6-获取请求参数" class="headerlink" title="6.  获取请求参数"></a>6.  获取请求参数</h5><h6 id="6-1get参数"><a href="#6-1get参数" class="headerlink" title="6.1get参数"></a>6.1get参数</h6><p>在koa中，获取GET请求数据源头是koa中request对象中的query方法或querystring方法，query返回是格式化好的参数对象，querystring返回的是请求字符串，由于ctx对request的API有直接引用的方式，所以获取GET请求数据有两个途径。</p><ul><li>是从上下文中直接获取 请求对象ctx.query，返回如 { a:1, b:2 } 请求字符串 ctx.querystring，返回如 a=1&amp;b=2</li><li>是从上下文的request对象中获取 请求对象ctx.request.query，返回如 { a:1, b:2 } 请求字符串 ctx.request.querystring，返回如 a=1&amp;b=2</li></ul><h6 id="6-2post参数"><a href="#6-2post参数" class="headerlink" title="6.2post参数"></a>6.2post参数</h6><p>对于POST请求的处理，koa-bodyparser中间件可以把koa2上下文的formData数据解析到ctx.request.body中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ctx.body解析中间件</span></span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-ejs模板"><a href="#7-ejs模板" class="headerlink" title="7. ejs模板"></a>7. ejs模板</h5><h6 id="7-1-安装模块"><a href="#7-1-安装模块" class="headerlink" title="7.1 安装模块"></a>7.1 安装模块</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装koa模板使用中间件</span><br><span class="line">npm install --save koa-views</span><br><span class="line"></span><br><span class="line"># 安装ejs模板引擎</span><br><span class="line">npm install --save ejs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="7-2-使用模板引擎"><a href="#7-2-使用模板引擎" class="headerlink" title="7.2 使用模板引擎"></a>7.2 使用模板引擎</h6><p><strong>文件目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── index.js</span><br><span class="line">└── view</span><br><span class="line">    └── index.ejs</span><br></pre></td></tr></table></figure><p><strong>./index.js文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">&#x27;koa-views&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模板引擎</span></span><br><span class="line">app.use(views(path.join(__dirname, <span class="string">&#x27;./view&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">extension</span>: <span class="string">&#x27;ejs&#x27;</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> title = <span class="string">&#x27;hello koa2&#x27;</span></span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>./view/index.ejs 模板</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>EJS Welcome to &lt;%= title %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8-cookie-amp-session"><a href="#8-cookie-amp-session" class="headerlink" title="8. cookie&amp;session"></a>8. cookie&amp;session</h5><h6 id="8-1-cookie"><a href="#8-1-cookie" class="headerlink" title="8.1 cookie"></a>8.1 cookie</h6><p>koa提供了从上下文直接读取、写入cookie的方法</p><ul><li>ctx.cookies.get(name, [options]) 读取上下文请求中的cookie</li><li>ctx.cookies.set(name, value, [options]) 在上下文中写入cookie</li></ul><h6 id="8-2-session"><a href="#8-2-session" class="headerlink" title="8.2 session"></a>8.2 session</h6><ul><li><p>koa-session-minimal 适用于koa2 的session中间件，提供存储介质的读写接口 。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session-minimal&#x27;</span>)</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;SESSION_ID&#x27;</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//排除login相关的路由和接口</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.url.includes(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">await</span> next()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.session.user) &#123;</span><br><span class="line">        <span class="comment">//重新设置以下sesssion</span></span><br><span class="line">        ctx.session.mydate = <span class="built_in">Date</span>.now()</span><br><span class="line">        <span class="keyword">await</span> next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        ctx.redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="9-JWT"><a href="#9-JWT" class="headerlink" title="9. JWT"></a>9. JWT</h5>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//排除login相关的路由和接口</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.url.includes(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">await</span> next()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> token = ctx.headers[<span class="string">&quot;authorization&quot;</span>]?.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// console.log(req.headers[&quot;authorization&quot;])</span></span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        <span class="keyword">const</span> payload=  JWT.verify(token)</span><br><span class="line">        <span class="keyword">if</span>(payload)&#123;</span><br><span class="line">            <span class="comment">//重新计算token过期时间</span></span><br><span class="line">            <span class="keyword">const</span> newToken = JWT.generate(&#123;</span><br><span class="line">                <span class="attr">_id</span>:payload._id,</span><br><span class="line">                <span class="attr">username</span>:payload.username</span><br><span class="line">            &#125;,<span class="string">&quot;10s&quot;</span>)</span><br><span class="line"></span><br><span class="line">            ctx.set(<span class="string">&quot;Authorization&quot;</span>,newToken)</span><br><span class="line">            <span class="keyword">await</span> next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ctx.status = <span class="number">401</span></span><br><span class="line">            ctx.body = &#123;<span class="attr">errCode</span>:-<span class="number">1</span>,<span class="attr">errInfo</span>:<span class="string">&quot;token过期&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h5><h5 id="10-上传文件"><a href="#10-上传文件" class="headerlink" title="10.上传文件"></a>10.上传文件</h5><blockquote><p><a href="https://www.npmjs.com/package/@koa/multer">https://www.npmjs.com/package/@koa/multer</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @koa/multer multer</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;@koa/multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">&#x27;public/uploads/&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/&quot;</span>,upload.single(<span class="string">&#x27;avatar&#x27;</span>),</span><br><span class="line"><span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body,ctx.file)</span><br><span class="line">    ctx.body=&#123;</span><br><span class="line">        <span class="attr">ok</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">info</span>:<span class="string">&quot;add user success&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="11-操作MongoDB"><a href="#11-操作MongoDB" class="headerlink" title="11.操作MongoDB"></a>11.操作MongoDB</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://127.0.0.1:27017/kerwin_project&quot;</span>)</span><br><span class="line"><span class="comment">//插入集合和数据,数据库kerwin_project会自动创建</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> UserType = &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">avatar</span>:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserModel = mongoose.model(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> Schema(UserType))</span><br><span class="line"><span class="comment">// 模型user 将会对应 users 集合, </span></span><br><span class="line"><span class="built_in">module</span>.exports = UserModel</span><br></pre></td></tr></table></figure><h4 id="九、MySQL"><a href="#九、MySQL" class="headerlink" title="九、MySQL"></a>九、MySQL</h4><h5 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h5><p>付费的商用数据库：</p><ul><li>Oracle，典型的高富帅；</li><li>SQL Server，微软自家产品，Windows定制专款；</li><li>DB2，IBM的产品，听起来挺高端；</li><li>Sybase，曾经跟微软是好基友，后来关系破裂，现在家境惨淡。</li></ul><p>这些数据库都是不开源而且付费的，最大的好处是花了钱出了问题可以找厂家解决，不过在Web的世界里，常常需要部署成千上万的数据库服务器，当然不能把大把大把的银子扔给厂家，所以，无论是Google、Facebook，还是国内的BAT，无一例外都选择了免费的开源数据库：</p><ul><li>MySQL，大家都在用，一般错不了；</li><li>PostgreSQL，学术气息有点重，其实挺不错，但知名度没有MySQL高；</li><li>sqlite，嵌入式数据库，适合桌面和移动应用。</li></ul><p>作为一个JavaScript全栈工程师，选择哪个免费数据库呢？当然是MySQL。因为MySQL普及率最高，出了错，可以很容易找到解决方法。而且，围绕MySQL有一大堆监控和运维的工具，安装和使用很方便。</p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220420083146539.png" alt="image-20220420083146539"></p><h5 id="2-与非关系数据库区别"><a href="#2-与非关系数据库区别" class="headerlink" title="2.与非关系数据库区别"></a>2.与非关系数据库区别</h5><p>关系型和非关系型数据库的主要差异是数据存储的方式。关系型数据天然就是表格式的，因此存储在数据表的行和列中。数据表可以彼此关联协作存储，也很容易提取数据。</p><p>与其相反，非关系型数据不适合存储在数据表的行和列中，而是大块组合在一起。非关系型数据通常存储在数据集中，就像文档、键值对或者图结构。你的数据及其特性是选择数据存储和提取方式的首要影响因素。</p><p><strong>关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织</strong><br>优点：<br>1、易于维护：都是使用表结构，格式一致；<br>2、使用方便：SQL语言通用，可用于复杂查询；<br>3、复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。<br>缺点：<br>1、读写性能比较差，尤其是海量数据的高效率读写；<br>2、固定的表结构，灵活度稍欠；<br>3、高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</p><p><strong>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或者键值对等。</strong></p><p>优点：</p><p>1、格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。<br>2、速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；<br>3、高扩展性；<br>4、成本低：nosql数据库部署简单，基本都是开源软件。</p><p>缺点：</p><p>1、不提供sql支持；<br>2、无事务处理；<br>3、数据结构相对复杂，复杂查询方面稍欠。</p><h5 id="3-sql语句"><a href="#3-sql语句" class="headerlink" title="3.sql语句"></a>3.sql语句</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220420092527846.png" alt="image-20220420092527846"></p><p>插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students`(`id`, `name`, `score`, `gender`) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;kerwin&#x27;</span>,<span class="number">100</span>,<span class="number">1</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>可以不设置id,create_time</span><br></pre></td></tr></table></figure><p>更新：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `students` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;tiechui&#x27;</span>,`score`<span class="operator">=</span><span class="number">20</span>,`gender`<span class="operator">=</span><span class="number">0</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><br>删除：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><br>查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">查所有的数据所有的字段</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">查所有的数据某个字段</span><br><span class="line"><span class="keyword">SELECT</span> `id`, `name`, `score`, `gender` <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">条件查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> score<span class="operator">&gt;=</span><span class="number">80</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `students` <span class="keyword">where</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> gender<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">模糊查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `students` <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%k%&#x27;</span></span><br><span class="line"></span><br><span class="line">排序</span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;</span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">分页查询</span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students LIMIT <span class="number">50</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">记录条数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) kerwinnum <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line">多表查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students, classes;（这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有<span class="number">100</span>行记录的表进行笛卡尔查询将返回<span class="number">1</span>万条记录，对两个各自有<span class="number">1</span>万行记录的表进行笛卡尔查询将返回<span class="number">1</span>亿条记录）</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    students.id sid,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line"><span class="keyword">FROM</span> students, classes; （要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id sid,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c; （<span class="keyword">SQL</span>还允许给表设置一个别名）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">联表查询</span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id; （连接查询对多个表进行<span class="keyword">JOIN</span>运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220420090841742.png" alt="image-20220420090841742"></p><p>注意：</p><blockquote><ol><li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li><li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</li></ol></blockquote><p><strong>外键约束</strong></p><p>CASCADE<br>在父表上update/delete记录时，同步update/delete掉子表的匹配记录 </p><p>SET NULL<br>在父表上update/delete记录时，将子表上匹配记录的列设为null (要注意子表的外键列不能为not null)  </p><p>NO ACTION<br>如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作 </p><p>RESTRICT<br>同no action, 都是立即检查外键约束</p><h5 id="4-nodejs-操作数据库"><a href="#4-nodejs-操作数据库" class="headerlink" title="4.nodejs 操作数据库"></a>4.nodejs 操作数据库</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> mysql2 = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> config = getDBConfig()</span><br><span class="line">  <span class="keyword">const</span> promisePool = mysql2.createPool(config).promise();</span><br><span class="line">  <span class="comment">// console.log(promisePool)</span></span><br><span class="line">      <span class="keyword">let</span> user = <span class="keyword">await</span> promisePool.query(<span class="string">&#x27;select * from students&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(user)</span><br><span class="line">      <span class="keyword">if</span> (user[<span class="number">0</span>].length) &#123;</span><br><span class="line">          <span class="comment">//存在用户</span></span><br><span class="line">          res.send(user[<span class="number">0</span>])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//不存在</span></span><br><span class="line">          res.send( &#123;</span><br><span class="line">              <span class="attr">code</span>: -<span class="number">2</span>,</span><br><span class="line">              <span class="attr">msg</span>: <span class="string">&#x27;user not exsit&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;      </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDBConfig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;kerwin_test&#x27;</span>,</span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">1</span> <span class="comment">//创建一个连接池</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查询：</span><br><span class="line">promisePool.query(<span class="string">&#x27;select * from users&#x27;</span>);</span><br><span class="line"></span><br><span class="line">插入：</span><br><span class="line">promisePool.query(<span class="string">&#x27;INSERT INTO `users`(`id`,`name`,`age`, `password`) VALUES (?,?,?,?)&#x27;</span>,[<span class="literal">null</span>,<span class="string">&quot;kerwin&quot;</span>,<span class="number">100</span>,<span class="string">&quot;123456&quot;</span>]);</span><br><span class="line"></span><br><span class="line">更新：</span><br><span class="line">promisePool.query(<span class="string">`UPDATE users SET name = ? ,age=? WHERE id = ?`</span>,[<span class="string">&quot;xiaoming2&quot;</span>,<span class="number">20</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">删除：</span><br><span class="line">promisePool.query(<span class="string">`delete from users where id=?`</span>,[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十、Socket编程"><a href="#十、Socket编程" class="headerlink" title="十、Socket编程"></a>十、Socket编程</h4><h5 id="1-websocket介绍"><a href="#1-websocket介绍" class="headerlink" title="1.websocket介绍"></a>1.websocket介绍</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220421084242097.png" alt="image-20220421084242097" style="zoom:50%;" /></p><p><strong>应用场景：</strong></p><ul><li><p>弹幕</p></li><li><p>媒体聊天</p></li><li><p>协同编辑</p></li><li><p>基于位置的应用</p></li><li><p>体育实况更新</p></li><li><p>股票基金报价实时更新</p></li></ul><p>WebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。我们来看看WebSocket连接是如何创建的。</p><p>首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET ws:<span class="comment">//localhost:3000/ws/chat HTTP/1.1</span></span><br><span class="line">Host: localhost</span><br><span class="line"><span class="attr">Upgrade</span>: websocket</span><br><span class="line"><span class="attr">Connection</span>: Upgrade</span><br><span class="line"><span class="attr">Origin</span>: http:<span class="comment">//localhost:3000</span></span><br><span class="line">Sec-WebSocket-Key: client-random-string</span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span></span><br></pre></td></tr></table></figure><p>该请求和普通的HTTP请求有几点不同：</p><ol><li>GET请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址；</li><li>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为WebSocket连接；</li><li><code>Sec-WebSocket-Key</code>是用于标识这个连接，并非用于加密数据；</li><li><code>Sec-WebSocket-Version</code>指定了WebSocket的协议版本。</li></ol><p>随后，服务器如果接受该请求，就会返回如下响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: server-random-string</span><br></pre></td></tr></table></figure><p>该响应代码<code>101</code>表示本次连接的HTTP协议即将被更改，更改后的协议就是<code>Upgrade: websocket</code>指定的WebSocket协议。</p><p>版本号和子协议规定了双方能理解的数据格式，以及是否支持压缩等等。如果仅使用WebSocket的API，就不需要关心这些。</p><p>现在，一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送JSON格式的文本，这样，在浏览器处理起来就十分容易。</p><p>为什么WebSocket连接可以实现全双工通信而HTTP连接不行呢？实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。</p><p>安全的WebSocket连接机制和HTTPS类似。首先，浏览器用<code>wss://xxx</code>创建WebSocket连接时，会先通过HTTPS创建安全的连接，然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。</p><p><strong>浏览器支持</strong></p><p>很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出<code>ws://xxx</code>的请求。目前，支持WebSocket的主流浏览器如下：</p><ul><li>Chrome</li><li>Firefox</li><li>IE &gt;= 10</li><li>Sarafi &gt;= 6</li><li>Android &gt;= 4.4</li><li>iOS &gt;= 8</li></ul><p><strong>服务器支持</strong></p><p>由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。</p><h5 id="2-ws模块"><a href="#2-ws模块" class="headerlink" title="2.ws模块"></a>2.ws模块</h5><p>服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  WebSocket = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>)</span><br><span class="line">WebSocketServer = WebSocket.WebSocketServer</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params">data, isBinary</span>) </span>&#123;</span><br><span class="line">        wss.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">                client.send(data, &#123; <span class="attr">binary</span>: isBinary &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ws.send(<span class="string">&#x27;欢迎加入聊天室&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:8080&quot;</span>)</span><br><span class="line">ws.onopen = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;open&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">evt</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(evt.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权验证：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">`ws://localhost:8080?token=<span class="subst">$&#123;<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>)</span><br><span class="line">ws.onopen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;open&quot;</span>)</span><br><span class="line">      ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        <span class="attr">type</span>: WebSocketType.GroupList</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(evt.data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后端</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> JWT = <span class="built_in">require</span>(<span class="string">&#x27;../util/JWT&#x27;</span>);</span><br><span class="line">WebSocketServer = WebSocket.WebSocketServer</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws, req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> myURL = <span class="keyword">new</span> URL(req.url, <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> payload = JWT.verify(myURL.searchParams.get(<span class="string">&quot;token&quot;</span>))</span><br><span class="line">  <span class="keyword">if</span> (payload) &#123;</span><br><span class="line">    ws.user = payload</span><br><span class="line">    ws.send(createMessage(WebSocketType.GroupChat, ws.user, <span class="string">&quot;欢迎来到聊天室&quot;</span>))</span><br><span class="line"></span><br><span class="line">    sendBroadList() <span class="comment">//发送好友列表</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ws.send(createMessage(WebSocketType.Error, <span class="literal">null</span>, <span class="string">&quot;token过期&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(3333,url)</span></span><br><span class="line">  ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params">data, isBinary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> messageObj = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    <span class="keyword">switch</span> (messageObj.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> WebSocketType.GroupList:</span><br><span class="line">        ws.send(createMessage(WebSocketType.GroupList, ws.user, <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.from(wss.clients).map(<span class="function"><span class="params">item</span> =&gt;</span> item.user))))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WebSocketType.GroupChat:</span><br><span class="line">        wss.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">            client.send(createMessage(WebSocketType.GroupChat, ws.user, messageObj.data));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WebSocketType.SingleChat:</span><br><span class="line">        wss.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (client.user.username === messageObj.to &amp;&amp; client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">            client.send(createMessage(WebSocketType.SingleChat, ws.user, messageObj.data));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ws.on(<span class="string">&quot;close&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//删除当前用户</span></span><br><span class="line">      wss.clients.delete(ws.user)</span><br><span class="line">      sendBroadList() <span class="comment">//发送好用列表</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> WebSocketType = &#123;</span><br><span class="line">  <span class="attr">Error</span>: <span class="number">0</span>, <span class="comment">//错误</span></span><br><span class="line">  <span class="attr">GroupList</span>: <span class="number">1</span>,<span class="comment">//群列表</span></span><br><span class="line">  <span class="attr">GroupChat</span>: <span class="number">2</span>,<span class="comment">//群聊</span></span><br><span class="line">  <span class="attr">SingleChat</span>: <span class="number">3</span><span class="comment">//私聊</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMessage</span>(<span class="params">type, user, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="attr">type</span>: type,</span><br><span class="line">    <span class="attr">user</span>: user,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendBroadList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wss.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      client.send(createMessage(WebSocketType.GroupList, client.user, <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.from(wss.clients).map(<span class="function"><span class="params">item</span> =&gt;</span> item.user))))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-socket-io模块"><a href="#3-socket-io模块" class="headerlink" title="3.socket.io模块"></a>3.socket.io模块</h5><p>服务端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server);</span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> payload = JWT.verify(socket.handshake.query.token)</span><br><span class="line">  <span class="keyword">if</span> (payload) &#123;</span><br><span class="line">    socket.user = payload</span><br><span class="line">    socket.emit(WebSocketType.GroupChat, createMessage(socket.user, <span class="string">&quot;欢迎来到聊天室&quot;</span>))</span><br><span class="line">    sendBroadList() <span class="comment">//发送好友列表</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    socket.emit(WebSocketType.Error, createMessage(<span class="literal">null</span>, <span class="string">&quot;token过期&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  socket.on(WebSocketType.GroupList, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    socket.emit(WebSocketType.GroupList, createMessage(<span class="literal">null</span>, <span class="built_in">Array</span>.from(io.sockets.sockets).map(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="number">1</span>].user).filter(<span class="function"><span class="params">item</span>=&gt;</span>item)));</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(WebSocketType.GroupChat, <span class="function">(<span class="params">messageObj</span>) =&gt;</span> &#123;</span><br><span class="line">    socket.broadcast.emit(WebSocketType.GroupChat, createMessage(socket.user, messageObj.data));</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(WebSocketType.SingleChat, <span class="function">(<span class="params">messageObj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.from(io.sockets.sockets).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (socket[<span class="number">1</span>].user.username === messageObj.to) &#123;</span><br><span class="line">        socket[<span class="number">1</span>].emit(WebSocketType.SingleChat, createMessage(socket[<span class="number">1</span>].user, messageObj.data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">     </span><br><span class="line">     sendBroadList() <span class="comment">//发送好用列表</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendBroadList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  io.sockets.emit(WebSocketType.GroupList, createMessage(<span class="literal">null</span>, <span class="built_in">Array</span>.from(io.sockets.sockets).map(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="number">1</span>].user).filter(<span class="function"><span class="params">item</span>=&gt;</span>item)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后filter，是因为 有可能存在null的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocketType = &#123;</span><br><span class="line">    <span class="attr">Error</span>: <span class="number">0</span>, <span class="comment">//错误</span></span><br><span class="line">    <span class="attr">GroupList</span>: <span class="number">1</span>, <span class="comment">//群列表</span></span><br><span class="line">    <span class="attr">GroupChat</span>: <span class="number">2</span>, <span class="comment">//群聊</span></span><br><span class="line">    <span class="attr">SingleChat</span>: <span class="number">3</span> <span class="comment">//私聊</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">`ws://localhost:3000?token=<span class="subst">$&#123;<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>);</span><br><span class="line">socket.on(<span class="string">&quot;connect&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">socket.emit(WebSocketType.GroupList)</span><br><span class="line">&#125;)</span><br><span class="line">socket.on(WebSocketType.GroupList, <span class="function">(<span class="params">messageObj</span>) =&gt;</span> &#123;</span><br><span class="line">    select.innerHTML = <span class="string">&quot;&quot;</span></span><br><span class="line">    select.innerHTML = <span class="string">`&lt;option value=&quot;all&quot;&gt;all&lt;/option&gt;`</span> + messageObj.data.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;option value=&quot;<span class="subst">$&#123;item.username&#125;</span>&quot;&gt;<span class="subst">$&#123;item.username&#125;</span>&lt;/option&gt;`</span>).join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.on(WebSocketType.GroupChat, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.on(WebSocketType.SingleChat, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.on(WebSocketType.Error, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    location.href = <span class="string">&quot;/login&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">send.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (select.value === <span class="string">&quot;all&quot;</span>) &#123;</span><br><span class="line">        socket.emit(WebSocketType.GroupChat,&#123;</span><br><span class="line">            <span class="attr">data</span>: text.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        socket.emit(WebSocketType.SingleChat,&#123;</span><br><span class="line">            <span class="attr">data</span>: text.value,</span><br><span class="line">            <span class="attr">to</span>:select.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十一、mocha"><a href="#十一、mocha" class="headerlink" title="十一、mocha"></a>十一、mocha</h4><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><p>比如对函数abs()，我们可以编写出以下几个测试用例：</p><p>输入正数，比如1、1.2、0.99，期待返回值与输入相同；</p><p>输入负数，比如-1、-1.2、-0.99，期待返回值与输入相反；</p><p>输入0，期待返回0；</p><p>输入非数值类型，比如null、[]、{}，期待抛出Error。</p><p>把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。</p><p>如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。</p><p>单元测试通过后有什么意义呢？如果我们对abs()函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对abs()函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。</p><p>这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。</p><p>mocha是JavaScript的一种单元测试框架，既可以在浏览器环境下运行，也可以在Node.js环境下运行。</p><p>使用mocha，我们就只需要专注于编写单元测试本身，然后，让mocha去自动运行所有的测试，并给出测试结果。</p><p>mocha的特点主要有：</p><ol><li>既可以测试简单的JavaScript函数，又可以测试异步代码，因为异步是JavaScript的特性之一；</li><li>可以自动运行所有测试，也可以只运行特定的测试；</li><li>可以支持before、after、beforeEach和afterEach来编写初始化代码。</li></ol><h5 id="1-编写测试"><a href="#1-编写测试" class="headerlink" title="1.编写测试"></a>1.编写测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sum = <span class="built_in">require</span>(<span class="string">&#x27;../test&#x27;</span>);</span><br><span class="line">describe(<span class="string">&#x27;#hello.js&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">&#x27;#sum()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        it(<span class="string">&#x27;sum() should return 0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.strictEqual(sum(), <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        it(<span class="string">&#x27;sum(1) should return 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.strictEqual(sum(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        it(<span class="string">&#x27;sum(1, 2) should return 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.strictEqual(sum(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        it(<span class="string">&#x27;sum(1, 2, 3) should return 6&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.strictEqual(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2-chai断言库"><a href="#2-chai断言库" class="headerlink" title="2.chai断言库"></a>2.chai断言库</h5><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220505113605440.png" alt="image-20220505113605440"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> assert = chai.assert;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;assert Demo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;use assert lib&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        assert.typeOf(value, <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">        assert.equal(value, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        assert.lengthOf(value, <span class="number">5</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>);</span><br><span class="line">chai.should();</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;should Demo&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;use should lib&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        value.should.exist.and.equal(<span class="string">&#x27;hello&#x27;</span>).and.have.length(<span class="number">5</span>).and.be.a(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">        <span class="comment">// value.should.be.a(&#x27;string&#x27;)</span></span><br><span class="line">        <span class="comment">// value.should.equal(&#x27;hello&#x27;)</span></span><br><span class="line">        <span class="comment">// value.should.not.equal(&#x27;hello2&#x27;)</span></span><br><span class="line">        <span class="comment">// value.should.have.length(5);</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> expect = chai.expect;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;expect Demo&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;use expect lib&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> number = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        expect(number).to.be.at.most(<span class="number">5</span>)</span><br><span class="line">        expect(number).to.be.at.least(<span class="number">3</span>)</span><br><span class="line">        expect(number).to.be.within(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        expect(value).to.exist</span><br><span class="line">        expect(value).to.be.a(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">        expect(value).to.equal(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        expect(value).to.not.equal(<span class="string">&#x27;您好&#x27;</span>)</span><br><span class="line">        expect(value).to.have.length(<span class="number">5</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-异步测试"><a href="#3-异步测试" class="headerlink" title="3.异步测试"></a>3.异步测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs =<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).promises</span><br><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> expect = chai.expect;</span><br><span class="line">it(<span class="string">&#x27;test async function&#x27;</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data =<span class="keyword">await</span> fs.readFile(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    expect(data).to.equal(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-http测试"><a href="#4-http测试" class="headerlink" title="4.http测试"></a>4.http测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;../app&#x27;</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;#test koa app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> server = app.listen(<span class="number">3000</span>);</span><br><span class="line">    describe(<span class="string">&#x27;#test server&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        it(<span class="string">&#x27;#test GET /&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> request(server)</span><br><span class="line">                .get(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                .expect(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="regexp">/text\/html/</span>)</span><br><span class="line">                .expect(<span class="number">200</span>, <span class="string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            server.close()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-钩子函数"><a href="#5-钩子函数" class="headerlink" title="5.钩子函数"></a>5.钩子函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;#hello.js&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    describe(<span class="string">&#x27;#sum()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;before:&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;after.&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;  beforeEach:&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        afterEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;  afterEach.&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;Node-js-（最全）基础-全栈项目&quot;&gt;&lt;a href=&quot;#Node-js-（最全）基础-全栈项目&quot; class=&quot;headerlink&quot; title=&quot;Node.js （最全）基础+全栈项目&quot;&gt;&lt;/a&gt;Node.js （最全）基础+全</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>纯 Mock.js Vue中的操作</title>
    <link href="http://example.com/2023/03/20/%E7%BA%AF%20Mock.js%20%E6%93%8D%E4%BD%9C_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2023/03/20/%E7%BA%AF%20Mock.js%20%E6%93%8D%E4%BD%9C_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/</id>
    <published>2023-03-20T05:52:01.000Z</published>
    <updated>2023-03-20T10:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纯-Mock-js-Vue中的操作"><a href="#纯-Mock-js-Vue中的操作" class="headerlink" title="纯 Mock.js Vue中的操作"></a>纯 Mock.js Vue中的操作</h1><h2 id="步骤1：首先在-src-中创建一个-mock文件夹"><a href="#步骤1：首先在-src-中创建一个-mock文件夹" class="headerlink" title="步骤1：首先在 src 中创建一个 mock文件夹"></a>步骤1：首先在 src 中创建一个 mock文件夹</h2><p>里面创建一个 index.js (什么名称都可以)</p><p>比如我们创建如下的本地接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Mock 必须要</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 数据库 假装是个数据库</span></span><br><span class="line"><span class="keyword">const</span> &#123; newsList &#125; = Mock.mock(&#123;</span><br><span class="line">  <span class="string">&#x27;newsList|50-100&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;@increment(1)&#x27;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;@ctitle&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;@cparagraph&#x27;</span>,</span><br><span class="line">      <span class="attr">image</span>: <span class="string">&quot;@image(&#x27;200x100&#x27;, &#x27;#894FC4&#x27;, &#x27;#FFF&#x27;, &#x27;png&#x27;, &#x27;Yusi&#x27;)&quot;</span>,</span><br><span class="line">      <span class="attr">addtime</span>: <span class="string">&quot;@date(&#x27;yyyy-MM-dd hh:mm:ss&#x27;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个post 接口 用于添加数据</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/add/news&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req)</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  <span class="keyword">const</span> item = <span class="built_in">JSON</span>.parse(req.body)</span><br><span class="line">  <span class="comment">// 你看他这里其实模拟了 数据库的 添加操作</span></span><br><span class="line">  newsList.push(</span><br><span class="line">    Mock.mock(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;@increment(1)&#x27;</span>,</span><br><span class="line">      <span class="attr">title</span>: item.title,</span><br><span class="line">      <span class="attr">content</span>: item.content,</span><br><span class="line">      <span class="attr">image</span>: <span class="string">&quot;@image(&#x27;200x100&#x27;, &#x27;#894FC4&#x27;, &#x27;#FFF&#x27;, &#x27;png&#x27;, &#x27;Yusi&#x27;)&quot;</span>,</span><br><span class="line">      <span class="attr">addtime</span>: <span class="string">&quot;@date(&#x27;yyyy-MM-dd hh:mm:ss&#x27;)&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 返回一个添加成功的信息</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;新闻创建成功&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: newsList,</span><br><span class="line">    <span class="attr">total</span>: newsList.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个 接口 用于删除数据</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/remove/news&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(req.body)</span></span><br><span class="line">  <span class="keyword">const</span> item = <span class="built_in">JSON</span>.parse(req.body)</span><br><span class="line">  <span class="keyword">const</span> index = newsList.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x.id === item.id)</span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    newsList.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;新闻删除成功&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: newsList,</span><br><span class="line">    <span class="attr">total</span>: newsList.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一个 get 接口</span></span><br><span class="line">Mock.mock(<span class="string">&quot;/api/feedPost&quot;</span>,<span class="string">&quot;post&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;post 拦截&quot;</span>)</span><br><span class="line">    <span class="comment">//返回10条随机数据</span></span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&quot;data|10&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;@cname&quot;</span>,<span class="comment">//随即中文名</span></span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&quot;@cparagraph(2,3)&quot;</span>,<span class="comment">//随机段落</span></span><br><span class="line">                <span class="attr">date</span>:<span class="string">&quot;@datetime&quot;</span>,<span class="comment">//随机日期</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="步骤2：配置-main-js"><a href="#步骤2：配置-main-js" class="headerlink" title="步骤2：配置 main.js"></a>步骤2：配置 main.js</h2><p>在main.js 中你需要 引入刚才创建的文件，并且有引入 axios，我们才能进行访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中导入自定义mock文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../mock/index.js&#x27;</span>;  </span><br><span class="line"><span class="comment">// 导入axios 没有./  (axios网络请求工具:1不依赖dom,2.前后端都可以用,3. 丰富拦截,扩展功能,4可封装,复用性强)</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到vue的全局(原型上),在每个组件都可以使用 ,prototype是固定的,$axios是自定义的</span></span><br><span class="line">Vue.prototype.$axios = axios; </span><br><span class="line"></span><br><span class="line"><span class="comment">//给每个请求拦截一下，添加请求Token信息</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">config.headers.Authorization = <span class="string">&#x27;Bearer &#x27;</span> + <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="步骤3：组件中使用"><a href="#步骤3：组件中使用" class="headerlink" title="步骤3：组件中使用"></a>步骤3：组件中使用</h2><p>你可以在组件中通过 axios 对象，调用接口，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getFeed()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getFeed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用挂载在 Vm 上的 $axios 使用get方法，返回一个promise对象</span></span><br><span class="line">        <span class="built_in">this</span>.$axios.get(<span class="string">&quot;/api/feed&quot;</span>)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data)</span><br><span class="line">                <span class="built_in">console</span>.log(res.data.data[<span class="number">0</span>].name)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.test = res.data.data[<span class="number">0</span>].name</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;纯-Mock-js-Vue中的操作&quot;&gt;&lt;a href=&quot;#纯-Mock-js-Vue中的操作&quot; class=&quot;headerlink&quot; title=&quot;纯 Mock.js Vue中的操作&quot;&gt;&lt;/a&gt;纯 Mock.js Vue中的操作&lt;/h1&gt;&lt;h2 id=&quot;步骤1：首</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="MockJS" scheme="http://example.com/tags/MockJS/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://example.com/2023/03/19/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2023/03/19/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98_%E5%87%AF%E5%87%AF%E8%B6%85%E4%BA%BA%E7%89%88%E6%9C%AC/</id>
    <published>2023-03-19T15:51:03.000Z</published>
    <updated>2023-03-20T10:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><h2 id="考点1：-CND"><a href="#考点1：-CND" class="headerlink" title="考点1： CND"></a>考点1： CND</h2><h3 id="面试题：CND的原理"><a href="#面试题：CND的原理" class="headerlink" title="面试题：CND的原理"></a>面试题：CND的原理</h3><p><strong>CND的基本原理是</strong> （其和 DSN 的过程 有点关系）</p><ol><li><strong>在用户访问相对集中的地区和网络设置一些缓存服务器。</strong></li><li><strong>当用户访问网站时，利用全局的负载均衡技术将用户的访问指向距离最近的缓存服务器，由缓存服务器代替源站响应用户的访问请求。</strong></li></ol><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/CDN工作原理.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/CND原理图.png" style="zoom:50%;" /></p><p><strong>CNAME: 在域名解析中，实际上解析出来的指定域名对应的 IP 地址，或者该域名的一个 CNAME，然后再根据这个CNAME来查找对应的 IP 地址。</strong></p><p>其一般使用的场景为：</p><ul><li>使用第三方 <strong>CDN</strong> 服务，比如你想开源一些项目，给被人用</li><li>使用 <strong>CDN</strong> 进行静态资源的缓存，例如可以将自己网站的静态资源放在 CDN上。</li><li>直播传送：CDN是支持流媒体传送的</li></ul><h2 id="考点2：懒加载"><a href="#考点2：懒加载" class="headerlink" title="考点2：懒加载"></a>考点2：懒加载</h2><p>例如网页延迟加载图片数据，是一种优化网页性能的方式。</p><p>其具体表现为：</p><p><strong>如果使用图片的懒加载，就是在滚动屏幕之前，可视化区域之外的图片是不会进行加载的，再滚动屏幕到下方的时候才会加载。</strong></p><p>这样可以减少服务器返回数据的负担，并且可以一定的提高用户体验，另外防止加载过多的图片而影响其他资源文件的加载。</p><h3 id="面试题：懒加载实现的原理"><a href="#面试题：懒加载实现的原理" class="headerlink" title="面试题：懒加载实现的原理"></a>面试题：懒加载实现的原理</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/懒加载原理.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/懒加载图例.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/懒加载代码.png" style="zoom:150%;" /></p><h3 id="面试题：懒加载和预加载的区别"><a href="#面试题：懒加载和预加载的区别" class="headerlink" title="面试题：懒加载和预加载的区别"></a>面试题：懒加载和预加载的区别</h3><p>都是可以提高网页性能的方式，两个主要的区别是。</p><ul><li><p>懒加载指的是在 长网页中延迟加载图片的时机，当用户需要访问的时候，再去加载。实现的原理看上面。并且其一定程度上可以缓解服务器的响应负担。</p></li><li><p><strong>预加载指的是 所需的资源提前请求加载到本地，这样后面在需要用到的时候就直接从缓存中获取资源。</strong>通过预加载可以减少用户等待的时间。</p><p>比较常见的案例有，使用 js 中的 image 对象，通过对 image 对象来设置 src 属性，来实现图片的预加载。</p></li></ul><h2 id="考点3：回流-重排-和重绘"><a href="#考点3：回流-重排-和重绘" class="headerlink" title="考点3：回流(重排)和重绘"></a>考点3：回流(重排)和重绘</h2><h3 id="面试题：那些情况可能会导致回流"><a href="#面试题：那些情况可能会导致回流" class="headerlink" title="面试题：那些情况可能会导致回流"></a>面试题：那些情况可能会导致回流</h3><font color="blue">**回流（重排）指的是 渲染树（dom树）部分或者全部元素的尺寸、结构或者属性发生变化的时候，浏览器会重新渲染部分或者全部文档的过程。**</font>简单的说就是，你做出了一些改变影响页面元素布局的DOM操作。引起回流的操作有：- 页面的首次渲染、浏览器窗口大小变化- 某个元素内容变化、某个元素的尺寸或者位置发生变化、某个元素的字体变化- 激活CSS伪类- 查询某些属性或者调用某些方法- 添加或删除可见（也就是 display 不是 none）的 DOM 元素在触发回流的时候，由于浏览器渲染页面时基于**流式布局**的，**所以会导致周围的DOM元素重新排列**，他的影响分为全局和局部两种- 全局范围：从根节点开始，对整个 渲染树 进行重新布局- 局部范围：从渲染树的某个部分或者一个渲染对象进行重新布局### 面试题：那些情况可能会导致重绘<font color="blue">**页面中某些元素的样式发生了变化，但是不会影响到<font color="red">文档流中元素的位置</font>。浏览器单独对发生样式变化的元素进行重新绘制。**</font><p>引起重绘的操作有：</p><ul><li>color、background 相关属性：background-color、background-image等</li><li>outline 相关属性：outline-color、outline-width、text-decoration</li><li>另外还有 border-radius、visibility、box-shadow等</li></ul><p><strong>所以，当触发回流时，重排一定触发。重排触发，回流不一定触发的。</strong></p><h3 id="面试题：如何避免回流和重绘，从程序员和浏览器本身两方面都说一说？"><a href="#面试题：如何避免回流和重绘，从程序员和浏览器本身两方面都说一说？" class="headerlink" title="面试题：如何避免回流和重绘，从程序员和浏览器本身两方面都说一说？"></a>面试题：如何避免回流和重绘，从程序员和浏览器本身两方面都说一说？</h3><p><strong>程序员如何避免主要有：</strong></p><ul><li><p>不要使用 table 布局，一个改动可能整个重新布局</p></li><li><p>使用 CSS 表达式</p></li><li><p><font color="blue"><strong>使用absolute 或者 fixed，让元素脱离文档流，那他们发生变化并不会影响到其他的元素</strong></font> <strong>这个操作非常适用于 的动画，因为动画会触发很多dom操作</strong></p></li><li><p><strong>避免频繁的操作dom，可以创建一个文档片段 <code>documentFragment</code>，在它上面应用所有 DOM 操作，最后添加到文档中</strong></p></li><li><p>将元素先设置为 <code>display:none</code>，操作结束后再把它显示出来。</p><font color="red">**因为 display 为none 的元素上进行的 DOM 操作不会引发回流和重绘。**</font></li><li><p><strong>配合浏览器 的 渲染队列机制，将DOM的多个读操作放在一起，多个写操作放在一起，读写操作不穿插写。</strong></p></li></ul><p><strong>浏览器做出的努力：</strong></p><p>浏览器针对于页面的回流和重绘，做出了自身的优化 — <strong>渲染队列</strong></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/回流与重绘.png" alt=""></p><h3 id="面试题：documentFragment是什么？和直接操作-DOM-有什么区别？"><a href="#面试题：documentFragment是什么？和直接操作-DOM-有什么区别？" class="headerlink" title="面试题：documentFragment是什么？和直接操作 DOM 有什么区别？"></a>面试题：<code>documentFragment</code>是什么？和直接操作 DOM 有什么区别？</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/文档片段.png" alt=""></p><h2 id="考点4：节流和防抖"><a href="#考点4：节流和防抖" class="headerlink" title="考点4：节流和防抖"></a>考点4：节流和防抖</h2><h3 id="面试题：什么是防抖和节流？有什么区别？"><a href="#面试题：什么是防抖和节流？有什么区别？" class="headerlink" title="面试题：什么是防抖和节流？有什么区别？"></a>面试题：什么是防抖和节流？有什么区别？</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/节流和防抖的理解.png" alt=""></p><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/适用场景.png" alt=""></p><ul><li><p><strong>防抖：</strong>把中间的处理函数全部过滤掉了，<strong>只执行在规定时间内的最后一个事件</strong></p><p>比如我设置一个时间例如 200ms</p><ul><li>如果在200ms内没有再次触发事件，那么就执行对应的处理函数</li><li>如果在200ms内再次触发事件，那么当前的计时取消，重新开始计时</li></ul><p>一般是定义一个 debounce 函数，其是由闭包进行实现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 fn 也就是 我们的 事件对应的处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line"><span class="comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流：中间的处理函数被时间限制，<strong>只能在一段时间中执行一次</strong>。但是<strong>只是减少了频率</strong></p><p>一般是定义一个 throttle函数，其也是由闭包进行实现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不工作</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="考点5：图片优化"><a href="#考点5：图片优化" class="headerlink" title="考点5：图片优化"></a>考点5：图片优化</h2><h3 id="面试题：如何对项目中的图片进行优化？"><a href="#面试题：如何对项目中的图片进行优化？" class="headerlink" title="面试题：如何对项目中的图片进行优化？"></a>面试题：如何对项目中的图片进行优化？</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/图片优化.png" alt=""></p><h3 id="面试题：常见的图片格式和使用场景"><a href="#面试题：常见的图片格式和使用场景" class="headerlink" title="面试题：常见的图片格式和使用场景"></a>面试题：常见的图片格式和使用场景</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/图片格式2.png" alt=""></p><h2 id="考点6：-WebPack-优化"><a href="#考点6：-WebPack-优化" class="headerlink" title="考点6： WebPack 优化"></a>考点6： WebPack 优化</h2><h3 id="面试题：如何使用-WebPack-来优化前端性能？"><a href="#面试题：如何使用-WebPack-来优化前端性能？" class="headerlink" title="面试题：如何使用 WebPack 来优化前端性能？"></a>面试题：如何使用 WebPack 来优化前端性能？</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/webpack优化前端性能.png" alt=""></p><h3 id="面试题：如何提高-WebPack-的构建速度"><a href="#面试题：如何提高-WebPack-的构建速度" class="headerlink" title="面试题：如何提高 WebPack 的构建速度"></a>面试题：如何提高 WebPack 的构建速度</h3><p><img src="https://gitee.com/kaikai-superman/imgs/raw/master/img/webpack构建速度.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h1&gt;&lt;h2 id=&quot;考点1：-CND&quot;&gt;&lt;a href=&quot;#考点1：-CND&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端性能" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>python 处理 nii 数据 保存为png图片</title>
    <link href="http://example.com/2022/04/28/python%20%E5%A4%84%E7%90%86%20nii%20%E6%95%B0%E6%8D%AE%20%E4%BF%9D%E5%AD%98%E4%B8%BApng%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2022/04/28/python%20%E5%A4%84%E7%90%86%20nii%20%E6%95%B0%E6%8D%AE%20%E4%BF%9D%E5%AD%98%E4%B8%BApng%E5%9B%BE%E7%89%87/</id>
    <published>2022-04-28T07:30:01.000Z</published>
    <updated>2022-04-28T17:28:34.511Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="python 处理 nii 数据">TOC</a></p><p>nii 文件处理代码如下：</p><h4 id="处理代码"><a href="#处理代码" class="headerlink" title="处理代码"></a>处理代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 遍历文件夹</span></span><br><span class="line"><span class="keyword">import</span> nibabel <span class="keyword">as</span> nib  <span class="comment"># nii格式一般都会用到这个包</span></span><br><span class="line"><span class="keyword">import</span> imageio  <span class="comment"># 转换成图像</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nii_to_image</span>(<span class="params">niifile</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;F:\ISIC-2017\img.nii&#x27;</span>  <span class="comment"># 读取本代码同个文件夹下所有的nii格式的文件</span></span><br><span class="line">filenames = os.listdir(filepath)</span><br><span class="line">imgfile = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line">slice_trans = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> filenames:  <span class="comment"># 开始读取nii文件</span></span><br><span class="line">    s = f[-<span class="number">4</span>:]   <span class="comment"># 获取文件的后缀名称</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s != <span class="string">&#x27;.nii&#x27;</span>:  <span class="comment"># 文件不是 .nii为结尾的就跳过</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    s1 = f[:-<span class="number">4</span>]   <span class="comment"># 读取 .nii 文件的 文件名称  如：img</span></span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line">    imgfile_path = imgfile + s1    <span class="comment"># ./img</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;imgfile_path:&quot;</span> + imgfile_path)</span><br><span class="line">    img_path = os.path.join(filepath, f)   <span class="comment"># ./img/img.nii</span></span><br><span class="line">    img = nib.load(img_path)  <span class="comment"># 读取nii</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;img:&quot;</span>)</span><br><span class="line">    <span class="comment"># print(img)   # 里面一大堆数据</span></span><br><span class="line">    img_fdata = img.get_fdata()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(img)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**************&quot;</span>)</span><br><span class="line">    fname = f.replace(<span class="string">&#x27;.nii&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 去掉nii的后缀名</span></span><br><span class="line">    img_f_path = os.path.join(imgfile, fname)      <span class="comment"># ./img</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_f_path):    <span class="comment"># 创建nii对应的图像的文件夹</span></span><br><span class="line">        os.mkdir(img_f_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># #开始转换为图像</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.gz&#x27;</span> <span class="keyword">in</span> s1:</span><br><span class="line">        (x, y, z, _) = img.shape</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;img2:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(img.shape)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        (x, y, z) = img.shape     <span class="comment"># 里面没有 .gz的文件  z是图像的序列 一共 89张</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;img3:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(img.shape)   <span class="comment"># 例如：(512, 512, 89)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(z):  <span class="comment"># z是图像的序列</span></span><br><span class="line">        silce = img_fdata[:, :, i]  <span class="comment"># 选择哪个方向的切片都可以</span></span><br><span class="line">        imageio.imwrite(os.path.join(img_f_path, <span class="string">&#x27;&#123;&#125;_mask.png&#x27;</span>.<span class="built_in">format</span>(i)), silce)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(os.path.join(img_f_path, <span class="string">&#x27;&#123;&#125;_mask.png&#x27;</span>.<span class="built_in">format</span>(i)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;save&quot;</span>)</span><br><span class="line">        img.save(os.path.join(img_f_path, <span class="string">&#x27;&#123;&#125;_mask.png&#x27;</span>.<span class="built_in">format</span>(i)))</span><br></pre></td></tr></table></figure><h4 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h4><p>一共89张。<br><img src="https://img-blog.csdnimg.cn/img_convert/4da35b21eee0ca64e9225abeb53f8e88.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;python 处理 nii 数据&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nii 文件处理代码如下：&lt;/p&gt;
&lt;h4 id=&quot;处理代码&quot;&gt;&lt;a href=&quot;#处理代码&quot; class=&quot;headerlink&quot; title=&quot;处理代码&quot;&gt;&lt;/a&gt;处理代码&lt;/h4&gt;&lt;</summary>
      
    
    
    
    <category term="医学图像" scheme="http://example.com/categories/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F/"/>
    
    
    <category term="医学图像处理" scheme="http://example.com/tags/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>事件脉络第一次2.25</title>
    <link href="http://example.com/2022/02/25/%E4%BA%8B%E4%BB%B6%E8%84%89%E7%BB%9C%E7%AC%AC%E4%B8%80%E6%AC%A12.25/"/>
    <id>http://example.com/2022/02/25/%E4%BA%8B%E4%BB%B6%E8%84%89%E7%BB%9C%E7%AC%AC%E4%B8%80%E6%AC%A12.25/</id>
    <published>2022-02-25T13:00:00.000Z</published>
    <updated>2022-02-25T12:09:04.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件脉络介绍"><a href="#事件脉络介绍" class="headerlink" title="事件脉络介绍"></a>事件脉络介绍</h2><p>来源：</p><p>当今时代可以说是信息爆炸的时代，大大小小的事情都会引发人们的关注，而百度是我们获取新闻的第一途径，但各个事件往往展现出的信息都非常杂乱，因此就衍生出了百度事件脉络这一板块</p><p>实际：</p><p>通过对特定事件名称的检索，得到该事件的脉络，自动追溯事件的发展过程，根据时间线对热点事件的来龙去脉进行全面了解。</p><p>输入：</p><p>关于某一事件的相关新闻集合，应该是利用文本聚类(搜索等)得到的新闻簇。</p><p>输出：</p><p>事件的脉络信息，换句话说就是：给出一个重要新闻的列表，这些重要的新闻涵盖了该事件的各个重要阶段的重要信息。</p><p>如右边的图 就可以清晰的看到俄乌局势昨天的发展阶段，也就是这个方向应该做到的基本效果。</p><p>如果用于开发的话，真实的接口应该返回如图类似的json数据，包括新闻的时间、标题和链接。</p><h2 id="时间片聚类算法"><a href="#时间片聚类算法" class="headerlink" title="时间片聚类算法"></a>时间片聚类算法</h2><p>其主要的办法是 从<font color="red">新闻的外部属性（主要是分布事件和转载情况）</font>进行分析。</p><p>其前提<font color="blue">假设</font>为：在事件有重要进展的时候，一定会有一些高质量新闻的跟进报道，而且越是重要的进展情况，其报道也会越多越集中。</p><h6 id="如何寻找事件发展的主要阶段？"><a href="#如何寻找事件发展的主要阶段？" class="headerlink" title="如何寻找事件发展的主要阶段？"></a>如何寻找事件发展的主要阶段？</h6><font color="red">使用时间片聚类的方法</font> ，来发现事件发展的主要阶段+ 对每一篇新闻，抽取新闻的发布时间，按照新闻的发布时间将一个新闻事件集合内的新闻进行排列并投影到时间轴上。（根据之前的<font color="blue">假设</font>，时间轴上一定会有一段新闻密集的地方）+ 利用凝聚层次聚类方法，将时间轴分成若干个片段。将新闻聚类而分，这样我们才能明确时间的发展过程。提取每个过程的 确切新闻内容。  + 凝聚层次聚类的基本做法：其不需要指定划分的个数（因为我也不知道到底有几次发展阶段），把每篇新闻看成一个时间片段（其实是一个点），然后**每次合并距离最近的两个片段**，直到任意两个片段之间的距离都大于一个预先设定的阈值。    + 获取到时间发展过程后，则要在每个进展的新闻集合中，抽取一篇代表新闻  + 其具体的策略，可以根据具体的产品需求来定。<font color="blue">一般考虑例如：新闻来源站点是否权威，新闻的发布时间（在同一个聚类内），该新闻是否有更多的转载等等。</font>  + 如果要求更多媒体化，还可以从新闻集合中，抽取出相应的图片，视频等相关资源。#### 存在的问题一：自然时间距离问题？对于新闻来说，由于新闻发布并不是在24小时内均匀分布的，所以我们认为：在新闻发布高峰期间隔1个小时，要比在新闻发布的低谷期间隔一个小时，造成的时间跨度更长。**改进为：按照每半小时为一个小时间片，统计每个时间段内的新闻发布数，求出各个时间段新闻数占所有时间片新闻总数的比值，这个比值可以用来重新分配24小时的时间长度，计算“新闻时间距离”。**这样的效果得到了：在0点至6点之间的1个小时，在“新闻时间距离”中只有半个小时，甚至更少，而在9：00~11：00期间的一个小时，相当于2~3个小时。#### 存在的问题二：新闻集合的去噪各媒体对事件跟进报道的时效性不一，比如同样的新闻内容，新华网的报道更具时效性，在当前20:00就发布了，而一些小的新闻站点，则可能要等到第二天的9:00才发布，这样就导致描述同一阶段的新闻，往往会被分到不同的阶段中去，这样就影响了时间片聚类的效果。<font color="red">所以我们在进行时间片聚类之前，还进行了相似新闻的去重。</font><h6 id="去噪的方法"><a href="#去噪的方法" class="headerlink" title="去噪的方法"></a>去噪的方法</h6><p>对新闻集合内的新闻，进行一次相似度，如果碰到文本相似度很高的新闻，则归档在一起，以最早的那篇新闻为代表新闻，参加时间片聚类。具体的做法是：按照新闻的发布时间由远及近的顺序，计算每篇新闻与之前的新闻的文本相似度，如果相似度太高，则认为可能是重复的内容，则把这篇新闻标记为更早的新闻的转载或者相近报道。</p><h4 id="该方法总结"><a href="#该方法总结" class="headerlink" title="该方法总结"></a>该方法总结</h4><p>本方法利用了新闻媒体对新闻事件的报道行为，来挖掘出新闻事件的发展阶段以及代表新闻，从而给用户提供简单明了的新闻事件脉络。主要利用了时间片聚类算法来自动将事件划分成若干个进展阶段，然后从各个进展阶段中，抽取出代表新闻。为了改善算法，还提出了一种“新闻时间距离”的度量方法；同时，还结合了文本内容分析的手段，来对新闻集合进行精简，去噪，改善脉络抽取的效果。</p><h2 id="基于图结构方法"><a href="#基于图结构方法" class="headerlink" title="基于图结构方法"></a>基于图结构方法</h2><p>通过构建图的方法，将子事件之间的关系转换为图中结点的关系，寻找关键结点，连接关键结点得到最终的事件脉络。</p><h3 id="事件感知"><a href="#事件感知" class="headerlink" title="事件感知"></a>事件感知</h3><p>对微博数据过滤分析后，根据热点事件的关键字搜索数据库，筛选包含该关键字的微博。</p><p>首先对其进行文本预处理，根据中英文使用不同的工具或方法。预处理过程大致可包括，分词，去除停用词。</p><p>而后计算每条微博的 中每个关键词 的 TF-IDF 得分，将所有关键词的 TF-IDF 得分之和作为这条微博的 TF-IDF 得分。 然后进行排序，得分越高的与事件的相关度也就越高，从得到最后处理的库。</p><h3 id="事件脉络呈现"><a href="#事件脉络呈现" class="headerlink" title="事件脉络呈现"></a>事件脉络呈现</h3><p>分为3个子模块，构建图，寻找关键微博，连接关键微博。</p><p>整体思路是，在无向图中寻找关键结点，即关键微博。再在有向图中连接关键结点，最终得到事件脉络。</p><h4 id="如何构建图结构"><a href="#如何构建图结构" class="headerlink" title="如何构建图结构"></a>如何构建图结构</h4><p>需要构建两个图，一个有向图和一个无向图。每个结点的权值，为该结点微博与事件关键字集合Q的余弦相似度。无向图用来表示微博之间文本内容的关系，计算边时，2条微博文本之间的余弦相似度大于 一个阈值时。就用一条无向边将对应的2个结点连接起来。</p><p>有向图用来表示微博之间的时间关系，按时间顺序连接微博结点。</p><h4 id="如何选择关键结点"><a href="#如何选择关键结点" class="headerlink" title="如何选择关键结点"></a>如何选择关键结点</h4><p>如何选择关键结点 就是 如何寻找关键微博</p><p>其采用 加权相似度的方法来寻找 无向图中的关键结点。当 加权相似度越大时，表明这个结点对应的微博更具代表性，能够表示其领接结点对应微博的内容，即这个结点就是 图中的一个关键结点。</p><p>计算无向图中所有结点的加权相似度，选取其中加权相似度最大的结点作为一个关键结点。</p><p>之后采用迭代的过程，找到关键结点集合。</p><h4 id="如何链接关键结点"><a href="#如何链接关键结点" class="headerlink" title="如何链接关键结点"></a>如何链接关键结点</h4><p>在有向图中，对于任意2个关键结点，如果本来就是邻接结点，则直接连接。</p><p>如果不是的话，就需要添加过渡结点。其应该满足添加的过渡结点的加权相似度之和达到最小，</p><p>如右边的公式，</p><p>最后得到连接关键结点的边集合，即关键结点的连接结果。</p><p>给定一个过渡结点，可以体现事件一定程度的多样化，使得内容看起来更加的连贯。</p><h3 id="实验数据结果"><a href="#实验数据结果" class="headerlink" title="实验数据结果"></a>实验数据结果</h3><p>该论文爬取的数据集是 2014年 巴西世界杯的 推特数据，事件为7月14日 阿根廷与德国的实时球赛事件推特记录。大致能说清楚事件发展情况，并且存在一定的趣味事件。</p><p>但这里的趣味事件和整个事件发展，关系不大。  </p><p>并且这个数据由于本身太过于口语化，所以用户情感比较明显，对整体的事件脉络是有干扰的。</p><h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><p>这个方法在事件感知，对微博的处理方法过于单一，仅仅依靠微博中是否出现关键字来判断，过于片面。可能会漏掉一些有潜在关系的数据。</p><p>另外图求解关键结点和连接结点的复杂度理论上非常的高，实时性应该是比较差的。</p><p>另外这里只考虑到了文本属性，其他一些值的参考的评论、微博博主的权威值等其实都可以引入。</p><p>甚至是多模态的多媒体也值的参考。</p><h3 id="后续的一些问题"><a href="#后续的一些问题" class="headerlink" title="后续的一些问题"></a>后续的一些问题</h3><p>第一 如何评价事件脉络实验结果好坏？</p><p>之前看的有一篇中文文档，他是采用召回率和准确率来定量的描述。 他根据正确人工拟定的事件脉络，统计他的时间日期个数和 算法命中的日期个数 比值为召回率；同理也可以计算出准确率。</p><p>另外也有采用人调查评价是否能明白事件经过的打分情况，主观成分较大。</p><p>第二 就是这个方向的整体思路不够清晰</p><p>有之前提到的 时间片聚类的算法，构造图算法</p><p>也有后续的多模考虑的 基于关键字，基于概率，基于主题的方法。</p><p>主体上是偏向于机器学习，图论，数据挖掘。</p><p>第三就是 新闻数据集的获取问题。</p><p>做新闻类的话，可能需要爬取一些权威性较高的平台。</p><p>另外 存在多媒体，新浪微博、百度新闻等 的所谓的数据流特征不太类似，不确定使用同种方法是不是都试用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件脉络介绍&quot;&gt;&lt;a href=&quot;#事件脉络介绍&quot; class=&quot;headerlink&quot; title=&quot;事件脉络介绍&quot;&gt;&lt;/a&gt;事件脉络介绍&lt;/h2&gt;&lt;p&gt;来源：&lt;/p&gt;
&lt;p&gt;当今时代可以说是信息爆炸的时代，大大小小的事情都会引发人们的关注，而百度是我们获取新闻</summary>
      
    
    
    
    <category term="研究课题-事件脉络" scheme="http://example.com/categories/%E7%A0%94%E7%A9%B6%E8%AF%BE%E9%A2%98-%E4%BA%8B%E4%BB%B6%E8%84%89%E7%BB%9C/"/>
    
    
    <category term="事件脉络" scheme="http://example.com/tags/%E4%BA%8B%E4%BB%B6%E8%84%89%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ResNet迁移学习 之 花图像分类</title>
    <link href="http://example.com/2021/11/23/ResNet%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%20%E4%B9%8B%20%E8%8A%B1%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"/>
    <id>http://example.com/2021/11/23/ResNet%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%20%E4%B9%8B%20%E8%8A%B1%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</id>
    <published>2021-11-23T15:52:01.000Z</published>
    <updated>2021-11-26T13:25:48.163Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="ResNet迁移学习 之 花图像分类">TOC</a><br>迁移学习 (Transfer Learning) 是把已学训练好的模型参数用作新训练模型的起始参数. 迁移学习是深度学习中非常重要和常用的一个策略.</p><h1 id="为什么使用迁移学习"><a href="#为什么使用迁移学习" class="headerlink" title="为什么使用迁移学习"></a>为什么使用迁移学习</h1><p>迁移学习 (Transfer Learning) 可以帮助我们得到更好的结果.</p><ol><li>当我们手上的数据比较少的时候,<br>训练非常容易造成过拟合的现象。使用迁移学习可以帮助我们通过更少的训练数据达到更好的效果。使得模型的泛化能力更强, 训练过程更稳定。</li><li>迁移学习 (Transfer Learning) 可以帮助我们节省时间。通过迁移学习，利用前人花大量时间训练好的参数，能帮助我们在模型的训练上节省大把的时间。</li></ol><h2 id="常见的迁移学习-backbone"><a href="#常见的迁移学习-backbone" class="headerlink" title="常见的迁移学习 backbone"></a>常见的迁移学习 backbone</h2><p><a href="https://pytorch.org/vision/stable/models.html">Pytorch 迁移学习官网 API</a></p><ul><li>VGG   </li><li>ResNet </li><li>SqueezeNet </li><li>DenseNet </li><li>Inception  <a href="https://jks88995656.github.io/2021/09/21/Pytorch%20GoogleNet%E4%B8%AD%E7%9A%84Inception/">GoogleNet 中的 Inception结构</a></li><li>GoogLeNet </li><li>ShuffleNet</li><li>MobileNet</li></ul><h1 id="冻层实现"><a href="#冻层实现" class="headerlink" title="冻层实现"></a>冻层实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_parameter_requires_grad</span>(<span class="params">model, feature_extracting</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    是否保留梯度, 实现冻层  保留梯度也就是冻结层</span></span><br><span class="line"><span class="string">    :param model:模型</span></span><br><span class="line"><span class="string">    :param feature_extracting:是否冻层</span></span><br><span class="line"><span class="string">    :return:无返回值</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> feature_extracting:  <span class="comment"># 如果冻层</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():  <span class="comment"># 遍历每个权重参数</span></span><br><span class="line">            param.requires_grad = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># param.requires_grad = False的作用是:</span></span><br><span class="line">            <span class="comment"># 屏蔽预训练模型的权重。</span></span><br></pre></td></tr></table></figure><h1 id="模型初始化"><a href="#模型初始化" class="headerlink" title="模型初始化"></a>模型初始化</h1><p>ResNet模型的初始化，是冻结全连接层之前所有的层参数，并将全连接层重写为符合自己数据集的输出。例如：花图像数据集一共有102个类，所以最后的输出为102个。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_model</span>(<span class="params">model_name, num_classes, feature_extract, use_pretrained_state=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化模型</span></span><br><span class="line"><span class="string">    :param model_name: 模型名字</span></span><br><span class="line"><span class="string">    :param num_classes:  类别数</span></span><br><span class="line"><span class="string">    :param feature_extract: 是否部冻层</span></span><br><span class="line"><span class="string">    :param use_pretrained_state: 是否下载模型  为True的话为自动下载加载到模型内 为False的话就自己加载模型</span></span><br><span class="line"><span class="string">    :return: 返回模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model_ft = <span class="literal">None</span></span><br><span class="line">    input_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> model_name == <span class="string">&quot;resnet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">            原来Resnet152模型结构中最后两层为：</span></span><br><span class="line"><span class="string">                (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))</span></span><br><span class="line"><span class="string">                (fc): Linear(in_features=2048, out_features=1000, bias=True)  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.resnet152(pretrained=use_pretrained_state)  <span class="comment"># 下载参数 False就不下载 需要下面手动加</span></span><br><span class="line">        model_ft.load_state_dict(torch.load(<span class="string">&#x27;./dataset/pth/resnet152-b121ed2d.pth&#x27;</span>))  <span class="comment"># 手动加 模型参数</span></span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)  <span class="comment"># 冻层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改全连接层</span></span><br><span class="line">        num_ftrs = model_ft.fc.in_features  <span class="comment"># 获取resnet最后全连接层输入的维度 2048，默认解冻</span></span><br><span class="line">        model_ft.fc = nn.Sequential(nn.Linear(num_ftrs, num_classes),</span><br><span class="line">                                    nn.LogSoftmax(dim=<span class="number">1</span>))</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">            经过修改线性层输出的维度之后变为：</span></span><br><span class="line"><span class="string">                (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))</span></span><br><span class="line"><span class="string">                (fc): Sequential(</span></span><br><span class="line"><span class="string">                    (0): Linear(in_features=2048, out_features=102, bias=True)</span></span><br><span class="line"><span class="string">                    (1): LogSoftmax()</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line">        <span class="built_in">print</span>(model_ft)</span><br><span class="line">    <span class="keyword">return</span> model_ft, input_size</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="获取需更新参数"><a href="#获取需更新参数" class="headerlink" title="获取需更新参数"></a>获取需更新参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameter_to_update</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取需要更新的参数</span></span><br><span class="line"><span class="string">    :param model: 模型</span></span><br><span class="line"><span class="string">    :return: 需要更新的参数列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 是否训练所有层</span></span><br><span class="line">    params_to_update = model.parameters()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Params to learn:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> feature_extract:</span><br><span class="line">        params_to_update = []</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">                params_to_update.append(param)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> params_to_update</span><br></pre></td></tr></table></figure><h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><p>里面有一些API 不明白</p><ul><li><a href="https://www.jianshu.com/p/3ed11362b54f">torch.max(outputs, 1)</a> </li><li><a href="https://www.cnblogs.com/liujianing/p/13428387.html">optimizer.state_dict()</a></li><li><a href="https://www.jianshu.com/p/60fc57e19615">model.load_state_dict(best_model_wts)</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model, dataloaders, criterion, optimizer, filename, num_epochs</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    训练模型</span></span><br><span class="line"><span class="string">    :param model: 引入的权重模型</span></span><br><span class="line"><span class="string">    :param dataloaders: 导入数据 格式为dataloaders</span></span><br><span class="line"><span class="string">    :param criterion: 损失函数</span></span><br><span class="line"><span class="string">    :param optimizer: 优化器</span></span><br><span class="line"><span class="string">    :param filename: 模型名称（地址）</span></span><br><span class="line"><span class="string">    :param num_epochs: epoch数</span></span><br><span class="line"><span class="string">    :return:model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取起始时间</span></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于GPU</span></span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化参数</span></span><br><span class="line">    best_acc = <span class="number">0</span></span><br><span class="line">    val_acc_history = []</span><br><span class="line">    train_acc_history = []</span><br><span class="line">    train_loss = []</span><br><span class="line">    valid_loss = []</span><br><span class="line">    LRs = [optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]]  <span class="comment">## ？？？</span></span><br><span class="line">    best_model_wts = copy.deepcopy(model.state_dict())  <span class="comment"># 保存最好的模型权重参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num_epochs)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练和验证</span></span><br><span class="line">        <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                model.train()  <span class="comment"># 训练</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.<span class="built_in">eval</span>()  <span class="comment"># 验证</span></span><br><span class="line"></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line">            running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历数据</span></span><br><span class="line">            <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">                inputs = inputs.to(device)  <span class="comment"># inputs shape : torch.Size([16, 3, 224, 224])</span></span><br><span class="line">                labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 梯度清零</span></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 只有训练的时候计算和更新梯度</span></span><br><span class="line">                <span class="keyword">with</span> torch.set_grad_enabled(phase == <span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">                    outputs = model(inputs)  <span class="comment"># torch.Size([16, 102])</span></span><br><span class="line">                    <span class="comment"># https://www.jianshu.com/p/3ed11362b54f</span></span><br><span class="line">                    _, preds = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)  <span class="comment"># dim是max函数索引的维度0/1，0是每列的最大值，1是每行的最大值</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;preds&quot;</span>, preds)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 计算损失</span></span><br><span class="line">                    loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 训练阶段更新权重</span></span><br><span class="line">                    <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                        loss.backward()</span><br><span class="line">                        optimizer.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 计算损失</span></span><br><span class="line">                running_loss += loss.item() * inputs.size(<span class="number">0</span>)  <span class="comment"># size 表示 inputs 的形状的 第一个也就是 batch 16</span></span><br><span class="line">                running_corrects += torch.<span class="built_in">sum</span>(preds == labels.data)  <span class="comment"># 预测和实际标签一样就算上</span></span><br><span class="line"></span><br><span class="line">            epoch_loss = running_loss / <span class="built_in">len</span>(dataloaders[phase].dataset)  <span class="comment"># 这个loss的定义 ？？？</span></span><br><span class="line">            epoch_acc = running_corrects.double() / <span class="built_in">len</span>(</span><br><span class="line">                dataloaders[phase].dataset)  <span class="comment"># ???  dataloaders[phase].dataset  为什么有dataset属性 是啥呢</span></span><br><span class="line"></span><br><span class="line">            time_spend = time.time() - start  <span class="comment"># 所花费的时间 start是初始开始时间</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Time spend &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_spend // <span class="number">60</span>, time_spend % <span class="number">60</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; Loss: &#123;:.4f&#125; Acc: &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(phase, epoch_loss, epoch_acc))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 得到最好那次的模型</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span> <span class="keyword">and</span> epoch_acc &gt; best_acc:</span><br><span class="line">                best_acc = epoch_acc</span><br><span class="line">                best_model_wts = copy.deepcopy(model.state_dict())  <span class="comment"># copy当前最好模型的所有权重</span></span><br><span class="line">                state = &#123;</span><br><span class="line">                    <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),  <span class="comment"># 当前最好模型的所有权重</span></span><br><span class="line">                    <span class="string">&#x27;best_acc&#x27;</span>: best_acc,  <span class="comment"># 最好的准确率 （测试集上）</span></span><br><span class="line">                    <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),  <span class="comment"># https://www.cnblogs.com/liujianing/p/13428387.html</span></span><br><span class="line">                &#125;</span><br><span class="line">                torch.save(state, filename)  <span class="comment"># filename 保存的模型名（其实是地址）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">                val_acc_history.append(epoch_acc)</span><br><span class="line">                valid_loss.append(epoch_loss)</span><br><span class="line">                scheduler.step(epoch_loss)  <span class="comment"># ??? 更新权重参数</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                train_acc_history.append(epoch_acc)</span><br><span class="line">                train_loss.append(epoch_loss)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Optimizer learning rate : &#123;:.7f&#125;&#x27;</span>.<span class="built_in">format</span>(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]))</span><br><span class="line">        LRs.append(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>])  <span class="comment"># 添加此时的学习率</span></span><br><span class="line"></span><br><span class="line">    time_spend_all = time.time() - start  <span class="comment"># 所花费的时间 start是初始开始时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Training complete in &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_spend_all // <span class="number">60</span>, time_spend_all % <span class="number">60</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Best val Acc: &#123;:4f&#125;&#x27;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练完后用最好的一次当做模型最终的结果</span></span><br><span class="line">    model.load_state_dict(best_model_wts)  <span class="comment"># model加载 可以查看 https://www.jianshu.com/p/60fc57e19615</span></span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">return</span> model, val_acc_history, train_acc_history, valid_loss, train_loss, LRs</span><br></pre></td></tr></table></figure><h2 id="如果是仅仅微调所有参数的话"><a href="#如果是仅仅微调所有参数的话" class="headerlink" title="如果是仅仅微调所有参数的话"></a>如果是仅仅微调所有参数的话</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有全体参数的情况下  微调训练全部层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_all_layers</span>(<span class="params">num_epochs</span>):</span></span><br><span class="line">    <span class="comment"># 保存文件的名字</span></span><br><span class="line">    file_path = <span class="string">&#x27;./dataset/pth/resnet152_fc.pth&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    checkpoint = torch.load(file_path)</span><br><span class="line">    best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">    model_ft = models.resnet152(pretrained=<span class="literal">False</span>)</span><br><span class="line">    model_ft.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有参数的requires_grad 设为True 微调 训练所有层</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> model_ft.parameters():</span><br><span class="line">        param.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(model_ft.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line">    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=<span class="number">6</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    criterion = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line">    optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs = train_model(model_ft, dataloaders,</span><br><span class="line">                                                                                                criterion, optimizer,</span><br><span class="line">                                                                                                num_epoch=num_epochs,</span><br><span class="line">                                                                                                filename=<span class="string">&#x27;resnet152_all_layers.pth&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="用于最后模型测试"><a href="#用于最后模型测试" class="headerlink" title="用于最后模型测试"></a>用于最后模型测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fortest</span>():</span></span><br><span class="line">    <span class="comment"># 保存文件的名字</span></span><br><span class="line">    file_path = <span class="string">&#x27;./dataset/pth/resnet152_fc.pth&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model_ft = torch.load(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GPU模式</span></span><br><span class="line">    model_ft = model_ft.to(device)</span><br><span class="line">    <span class="comment"># 得到一个batch的测试数据</span></span><br><span class="line">    dataiter = <span class="built_in">iter</span>(dataloaders[<span class="string">&#x27;valid&#x27;</span>])</span><br><span class="line">    images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">    model_ft.<span class="built_in">eval</span>()</span><br><span class="line">    train_on_gpu = torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">if</span> train_on_gpu:</span><br><span class="line">        output = model_ft(images.cuda())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = model_ft(images)</span><br><span class="line"></span><br><span class="line">    _, preds_tensor = torch.<span class="built_in">max</span>(output, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    preds = np.squeeze(preds_tensor.numpy()) <span class="keyword">if</span> <span class="keyword">not</span> train_on_gpu <span class="keyword">else</span> np.squeeze(preds_tensor.cpu().numpy())</span><br><span class="line">    <span class="built_in">print</span>(preds)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结果展示</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">    columns = <span class="number">4</span></span><br><span class="line">    rows = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(columns * rows):</span><br><span class="line">        ax = fig.add_subplot(rows, columns, idx + <span class="number">1</span>, xticks=[], yticks=[])</span><br><span class="line">        plt.imshow(im_convert(images[idx]))</span><br><span class="line">        ax.set_title(<span class="string">&quot;&#123;&#125; (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(cat_to_name[<span class="built_in">str</span>(preds[idx])], cat_to_name[<span class="built_in">str</span>(labels[idx].item())]),</span><br><span class="line">                     color=(<span class="string">&quot;green&quot;</span> <span class="keyword">if</span> cat_to_name[<span class="built_in">str</span>(preds[idx])] == cat_to_name[<span class="built_in">str</span>(labels[idx].item())] <span class="keyword">else</span> <span class="string">&quot;red&quot;</span>))</span><br><span class="line">    plt.savefig(<span class="string">&#x27;./img_show.png&#x27;</span>)</span><br><span class="line">    plt.close(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p>一般这个部分 不同数据集是不一样的。<br>但我们需要的 数据一定是 一个 dataloader （同时其一般为 字典格式）例如： <strong>data_loader = {“train”: train_loader, “valid”: test_loader}</strong></p><p>如上面所示，所以我们一般数据集是划分为 训练集、验证集、测试集的。（但训练一般前两者即可）。</p><p>在花朵任务内：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">image_datasets, dataloaders, dataset_sizes, class_names = create_dataset(batch_size=batch_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义数据预处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片路径</span></span><br><span class="line">data_dir = <span class="string">&#x27;./dataset/flower_data/&#x27;</span></span><br><span class="line">train_dir = data_dir + <span class="string">&#x27;/train&#x27;</span></span><br><span class="line">valid_dir = data_dir + <span class="string">&#x27;/valid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取标签对应的实际名字</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dataset/flower_data/cat_to_name.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cat_to_name = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">data_transforms = &#123;</span><br><span class="line">    <span class="string">&#x27;train&#x27;</span>: transforms.Compose([transforms.RandomRotation(<span class="number">45</span>),  <span class="comment"># 随机旋转，-45到45度之间随机选</span></span><br><span class="line">                                 transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从中心开始裁剪</span></span><br><span class="line">                                 transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机水平翻转 选择一个概率概率</span></span><br><span class="line">                                 transforms.RandomVerticalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机垂直翻转</span></span><br><span class="line">                                 transforms.ColorJitter(brightness=<span class="number">0.2</span>, contrast=<span class="number">0.1</span>, saturation=<span class="number">0.1</span>, hue=<span class="number">0.1</span>),</span><br><span class="line">                                 <span class="comment"># 参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span><br><span class="line">                                 transforms.RandomGrayscale(p=<span class="number">0.025</span>),  <span class="comment"># 概率转换成灰度率，3通道就是R=G=B</span></span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])  <span class="comment"># 均值，标准差</span></span><br><span class="line">                                 ]),</span><br><span class="line">    <span class="string">&#x27;valid&#x27;</span>: transforms.Compose([transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                                 transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">                                 ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>create_dataset方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 数据集创建初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span>(<span class="params">batch_size</span>):</span></span><br><span class="line">    <span class="comment"># 数据创建初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这就类似于一个字典  &#123;&#x27;train&#x27;:./dataset/flower_data/train....,&#x27;valid&#x27;:......&#125;</span></span><br><span class="line">    image_datasets = &#123;x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) <span class="keyword">for</span> x <span class="keyword">in</span></span><br><span class="line">                      [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看一下 image_datasets 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;image_datasets&quot;</span>, image_datasets)</span><br><span class="line">    <span class="comment"># torch.utils.data.DataLoader使用方法</span></span><br><span class="line">    <span class="comment"># 数据加载器，结合了数据集和取样器，并且可以提供多个线程处理数据集。</span></span><br><span class="line">    <span class="comment"># 在训练模型时使用到此函数，用来把训练数据分成多个小组，此函数每次抛出一组数据。直至把所有的数据都抛出。就是做一个数据的初始化。</span></span><br><span class="line">    <span class="comment"># 这里同样是生成一个字典格式</span></span><br><span class="line">    dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=<span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span></span><br><span class="line">                   [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看一下dataloaders 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataloaders&quot;</span>, dataloaders)</span><br><span class="line">    <span class="comment"># 字典形式</span></span><br><span class="line">    dataset_sizes = &#123;x: <span class="built_in">len</span>(image_datasets[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line">    <span class="comment"># 查看一下 dataset_sizes 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataset_sizes&quot;</span>, dataset_sizes)</span><br><span class="line">    <span class="comment"># 返回一个list类型</span></span><br><span class="line">    class_names = image_datasets[<span class="string">&#x27;train&#x27;</span>].classes</span><br><span class="line">    <span class="keyword">return</span> image_datasets, dataloaders, dataset_sizes, class_names</span><br></pre></td></tr></table></figure><h1 id="最终Main调用顺序"><a href="#最终Main调用顺序" class="headerlink" title="最终Main调用顺序"></a>最终Main调用顺序</h1><h2 id="配置图片路径"><a href="#配置图片路径" class="headerlink" title="配置图片路径"></a>配置图片路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片路径</span></span><br><span class="line">data_dir = <span class="string">&#x27;./dataset/flower_data/&#x27;</span></span><br><span class="line">train_dir = data_dir + <span class="string">&#x27;/train&#x27;</span></span><br><span class="line">valid_dir = data_dir + <span class="string">&#x27;/valid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取标签对应的实际名字</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dataset/flower_data/cat_to_name.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cat_to_name = json.load(f)</span><br></pre></td></tr></table></figure><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>划分训练集、验证集、测试集等。并做图像增强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">data_transforms = &#123;</span><br><span class="line">    <span class="string">&#x27;train&#x27;</span>: transforms.Compose([transforms.RandomRotation(<span class="number">45</span>),  <span class="comment"># 随机旋转，-45到45度之间随机选</span></span><br><span class="line">                                 transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从中心开始裁剪</span></span><br><span class="line">                                 transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机水平翻转 选择一个概率概率</span></span><br><span class="line">                                 transforms.RandomVerticalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机垂直翻转</span></span><br><span class="line">                                 transforms.ColorJitter(brightness=<span class="number">0.2</span>, contrast=<span class="number">0.1</span>, saturation=<span class="number">0.1</span>, hue=<span class="number">0.1</span>),</span><br><span class="line">                                 <span class="comment"># 参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span><br><span class="line">                                 transforms.RandomGrayscale(p=<span class="number">0.025</span>),  <span class="comment"># 概率转换成灰度率，3通道就是R=G=B</span></span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])  <span class="comment"># 均值，标准差</span></span><br><span class="line">                                 ]),</span><br><span class="line">    <span class="string">&#x27;valid&#x27;</span>: transforms.Compose([transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                                 transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">                                 ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置超参数"><a href="#配置超参数" class="headerlink" title="配置超参数"></a>配置超参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超参数配置</span></span><br><span class="line"><span class="comment"># 是否用人家训练好的特征来做,True 为 不改变权重参数也就是冻层，False 为自己重新训练所有层的权重参数</span></span><br><span class="line">feature_extract = <span class="literal">True</span>  <span class="comment"># 冻层</span></span><br><span class="line">num_classes = <span class="number">102</span>  <span class="comment"># 输出的类别数</span></span><br><span class="line">batch_size = <span class="number">16</span>  <span class="comment"># 一次训练的样本数目</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="创建数据-DataLoader"><a href="#创建数据-DataLoader" class="headerlink" title="创建数据 DataLoader"></a>创建数据 DataLoader</h2><p>一般这都是一个整体方法。这里 分来开写了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">image_datasets, dataloaders, dataset_sizes, class_names = create_dataset(batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="获取初始化ResNet模型"><a href="#获取初始化ResNet模型" class="headerlink" title="获取初始化ResNet模型"></a>获取初始化ResNet模型</h2><p>冻结了最后一层全连接层外的所有层参数，并对最后一层线性层修改为自己的数据集样本个数输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取模型  模型冻结了部分层，最后一层线性层修改</span></span><br><span class="line">resnet152 = initialize_model(</span><br><span class="line">    model_name=<span class="string">&#x27;resnet&#x27;</span>,</span><br><span class="line">    num_classes=num_classes,</span><br><span class="line">    feature_extract=feature_extract,</span><br><span class="line">    use_pretrained=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="是否使用GPU训练"><a href="#是否使用GPU训练" class="headerlink" title="是否使用GPU训练"></a>是否使用GPU训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否使用GPU训练</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CUDA is not available.  Training on CPU ...&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CUDA is available!  Training on GPU ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="模型训练属性配置"><a href="#模型训练属性配置" class="headerlink" title="模型训练属性配置"></a>模型训练属性配置</h2><h3 id="哪些参数需要被训练"><a href="#哪些参数需要被训练" class="headerlink" title="哪些参数需要被训练"></a>哪些参数需要被训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">params_to_update = parameter_to_update(resnet152)</span><br></pre></td></tr></table></figure><h3 id="优化器、衰减器、损失函数"><a href="#优化器、衰减器、损失函数" class="headerlink" title="优化器、衰减器、损失函数"></a>优化器、衰减器、损失函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化器设置</span></span><br><span class="line">optimizer = torch.optim.Adam(params_to_update, lr=<span class="number">0.01</span>)</span><br><span class="line">scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=<span class="number">6</span>, gamma=<span class="number">0.1</span>)  <span class="comment"># 学习率每7个epoch衰减成原来的1/10</span></span><br><span class="line"><span class="comment"># 最后一层已经LogSoftmax()了，所以不能nn.CrossEntropyLoss()来计算了，nn.CrossEntropyLoss()相当于logSoftmax()和nn.NLLLoss()整合</span></span><br><span class="line">criterion = nn.NLLLoss()</span><br></pre></td></tr></table></figure><h2 id="开始ResNet预训练（最后一层线性训练）"><a href="#开始ResNet预训练（最后一层线性训练）" class="headerlink" title="开始ResNet预训练（最后一层线性训练）"></a>开始ResNet预训练（最后一层线性训练）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 开始训练</span></span><br><span class="line">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs = train_model(resnet152, dataloaders,</span><br><span class="line">                                                                                            criterion, optimizer,</span><br><span class="line">                                                                                            num_epoch=num_epochs,</span><br><span class="line">                                                                                            filename=<span class="string">&quot;resnet152_fc.pth&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微调所有ResNet参数训练"><a href="#微调所有ResNet参数训练" class="headerlink" title="微调所有ResNet参数训练"></a>微调所有ResNet参数训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_all_layers(num_epochs)</span><br></pre></td></tr></table></figure><h2 id="评估模型结果"><a href="#评估模型结果" class="headerlink" title="评估模型结果"></a>评估模型结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fortest()</span><br></pre></td></tr></table></figure><h1 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorboard <span class="keyword">import</span> summary</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, models, datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">im_convert</span>(<span class="params">tensor</span>):</span></span><br><span class="line">    <span class="comment"># 展示数据</span></span><br><span class="line">    image = tensor.to(<span class="string">&quot;cpu&quot;</span>).clone().detach()  <span class="comment"># 方法解读 https://zhuanlan.zhihu.com/p/148061684</span></span><br><span class="line">    <span class="comment"># 结论：根据上述例1~3可知，np.squeeze（）函数可以删除数组形状中的单维度条目，</span></span><br><span class="line">    <span class="comment"># 即把shape中为1的维度去掉，但是对非单维的维度不起作用。</span></span><br><span class="line">    image = image.numpy().squeeze()  <span class="comment"># 方法解读 https://blog.csdn.net/qq_38675570/article/details/80048650</span></span><br><span class="line">    <span class="comment"># 这里用np.transpose（img，(1,2,0)）</span></span><br><span class="line">    <span class="comment"># 将图片的格式由（channels,imagesize,imagesize）转化为（imagesize,imagesize,channels）,这样plt.show()就可以显示图片了。</span></span><br><span class="line">    <span class="comment"># pytorch中 最开始的应该是 维度</span></span><br><span class="line">    image = image.transpose(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 乘以标准差 加上 均值 就是 原来的图片样本值</span></span><br><span class="line">    image = image * np.array((<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)) + np.array((<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>))</span><br><span class="line">    <span class="comment"># ？？？</span></span><br><span class="line">    image = image.clip(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图片效果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>():</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">12</span>))</span><br><span class="line">    columns = <span class="number">4</span></span><br><span class="line">    rows = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为什么加了一个迭代器就这样了</span></span><br><span class="line">    dataiter = <span class="built_in">iter</span>(dataloaders[<span class="string">&#x27;valid&#x27;</span>])</span><br><span class="line">    inputs, classes = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(columns * rows):</span><br><span class="line">        ax = fig.add_subplot(rows, columns, idx + <span class="number">1</span>, xticks=[], yticks=[])</span><br><span class="line">        ax.set_title(cat_to_name[<span class="built_in">str</span>(<span class="built_in">int</span>(class_names[classes[idx]]))])  <span class="comment"># 为什么还要 先转int类型？？？</span></span><br><span class="line">        plt.imshow(im_convert(inputs[idx]))  <span class="comment"># 图片转换显示</span></span><br><span class="line">    plt.show()  <span class="comment"># 显示整个图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原版的数据获取 mnt</span></span><br><span class="line"><span class="comment"># def get_data():</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;获取数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 获取测试集</span></span><br><span class="line"><span class="comment">#     train = torchvision.datasets.CIFAR100(root=&quot;./mnt&quot;, train=True, download=True,</span></span><br><span class="line"><span class="comment">#                                           transform=torchvision.transforms.Compose([</span></span><br><span class="line"><span class="comment">#                                               torchvision.transforms.ToTensor(),  # 转换成张量</span></span><br><span class="line"><span class="comment">#                                               torchvision.transforms.Normalize((0.1307,), (0.3081,))  # 标准化</span></span><br><span class="line"><span class="comment">#                                           ]))</span></span><br><span class="line"><span class="comment">#     train_loader = DataLoader(train, batch_size=batch_size)  # 分割测试集</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 获取测试集</span></span><br><span class="line"><span class="comment">#     test = torchvision.datasets.CIFAR100(root=&quot;./mnt&quot;, train=False, download=True,</span></span><br><span class="line"><span class="comment">#                                          transform=torchvision.transforms.Compose([</span></span><br><span class="line"><span class="comment">#                                              torchvision.transforms.ToTensor(),  # 转换成张量</span></span><br><span class="line"><span class="comment">#                                              torchvision.transforms.Normalize((0.1307,), (0.3081,))  # 标准化</span></span><br><span class="line"><span class="comment">#                                          ]))</span></span><br><span class="line"><span class="comment">#     test_loader = DataLoader(test, batch_size=batch_size)  # 分割训练</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     data_loader = &#123;&quot;train&quot;: train_loader, &quot;valid&quot;: test_loader&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 返回分割好的训练集和测试集</span></span><br><span class="line"><span class="comment">#     return data_loader</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 数据集创建初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span>(<span class="params">batch_size</span>):</span></span><br><span class="line">    <span class="comment"># 数据创建初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这就类似于一个字典  &#123;&#x27;train&#x27;:./dataset/flower_data/train....,&#x27;valid&#x27;:......&#125;</span></span><br><span class="line">    image_datasets = &#123;x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) <span class="keyword">for</span> x <span class="keyword">in</span></span><br><span class="line">                      [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看一下 image_datasets 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;image_datasets&quot;</span>, image_datasets)</span><br><span class="line">    <span class="comment"># torch.utils.data.DataLoader使用方法</span></span><br><span class="line">    <span class="comment"># 数据加载器，结合了数据集和取样器，并且可以提供多个线程处理数据集。</span></span><br><span class="line">    <span class="comment"># 在训练模型时使用到此函数，用来把训练数据分成多个小组，此函数每次抛出一组数据。直至把所有的数据都抛出。就是做一个数据的初始化。</span></span><br><span class="line">    <span class="comment"># 这里同样是生成一个字典格式</span></span><br><span class="line">    dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=<span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span></span><br><span class="line">                   [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看一下dataloaders 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataloaders&quot;</span>, dataloaders)</span><br><span class="line">    <span class="comment"># 字典形式</span></span><br><span class="line">    dataset_sizes = &#123;x: <span class="built_in">len</span>(image_datasets[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line">    <span class="comment"># 查看一下 dataset_sizes 的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataset_sizes&quot;</span>, dataset_sizes)</span><br><span class="line">    <span class="comment"># 返回一个list类型</span></span><br><span class="line">    class_names = image_datasets[<span class="string">&#x27;train&#x27;</span>].classes</span><br><span class="line">    <span class="keyword">return</span> image_datasets, dataloaders, dataset_sizes, class_names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_parameter_requires_grad</span>(<span class="params">model, feature_extracting</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    是否保留梯度, 实现冻层  保留梯度也就是冻结层</span></span><br><span class="line"><span class="string">    :param model:模型</span></span><br><span class="line"><span class="string">    :param feature_extracting:是否冻层</span></span><br><span class="line"><span class="string">    :return:无返回值</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> feature_extracting:  <span class="comment"># 如果冻层</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():  <span class="comment"># 遍历每个权重参数</span></span><br><span class="line">            param.requires_grad = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># param.requires_grad = False的作用是:</span></span><br><span class="line">            <span class="comment"># 屏蔽预训练模型的权重。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_model</span>(<span class="params">model_name, num_classes, feature_extract, use_pretrained_state=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化模型</span></span><br><span class="line"><span class="string">    :param model_name: 模型名字</span></span><br><span class="line"><span class="string">    :param num_classes:  类别数</span></span><br><span class="line"><span class="string">    :param feature_extract: 是否部冻层</span></span><br><span class="line"><span class="string">    :param use_pretrained_state: 是否下载模型  为True的话为自动下载加载到模型内 为False的话就自己加载模型</span></span><br><span class="line"><span class="string">    :return: 返回模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model_ft = <span class="literal">None</span></span><br><span class="line">    input_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> model_name == <span class="string">&quot;resnet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">            原来Resnet152模型结构中最后两层为：</span></span><br><span class="line"><span class="string">                (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))</span></span><br><span class="line"><span class="string">                (fc): Linear(in_features=2048, out_features=1000, bias=True)  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.resnet152(pretrained=use_pretrained_state)  <span class="comment"># 下载参数 False就不下载 需要下面手动加</span></span><br><span class="line">        model_ft.load_state_dict(torch.load(<span class="string">&#x27;./dataset/pth/resnet152-b121ed2d.pth&#x27;</span>))  <span class="comment"># 手动加 模型参数</span></span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)  <span class="comment"># 冻层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改全连接层</span></span><br><span class="line">        num_ftrs = model_ft.fc.in_features  <span class="comment"># 获取resnet最后全连接层输入的维度 2048</span></span><br><span class="line">        model_ft.fc = nn.Sequential(nn.Linear(num_ftrs, num_classes),</span><br><span class="line">                                    nn.LogSoftmax(dim=<span class="number">1</span>))</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">            经过修改线性层输出的维度之后变为：</span></span><br><span class="line"><span class="string">                (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))</span></span><br><span class="line"><span class="string">                (fc): Sequential(</span></span><br><span class="line"><span class="string">                    (0): Linear(in_features=2048, out_features=102, bias=True)</span></span><br><span class="line"><span class="string">                    (1): LogSoftmax()</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line">        <span class="built_in">print</span>(model_ft)</span><br><span class="line">    <span class="keyword">return</span> model_ft, input_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameter_to_update</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取需要更新的参数</span></span><br><span class="line"><span class="string">    :param model: 模型</span></span><br><span class="line"><span class="string">    :return: 需要更新的参数列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 是否训练所有层</span></span><br><span class="line">    params_to_update = model.parameters()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Params to learn:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> feature_extract:</span><br><span class="line">        params_to_update = []</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">                params_to_update.append(param)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> params_to_update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model, dataloaders, criterion, optimizer, filename, num_epochs</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    训练模型</span></span><br><span class="line"><span class="string">    :param model: 引入的权重模型</span></span><br><span class="line"><span class="string">    :param dataloaders: 导入数据 格式为dataloaders</span></span><br><span class="line"><span class="string">    :param criterion: 损失函数</span></span><br><span class="line"><span class="string">    :param optimizer: 优化器</span></span><br><span class="line"><span class="string">    :param filename: 模型名称（地址）</span></span><br><span class="line"><span class="string">    :param num_epochs: epoch数</span></span><br><span class="line"><span class="string">    :return:model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取起始时间</span></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于GPU</span></span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化参数</span></span><br><span class="line">    best_acc = <span class="number">0</span></span><br><span class="line">    val_acc_history = []</span><br><span class="line">    train_acc_history = []</span><br><span class="line">    train_loss = []</span><br><span class="line">    valid_loss = []</span><br><span class="line">    LRs = [optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]]  <span class="comment">## ？？？</span></span><br><span class="line">    best_model_wts = copy.deepcopy(model.state_dict())  <span class="comment"># 保存最好的模型权重参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num_epochs)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练和验证</span></span><br><span class="line">        <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                model.train()  <span class="comment"># 训练</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.<span class="built_in">eval</span>()  <span class="comment"># 验证</span></span><br><span class="line"></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line">            running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历数据</span></span><br><span class="line">            <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">                inputs = inputs.to(device)  <span class="comment"># inputs shape : torch.Size([16, 3, 224, 224])</span></span><br><span class="line">                labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 梯度清零</span></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 只有训练的时候计算和更新梯度</span></span><br><span class="line">                <span class="keyword">with</span> torch.set_grad_enabled(phase == <span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">                    outputs = model(inputs)  <span class="comment"># torch.Size([16, 102])</span></span><br><span class="line">                    <span class="comment"># https://www.jianshu.com/p/3ed11362b54f</span></span><br><span class="line">                    _, preds = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)  <span class="comment"># dim是max函数索引的维度0/1，0是每列的最大值，1是每行的最大值</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;preds&quot;</span>, preds)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 计算损失</span></span><br><span class="line">                    loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 训练阶段更新权重</span></span><br><span class="line">                    <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                        loss.backward()</span><br><span class="line">                        optimizer.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 计算损失</span></span><br><span class="line">                running_loss += loss.item() * inputs.size(<span class="number">0</span>)  <span class="comment"># size 表示 inputs 的形状的 第一个也就是 batch 16</span></span><br><span class="line">                running_corrects += torch.<span class="built_in">sum</span>(preds == labels.data)  <span class="comment"># 预测和实际标签一样就算上</span></span><br><span class="line"></span><br><span class="line">            epoch_loss = running_loss / <span class="built_in">len</span>(dataloaders[phase].dataset)  <span class="comment"># 这个loss的定义 ？？？</span></span><br><span class="line">            epoch_acc = running_corrects.double() / <span class="built_in">len</span>(</span><br><span class="line">                dataloaders[phase].dataset)  <span class="comment"># ???  dataloaders[phase].dataset  为什么有dataset属性 是啥呢</span></span><br><span class="line"></span><br><span class="line">            time_spend = time.time() - start  <span class="comment"># 所花费的时间 start是初始开始时间</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Time spend &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_spend // <span class="number">60</span>, time_spend % <span class="number">60</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; Loss: &#123;:.4f&#125; Acc: &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(phase, epoch_loss, epoch_acc))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 得到最好那次的模型</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span> <span class="keyword">and</span> epoch_acc &gt; best_acc:</span><br><span class="line">                best_acc = epoch_acc</span><br><span class="line">                best_model_wts = copy.deepcopy(model.state_dict())  <span class="comment"># copy当前最好模型的所有权重</span></span><br><span class="line">                state = &#123;</span><br><span class="line">                    <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),  <span class="comment"># 当前最好模型的所有权重</span></span><br><span class="line">                    <span class="string">&#x27;best_acc&#x27;</span>: best_acc,  <span class="comment"># 最好的准确率 （测试集上）</span></span><br><span class="line">                    <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),  <span class="comment"># https://www.cnblogs.com/liujianing/p/13428387.html</span></span><br><span class="line">                &#125;</span><br><span class="line">                torch.save(state, filename)  <span class="comment"># filename 保存的模型名（其实是地址）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">                val_acc_history.append(epoch_acc)</span><br><span class="line">                valid_loss.append(epoch_loss)</span><br><span class="line">                scheduler.step(epoch_loss)  <span class="comment"># ??? 更新权重参数</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                train_acc_history.append(epoch_acc)</span><br><span class="line">                train_loss.append(epoch_loss)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Optimizer learning rate : &#123;:.7f&#125;&#x27;</span>.<span class="built_in">format</span>(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]))</span><br><span class="line">        LRs.append(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>])  <span class="comment"># 添加此时的学习率</span></span><br><span class="line"></span><br><span class="line">    time_spend_all = time.time() - start  <span class="comment"># 所花费的时间 start是初始开始时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Training complete in &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_spend_all // <span class="number">60</span>, time_spend_all % <span class="number">60</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Best val Acc: &#123;:4f&#125;&#x27;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练完后用最好的一次当做模型最终的结果</span></span><br><span class="line">    model.load_state_dict(best_model_wts)  <span class="comment"># model加载 可以查看 https://www.jianshu.com/p/60fc57e19615</span></span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">return</span> model, val_acc_history, train_acc_history, valid_loss, train_loss, LRs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有全体参数的情况下  微调训练全部层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_all_layers</span>(<span class="params">num_epochs</span>):</span></span><br><span class="line">    <span class="comment"># 保存文件的名字</span></span><br><span class="line">    file_path = <span class="string">&#x27;./dataset/pth/resnet152_fc.pth&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    checkpoint = torch.load(file_path)</span><br><span class="line">    best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">    model_ft = models.resnet152(pretrained=<span class="literal">False</span>)</span><br><span class="line">    model_ft.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有参数的requires_grad 设为True 微调 训练所有层</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> model_ft.parameters():</span><br><span class="line">        param.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(model_ft.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line">    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=<span class="number">6</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    criterion = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line">    optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs = train_model(model_ft, dataloaders,</span><br><span class="line">                                                                                                criterion, optimizer,</span><br><span class="line">                                                                                                num_epoch=num_epochs,</span><br><span class="line">                                                                                                filename=<span class="string">&#x27;resnet152_all_layers.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fortest</span>():</span></span><br><span class="line">    <span class="comment"># 保存文件的名字</span></span><br><span class="line">    file_path = <span class="string">&#x27;./dataset/pth/resnet152_fc.pth&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model_ft = torch.load(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GPU模式</span></span><br><span class="line">    model_ft = model_ft.to(device)</span><br><span class="line">    <span class="comment"># 得到一个batch的测试数据</span></span><br><span class="line">    dataiter = <span class="built_in">iter</span>(dataloaders[<span class="string">&#x27;valid&#x27;</span>])</span><br><span class="line">    images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">    model_ft.<span class="built_in">eval</span>()</span><br><span class="line">    train_on_gpu = torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">if</span> train_on_gpu:</span><br><span class="line">        output = model_ft(images.cuda())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = model_ft(images)</span><br><span class="line"></span><br><span class="line">    _, preds_tensor = torch.<span class="built_in">max</span>(output, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    preds = np.squeeze(preds_tensor.numpy()) <span class="keyword">if</span> <span class="keyword">not</span> train_on_gpu <span class="keyword">else</span> np.squeeze(preds_tensor.cpu().numpy())</span><br><span class="line">    <span class="built_in">print</span>(preds)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结果展示</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">    columns = <span class="number">4</span></span><br><span class="line">    rows = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(columns * rows):</span><br><span class="line">        ax = fig.add_subplot(rows, columns, idx + <span class="number">1</span>, xticks=[], yticks=[])</span><br><span class="line">        plt.imshow(im_convert(images[idx]))</span><br><span class="line">        ax.set_title(<span class="string">&quot;&#123;&#125; (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(cat_to_name[<span class="built_in">str</span>(preds[idx])], cat_to_name[<span class="built_in">str</span>(labels[idx].item())]),</span><br><span class="line">                     color=(<span class="string">&quot;green&quot;</span> <span class="keyword">if</span> cat_to_name[<span class="built_in">str</span>(preds[idx])] == cat_to_name[<span class="built_in">str</span>(labels[idx].item())] <span class="keyword">else</span> <span class="string">&quot;red&quot;</span>))</span><br><span class="line">    plt.savefig(<span class="string">&#x27;./img_show.png&#x27;</span>)</span><br><span class="line">    plt.close(fig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    plt.switch_backend(<span class="string">&#x27;agg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    配置图片路径以及数据预处理</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 图片路径</span></span><br><span class="line">    data_dir = <span class="string">&#x27;./dataset/flower_data/&#x27;</span></span><br><span class="line">    train_dir = data_dir + <span class="string">&#x27;/train&#x27;</span></span><br><span class="line">    valid_dir = data_dir + <span class="string">&#x27;/valid&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取标签对应的实际名字</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dataset/flower_data/cat_to_name.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cat_to_name = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据预处理</span></span><br><span class="line">    data_transforms = &#123;</span><br><span class="line">        <span class="string">&#x27;train&#x27;</span>: transforms.Compose([transforms.RandomRotation(<span class="number">45</span>),  <span class="comment"># 随机旋转，-45到45度之间随机选</span></span><br><span class="line">                                     transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从中心开始裁剪</span></span><br><span class="line">                                     transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机水平翻转 选择一个概率概率</span></span><br><span class="line">                                     transforms.RandomVerticalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 随机垂直翻转</span></span><br><span class="line">                                     transforms.ColorJitter(brightness=<span class="number">0.2</span>, contrast=<span class="number">0.1</span>, saturation=<span class="number">0.1</span>, hue=<span class="number">0.1</span>),</span><br><span class="line">                                     <span class="comment"># 参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span><br><span class="line">                                     transforms.RandomGrayscale(p=<span class="number">0.025</span>),  <span class="comment"># 概率转换成灰度率，3通道就是R=G=B</span></span><br><span class="line">                                     transforms.ToTensor(),</span><br><span class="line">                                     transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])  <span class="comment"># 均值，标准差</span></span><br><span class="line">                                     ]),</span><br><span class="line">        <span class="string">&#x27;valid&#x27;</span>: transforms.Compose([transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                                     transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                     transforms.ToTensor(),</span><br><span class="line">                                     transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">                                     ]),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 超参数配置</span></span><br><span class="line">    <span class="comment"># 是否用人家训练好的特征来做,True 为 不改变权重参数也就是冻层，False 为自己重新训练所有层的权重参数</span></span><br><span class="line">    feature_extract = <span class="literal">True</span>  <span class="comment"># 冻层</span></span><br><span class="line">    num_classes = <span class="number">102</span>  <span class="comment"># 输出的类别数</span></span><br><span class="line">    batch_size = <span class="number">16</span>  <span class="comment"># 一次训练的样本数目</span></span><br><span class="line">    num_epochs = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建数据</span></span><br><span class="line">    image_datasets, dataloaders, dataset_sizes, class_names = create_dataset(batch_size=batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 获取模型  模型冻结了部分层，最后一层线性层修改</span></span><br><span class="line">    resnet152 = initialize_model(</span><br><span class="line">        model_name=<span class="string">&#x27;resnet&#x27;</span>,</span><br><span class="line">        num_classes=num_classes,</span><br><span class="line">        feature_extract=feature_extract,</span><br><span class="line">        use_pretrained=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否使用GPU训练</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CUDA is not available.  Training on CPU ...&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CUDA is available!  Training on GPU ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出网络结构</span></span><br><span class="line">    <span class="built_in">print</span>(summary(resnet152, (<span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练参数</span></span><br><span class="line">    params_to_update = parameter_to_update(resnet152)</span><br><span class="line">    <span class="comment"># model_ft = model_ft.to(device)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优化器设置</span></span><br><span class="line">    optimizer = torch.optim.Adam(params_to_update, lr=<span class="number">0.01</span>)</span><br><span class="line">    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=<span class="number">6</span>, gamma=<span class="number">0.1</span>)  <span class="comment"># 学习率每7个epoch衰减成原来的1/10</span></span><br><span class="line">    <span class="comment"># 最后一层已经LogSoftmax()了，所以不能nn.CrossEntropyLoss()来计算了，nn.CrossEntropyLoss()相当于logSoftmax()和nn.NLLLoss()整合</span></span><br><span class="line">    criterion = nn.NLLLoss()</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 开始训练</span></span><br><span class="line">    model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs = train_model(resnet152, dataloaders,</span><br><span class="line">                                                                                                criterion, optimizer,</span><br><span class="line">                                                                                                num_epoch=num_epochs,</span><br><span class="line">                                                                                                filename=<span class="string">&quot;resnet152_fc.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_all_layers(num_epochs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估模型结果</span></span><br><span class="line">    fortest()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="博客参考"><a href="#博客参考" class="headerlink" title="博客参考"></a>博客参考</h1><p><a href="https://www.jb51.net/article/222221.htm">PyTorch一小时掌握之ResNet迁移学习篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;ResNet迁移学习 之 花图像分类&quot;&gt;TOC&lt;/a&gt;&lt;br&gt;迁移学习 (Transfer Learning) 是把已学训练好的模型参数用作新训练模型的起始参数. 迁移学习是深度学习中非常重要和常用的一个策略.&lt;/p&gt;
&lt;h1 id=&quot;为什么使用迁移学习</summary>
      
    
    
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="ResNet" scheme="http://example.com/tags/ResNet/"/>
    
    <category term="迁移学习" scheme="http://example.com/tags/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ResNet</title>
    <link href="http://example.com/2021/11/20/ResNet/"/>
    <id>http://example.com/2021/11/20/ResNet/</id>
    <published>2021-11-20T15:52:01.000Z</published>
    <updated>2021-11-26T13:26:02.431Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="ResNet">TOC</a></p><h1 id="ResNet解决-网络退化问题"><a href="#ResNet解决-网络退化问题" class="headerlink" title="ResNet解决 网络退化问题"></a>ResNet解决 网络退化问题</h1><p>从经验来看，网络的深度对模型的性能至关重要，当增加网络层数后，网络可以进行更加复杂的特征模式的提取，所以当模型更深时理论上可以取得更好的结果。但研究表明，加深网络深度，会出现网络准确度 饱和甚至下降的情况，如下图1所示。 这个现象被称为 <font color="red">网络退化现象 </font><br><img src="https://img-blog.csdnimg.cn/img_convert/a4362ebe13d4e05ed73f84e3fea663d0.png#pic_center" alt="图1：20层和56层在CIFAR-10数据集上的训练error表现"><br>那网络退化问题是过拟合导致的么？当然不是，因为网络越深理论上提取特征的能力越强，越不容易过拟合。如上图1所示，56层的网络误差整体都比26层的高。</p><p>所以其从本质上看，其实是模型深度越大，其训练不动的情况。换句话说他可能存在<strong>一定的梯度消失问题</strong>，导致高深度网络难以训练。也就是，现在的网络训练方式肯定有点问题，让深度网络很难的反向传播找到一组很好的参数。</p><h1 id="ResNet-残差学习"><a href="#ResNet-残差学习" class="headerlink" title="ResNet 残差学习"></a>ResNet 残差学习</h1><p>其实网络退化的现象可以通俗的理解为，一个小孩报了更多的班，然而成绩还下降了。我们的目的应该是最起码报的班可能没作用，但是不至于成绩还下降了。</p><p>基于这个想法，现在我们有一个浅层网络，我们想通过堆积更多的层次来建立深层网络，一个极端的情况就是这些新的层可能作用都不起，仅仅复制了浅层网络的特征（也就是不至于退步），这样的新层可以被称为 <font color="red">恒等映射 Identity mapping </font></p><p>在ResNet中，何大佬想到了利用之前的 机器学习的残差 和 跳跃（短路）连接 来实现一种新的结构。</p><blockquote><p>机器学习的<strong>残差</strong>，其实就是预测值和标签值之间的距离。我们的目的其实是让预测毕竟真实的标签值。如下图2所示，大括号的部分就是所谓的残差。<br><img src="https://img-blog.csdnimg.cn/img_convert/4978f970591937eed026ea8b6992c338.png#pic_center" alt="图2：何为残差？"></p></blockquote><p>何大佬的具体想法是，对于一个堆集层结构。当输入为 $x$ 时其学习到的特征记作 $H(x)$ ，而我们要 <strong>学习的部分为 残差</strong>  $F(x) = H(x)-x$，这样原始的学习特征为 $F(x)+x$。 <font color="red">为什么这么设计？</font> <font color="purple">因为残差学习相比原始特征的直接学习容易得多。</font>  如下图3所示，为残差结构：<br><img src="https://img-blog.csdnimg.cn/img_convert/41e7e4a3768e9840bbca32443df7aa67.png#pic_center" alt="图3 残差结构"><br>当残差为0时，此时堆积层仅仅做了恒等映射，至少网络性能不会下降，实际上残差不会为0，这也会使得堆积层在输入特征基础上学习到新的特征，从而拥有更好的性能。</p><h2 id="为什么残差学习更容易？"><a href="#为什么残差学习更容易？" class="headerlink" title="为什么残差学习更容易？"></a>为什么残差学习更容易？</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/b1c4a0899a120d761099b2add95c77da.png#pic_center" alt="图4 为什么残差学习更容易？"></p><h1 id="ResNet的网络结构"><a href="#ResNet的网络结构" class="headerlink" title="ResNet的网络结构"></a>ResNet的网络结构</h1><p>ResNet网络是参考了 VGG19 网络，在其基础上进行了修改，并通过短路机制加入了残差单元，如图4所示。变化主要体现在 ResNet 直接使用 stride=2 的卷积做下采样，并且用 global average pool 层替换了全连接层。</p><p>ResNet 的一个重要设计原则是：当 feature map 大小降低一半时，feature map的数量增加一倍，这保持了网络层的复杂度。从图4中可以看到，ResNet相比普通网络每两层间增加了短路机制，这就形成了残差学习，其中虚线表示feature map数量发生了改变。图4展示的34-layer的ResNet，还可以构建更深的网络如表1所示。从表1中可以看到，对于18-layer和34-layer的ResNet，其进行的两层间的残差学习，当网络更深时，其进行的是三层间的残差学习，三层卷积核分别是1x1，3x3和1x1，一个值得注意的是隐含层的feature map数量是比较小的，并且是输出feature map数量的1/4。<br><img src="https://img-blog.csdnimg.cn/img_convert/f2f0cda5c64aad9bd20d77d4a67a3019.png#pic_center" alt="图4 ResNet网络结构图"><br><img src="https://img-blog.csdnimg.cn/img_convert/f110d29b9825b218ceb06b6b1263c539.png#pic_center" alt="表1 不同深度的ResNet"></p><blockquote><p>为什么ResNet50 明明模型深很多但是 参数量却和ResNet34差不多呢？<br>因为 ResNet50采用的为bottleneck残差模块。那为什么用这个模块呢？ 又因为通道数比较大，比如64直接通过变成256的。<br>相当于4倍，如果我们还是使用3×3的卷积的话，那计算复杂度会高很多。 （这也是用到1×1的优势）可以看一下 Inception 里 描述 1×1的优势 <a href="https://jks88995656.github.io/2021/09/21/Pytorch%20GoogleNet%E4%B8%AD%E7%9A%84Inception/">Inception</a></p></blockquote><p>下面我们再分析一下残差单元，ResNet使用两种残差单元，如图5所示。<br>左图对应的是浅层网络普通残差模块，而右图对应的是深层网络bottleneck残差模块。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e03e8e41aae5616f3349e8e135f34422.png#pic_center" alt="图5 两种残差模块结构"><br>对于短路连接，当输入和输出维度一致时，可以直接将输入加到输出上。但是当维度不一致时（对应的是维度增加一倍），这就不能直接相加。</p><p>有2种策略：</p><ol><li>采用zero-padding增加维度，此时一般要先做一个downsamp，可以采用strde=2的pooling，这样不会增加参数；</li><li>采用新的映射（projection shortcut），一般采用1x1的卷积，这样会增加参数，也会增加计算量。短路连接除了直接使用恒等映射，当然都可以采用projection shortcut。（所以这里有两种选择）</li></ol><p>综上所述，理论上有3种方式A、B、C来用于增加维度：<br><strong>我们一般会选用B方案。</strong></p><ul><li>A 所有的短路连接升维度都采用 padding 补零方式。 其不增加参数量。</li><li>B 需要调整维度的 才有 projection shortcut 1×1卷积，其他的短路连接保持不变。 其参数量有一些。</li><li>C 所有的短路连接都采用 projection shortcut 1×1卷积。 引入参数量较大。</li></ul><blockquote><p>从实验结果看，如下图6所示。之所以我们选择B方法，是因为其效果相对A来说还不错，参数增加相比C方案来说少。<br><img src="https://img-blog.csdnimg.cn/img_convert/be137c8d1dee1ee3617bb1da03b1b9ee.png#pic_center" alt="图6 A、B、C三种方式的error"></p></blockquote><h1 id="ResNet的迁移"><a href="#ResNet的迁移" class="headerlink" title="ResNet的迁移"></a>ResNet的迁移</h1><p>其在各个领域都有不错的效果。一般都可作为backbone，例如faster R-CNN 就是这么干的。<br>作者在论文中做了很多实验，后续写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;ResNet&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;ResNet解决-网络退化问题&quot;&gt;&lt;a href=&quot;#ResNet解决-网络退化问题&quot; class=&quot;headerlink&quot; title=&quot;ResNet解决 网络退化问题&quot;&gt;&lt;/a&gt;ResNet解决</summary>
      
    
    
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="ResNet" scheme="http://example.com/tags/ResNet/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 VGG</title>
    <link href="http://example.com/2021/11/01/%E6%B5%85%E8%B0%88%20VGG/"/>
    <id>http://example.com/2021/11/01/%E6%B5%85%E8%B0%88%20VGG/</id>
    <published>2021-11-01T15:52:01.000Z</published>
    <updated>2021-11-26T13:26:55.049Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="浅谈 VGG">TOC</a><br>《Very Deep Convolutional Networks for Large-Scale Image Recognition》</p><p>arXiv：<a href="https://arxiv.org/abs/1409.1556">[1409.1556] Very Deep Convolutional Networks for Large-Scale Image Recognition<br>intro：ICLR 2015</a><br>homepage：<a href="https://www.robots.ox.ac.uk/~vgg/research/very_deep/">Visual Geometry Group Home Page</a></p><h1 id="VGG-特点"><a href="#VGG-特点" class="headerlink" title="VGG 特点"></a>VGG 特点</h1><p>VGG 网络是在ILSVRC 2014上的相关工作，主要工作是证明了增加网络的深度能够在一定程度上影响网络最终的性能。<br>VGG有两种结构，分别是VGG16和VGG19，两者并没有本质上的区别，只是网络深度不一样。</p><ul><li>VGG16包含了16个隐藏层（13个卷积层和3个全连接层） 其特点为 卷积块的卷积层个数为  2 2 3 3 3<br><img src="https://img-blog.csdnimg.cn/img_convert/22de401629c305540a9f2ccaef96ba63.png#pic_center" alt="VGG16"><br><img src="https://img-blog.csdnimg.cn/img_convert/786fc264427f593ff33f5dede514a990.png#pic_center" alt="VGG16"></li></ul><ul><li>VGG19包含了19个隐藏层（16个卷积层和3个全连接层） 的特点为 卷积块的卷积层个数为  2 2 4 4 4</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/27f07e7317617a43f88350a560c371a6.png#pic_center" alt="VGG网络架构"><br>全连接转卷积（测试阶段）<br>这也是VGG的一个特点，在网络测试阶段将训练阶段的三个全连接替换为三个卷积，使得测试得到的全卷积网络因为没有全连接的限制，因而可以接收任意宽或高为的输入，这在测试阶段很重要。<br>例如，输入图像是224x224x3，如果后面三个层都是全连接，那么在测试阶段就只能将测试的图像全部都要缩放大小到224x224x3，才能符合后面全连接层的输入数量要求，这样就不便于测试工作的开展。</p><h1 id="VGG-原理"><a href="#VGG-原理" class="headerlink" title="VGG 原理"></a>VGG 原理</h1><p>VGG16相比AlexNet的一个改进是采用连续的几个3x3的卷积核代替AlexNet中的较大卷积核（如11x11，7x7，5x5）。对于给定的感受野（与输出有关的输入图片的局部大小），采用堆积的小卷积核是优于采用大的卷积核，因为多层非线性层可以增加网络深度来保证学习更复杂的模式，而且代价还比较小（参数更少）。</p><p>为什么2个3×3的卷积核 可以 代替 1个5×5的卷积核？<br><img src="https://img-blog.csdnimg.cn/img_convert/5c12d10dd0738e23846584801c3a686f.png#pic_center" alt="两个3×3代替5×5"><br>因为我们知道   例如输入图片大小为C 卷积核大小为k  步长为d 那输出图片大小就是 $\lfloor \frac{C+2 * padding-k}{d} \rfloor +1$<br>那pad=0 d=1 对于2个3×3的而言 计算得到的 输出图片大小为 C-4<br>同理 一个5×5的 也为 C-4</p><p>总结的来说优势有3点：</p><ol><li>分成多个层的小卷积核来代替大卷积核，可以增加网络深度。而每一层都会引入非线性的激活函数，所以其非线性表达的能力会更好，模型的分类性能更好。</li><li>计算参数减少了。举个例子比如输入维度是C(也就是卷积核通道维度)，输出维度是C(也就是卷积核个数)，如果使用2层3×3的卷积层来代替一层5×5的，3×3的参数总量为 3×3×C×C×2 = $18C^{2}$；对应的  5×5的 为 5×5×C×C×1 = $25C^{2}$</li><li>使用多个层的小卷积核，相当于将一个大的感受野分成多个小感受野来学习，是一种正则化的思想。注意：正则化是一种思想方式，其目的为防止过拟合。其具体方法有：BN、dropout、L1和L2正则化项等。</li></ol><h1 id="VGG优缺点"><a href="#VGG优缺点" class="headerlink" title="VGG优缺点"></a>VGG优缺点</h1><h2 id="VGG优点"><a href="#VGG优点" class="headerlink" title="VGG优点"></a>VGG优点</h2><ul><li>VGG16和VGG19 的结构非常简洁，整个网络都使用了同样大小的卷积核尺寸（3x3）和最大池化尺寸（2x2）。</li><li>几个小滤波器（3x3）卷积层的组合比一个大滤波器（5x5或7x7）卷积层好：</li><li>验证了通过不断加深网络结构可以提升性能。</li><li><p>VGG 是传统的串行结构，输出的内容例如左上角提取的就是原图像左上角的特征。<br><img src="https://img-blog.csdnimg.cn/img_convert/afe80f4458553cf142cd9a8f6b7cfc40.png#pic_center" alt="FeatureMap的提取情况"></p></li><li><p>VGG 的迁移学习能力很强，一般都用来做基础模型。我们只需要修改最后1层的输出结构，冻结前面所有在ImageNet上训练VGG后的参数，再拿自己的数据集来训练最后4096神经元和最后一层输出的参数即可。</p></li><li>采用多尺度训练方式，训练的数据可以有 224、256、384、[256，512]</li><li>作者提出的 在test上改进的方法，将最后的全连接层改为全卷积层，但是作者训练的时候并没有这么用。这个方法可以实现多尺度输入，原始的 全神经网络的话 他层次的神经元是定死的 所以我没办法换个尺度的图片输入。<br><img src="https://img-blog.csdnimg.cn/img_convert/d2092e465499fab47e8e6587f744e396.png#pic_center" alt="test"></li></ul><h2 id="VGG缺点"><a href="#VGG缺点" class="headerlink" title="VGG缺点"></a>VGG缺点</h2><p>参数非常庞大。庞大在卷积层输出压平后与第一层全神经网络之间的参数。<br><img src="https://img-blog.csdnimg.cn/img_convert/5a91f370bba686cfa4003affe2a9eefc.png#pic_center" alt="参数计算"><br>首先看第二行，所谓的内存就是输出图片大小  而参数就是卷积核×通道数×卷积核个数64个。<br>注意这里是没有算上偏置量的，算的话就是每个卷积核一个偏置项，会增广成矩阵加上去的。</p><h1 id="VGG的训练和测试"><a href="#VGG的训练和测试" class="headerlink" title="VGG的训练和测试"></a>VGG的训练和测试</h1><p> 论文首先将训练图像缩放到最小边长度的方形，设缩放后的训练图像的尺寸为S×S。网络训练时对训练图像进行随机裁剪，裁剪尺寸为网络的输入尺寸224×224。如果S=224，则输入网络的图像就是整个训练图像；如果S&gt;224，则随机裁剪训练图像包含目标的部分。</p><p>对于训练集图像的尺寸设置，论文中使用了两种方法：</p><p>固定尺寸训练，设置 <strong>S=256</strong> 和 <strong>S=384</strong><br>多尺度训练，每个训练图像从一定范围内 <strong>[Smin,Smax],(Smin=256,Smax=512)</strong> 进行随机采样。由于图像中的目标可能具有不同的大小，因此在训练期间考虑到这一点是有益的。这也可以看作是通过尺度抖动进行训练集增强，其中单个模型被训练在一定尺度范围内识别对象。</p><h2 id="网络性能评估"><a href="#网络性能评估" class="headerlink" title="网络性能评估"></a>网络性能评估</h2><ul><li><strong>单尺度评估，测试图像固定尺度。结果如下表</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/c06443bd58d1867902a59902e0a5b2c7.png#pic_center" alt="单一尺度评估"><br>通过评估结果，可以看出：<ul><li>局部归一化（A-LRN）网络，对网络A的结果并没有很大的提升。</li><li>网络的性能随着网络的加深而提高。应该注意到B，C，D这个网络的性能。C网络好于B网络，说明额外添加的非线性激活函数，确实是有好处的；但是，D网络好于C网络，这说明也可以使用非平凡的感受野来捕获更多的信息更有用。</li><li>当网络层数达到19层时，使用VGG架构的错误率就不再随着层数加深而提高了。更深的网络应该需要更多的数据集。</li><li>论文还将网络B与具有5×5卷积层的浅层网络进行了比较，浅层网络可以通过用单个5×5卷积层替换B中每对3×3卷积层得到。测量的浅层网络top-1错误率比网络B的top-1错误率（在中心裁剪图像上）高7％，<strong>这证实了具有小滤波器的深层网络优于具有较大滤波器的浅层网络</strong>。</li><li>训练时的尺寸抖动（训练图像大小S∈[256,512])得到的结果好于固定尺寸，这证实了通过尺度抖动进行的训练集增强确实有助于捕获多尺度图像统计。</li></ul></li></ul><ul><li><p><strong>多尺度评估，测试图像的尺度抖动对性能的影响</strong><br>  对同一张测试图像，将其缩放到不同的尺寸进行测试，然后取这几个测试结果的平均值，作为最终的结果（有点像集成学习，所不同的是，这里是测试图像的尺寸不同）。使用了三种尺寸的测试图像：Q表示测试图像，S表示训练是图像尺寸：Q=S−32，Q=S+32，前面两种是针对训练图像是固定大小的，对于训练时图像尺寸在一定范围内抖动的，则可以使用更大的测试图像尺寸。   Q={Smin,0.5(Smin+Smax),Smax}.<br>评估结果如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/339fb07aaff8cf5e01ac2dab96205f39.png#pic_center" alt="多尺度评估，测试图像的尺度抖动对性能的影响"><br>评估结果表明，训练图像尺度抖动优于使用固定最小边S。</p></li><li><p><strong>稠密和多裁剪图像评估</strong><br>Dense（密集评估），即指全连接层替换为卷积层（第一FC层转换到7×7卷积层，最后两个FC层转换到1×1卷积层），最后得出一个预测的score map，再对结果求平均。<br>multi-crop，即对图像进行多样本的随机裁剪，将得到多张裁剪得到的图像输入到网络中，最终对所有结果平均.<br><img src="https://img-blog.csdnimg.cn/img_convert/925e5742f42b654fabe4bf03cf56f1b8.png#pic_center" alt="多裁剪与密度估计"><br>从上图可以看出，<strong>多裁剪的结果是好于密集估计的</strong>。而且这两种方法确实是互补的，因为它们的组合优于其中的每一种。<br>由于不同的卷积边界条件，多裁剪图像评估是密集评估的补充：当将ConvNet应用于裁剪图像时，卷积特征图用零填充，而在密集评估的情况下，相同裁剪图像的填充自然会来自于图像的相邻部分（由于卷积和空间池化），这大大增加了整个网络的感受野，因此捕获了更多的图像内容信息。</p></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>在训练时，可以使用多尺度抖动的训练图像，其精度好于固定尺寸的训练集。</li><li>测试时，使用多裁剪和密集评估（卷积层替换全连接层）像结合的方法<img src="https://img-blog.csdnimg.cn/img_convert/d2092e465499fab47e8e6587f744e396.png#pic_center" alt="卷积层替换全连接层"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;浅谈 VGG&quot;&gt;TOC&lt;/a&gt;&lt;br&gt;《Very Deep Convolutional Networks for Large-Scale Image Recognition》&lt;/p&gt;
&lt;p&gt;arXiv：&lt;a href=&quot;https://arxiv.org</summary>
      
    
    
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>针对 VOC2007和VOC2012 的具体用法</title>
    <link href="http://example.com/2021/11/01/%E9%92%88%E5%AF%B9%20VOC2007%E3%80%81VOC2012%E5%92%8CCOCO%20%E7%9A%84%E5%85%B7%E4%BD%93%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2021/11/01/%E9%92%88%E5%AF%B9%20VOC2007%E3%80%81VOC2012%E5%92%8CCOCO%20%E7%9A%84%E5%85%B7%E4%BD%93%E7%94%A8%E6%B3%95/</id>
    <published>2021-11-01T14:52:01.000Z</published>
    <updated>2021-11-26T13:26:49.930Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="针对 VOC2007、VOC2012和COCO 的具体用法">TOC</a></p><p>目前广大研究者们普遍使用的是 VOC2007和VOC2012数据集，因为二者是互斥的，不相容的。</p><p>论文中针对 VOC2007和VOC2012 的具体用法有以下几种：</p><ul><li>只用VOC2007的trainval 训练，使用VOC2007的test测试。</li><li>只用VOC2012的trainval 训练，使用VOC2012的test测试，这种用法很少使用，因为大家都会结合VOC2007使用。</li><li>使用 VOC2007 的 train+val 和 VOC2012的 train+val 训练，然后使用 VOC2007的test测试，这个用法是论文中经常看到的 <strong>07+12</strong> ，研究者可以自己测试在VOC2007上的结果，因为VOC2007的test是公开的。</li><li>使用 VOC2007 的 train+val+test 和 VOC2012的 train+val训练，然后使用 VOC2012的test测试，这个用法是论文中经常看到的 <strong>07++12</strong> ，这种方法需提交到VOC官方服务器上评估结果，因为VOC2012 test没有公布。</li><li>先在 MS COCO 的 trainval 上预训练，再使用 VOC2007 的 train+val、 VOC2012的 train+val 微调训练，然后使用 VOC2007的test测试，这个用法是论文中经常看到的 <strong>07+12+COCO</strong> 。</li><li>先在 MS COCO 的 trainval 上预训练，再使用 VOC2007 的 train+val+test 、 VOC2012的 train+val 微调训练，然后使用 VOC2012的test测试 ，这个用法是论文中经常看到的 <strong>07++12+COCO</strong>，这种方法需提交到VOC官方服务器上评估结果，因为VOC2012 test没有公布。</li></ul><h1 id="代码分离-VOC训练集-的-val-和-train-数据"><a href="#代码分离-VOC训练集-的-val-和-train-数据" class="headerlink" title="代码分离 VOC训练集 的 val 和 train 数据"></a>代码分离 VOC训练集 的 val 和 train 数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">anchors =[<span class="number">0.57273</span>, <span class="number">0.677385</span>, <span class="number">1.87446</span>, <span class="number">2.06253</span>, <span class="number">3.33843</span>, <span class="number">5.47434</span>, <span class="number">7.88282</span>, <span class="number">3.52778</span>, <span class="number">9.77052</span>, <span class="number">9.16828</span>]</span><br><span class="line">anchors = np.array(anchors).reshape(-<span class="number">1</span>, <span class="number">2</span>) <span class="comment">#(5,2)</span></span><br><span class="line">input_shape = (<span class="number">416</span>, <span class="number">416</span>)</span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">colors = [[<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>],[<span class="number">218</span>,<span class="number">112</span>,<span class="number">214</span>],[<span class="number">100</span>,<span class="number">149</span>,<span class="number">237</span>],[<span class="number">95</span>,<span class="number">158</span>,<span class="number">160</span>],[<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>],[<span class="number">0</span>,<span class="number">255</span>,<span class="number">127</span>],[<span class="number">107</span>,<span class="number">142</span>,<span class="number">35</span>],</span><br><span class="line">        [<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>],[<span class="number">184</span>,<span class="number">134</span>,<span class="number">11</span>],[<span class="number">255</span>,<span class="number">165</span>,<span class="number">0</span>],[<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">224</span>,<span class="number">255</span>,<span class="number">255</span>],[<span class="number">70</span>,<span class="number">130</span>,<span class="number">180</span>],[<span class="number">255</span>,<span class="number">192</span>,<span class="number">203</span>],[<span class="number">255</span>,<span class="number">240</span>,<span class="number">245</span>],[<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">240</span>,<span class="number">128</span>,<span class="number">128</span>],[<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">169</span>,<span class="number">169</span>,<span class="number">169</span>]]</span><br><span class="line">VOCdevkit_path = <span class="string">&#x27;./VOCdevkit&#x27;</span></span><br><span class="line">classes = [<span class="string">&#x27;aeroplane&#x27;</span>,<span class="string">&#x27;bicycle&#x27;</span>,<span class="string">&#x27;bird&#x27;</span>,<span class="string">&#x27;boat&#x27;</span>,<span class="string">&#x27;bottle&#x27;</span>,<span class="string">&#x27;bus&#x27;</span>,<span class="string">&#x27;car&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;chair&#x27;</span>,<span class="string">&#x27;cow&#x27;</span>,<span class="string">&#x27;diningtable&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;horse&#x27;</span>,<span class="string">&#x27;motorbike&#x27;</span>,<span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;pottedplant&#x27;</span>,<span class="string">&#x27;sheep&#x27;</span>,<span class="string">&#x27;sofa&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;tvmonitor&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把数据集拆分成训练和测试集两部分</span></span><br><span class="line"><span class="comment"># 分别保存在 train.txt 和 val.txt 中</span></span><br><span class="line"><span class="comment"># 把数据集拆分成训练和测试集两部分</span></span><br><span class="line"><span class="comment"># 分别保存在val.txt和train.txt中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> classes,VOCdevkit_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VOCdevkit_sets = [(<span class="string">&#x27;2012&#x27;</span>, <span class="string">&#x27;train&#x27;</span>), (<span class="string">&#x27;2012&#x27;</span>, <span class="string">&#x27;val&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_annotation</span>(<span class="params">year, image_id, list_file</span>):</span></span><br><span class="line">    in_file = <span class="built_in">open</span>(os.path.join(VOCdevkit_path, <span class="string">&#x27;VOC%s/Annotations/%s.xml&#x27;</span> % (year, image_id)), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> obj.find(<span class="string">&#x27;difficult&#x27;</span>) != <span class="literal">None</span>:</span><br><span class="line">            difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">int</span>(<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text)), <span class="built_in">int</span>(<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text)),</span><br><span class="line">             <span class="built_in">int</span>(<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text)), <span class="built_in">int</span>(<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text)))</span><br><span class="line">        list_file.write(<span class="string">&quot; &quot;</span> + <span class="string">&quot;,&quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> b]) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(cls_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    random.seed(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> year, image_set <span class="keyword">in</span> VOCdevkit_sets:  <span class="comment">#[(&#x27;2012&#x27;, &#x27;train&#x27;), (&#x27;2012&#x27;, &#x27;val&#x27;)]</span></span><br><span class="line">        image_ids = <span class="built_in">open</span>(os.path.join(VOCdevkit_path, <span class="string">&#x27;VOC%s/ImageSets/Main/%s.txt&#x27;</span> % (year, image_set)),</span><br><span class="line">                         encoding=<span class="string">&#x27;utf-8&#x27;</span>).read().strip().split()</span><br><span class="line">        <span class="built_in">print</span>(image_ids)</span><br><span class="line">        list_file = <span class="built_in">open</span>(<span class="string">&#x27;%s_%s.txt&#x27;</span> % (year, image_set), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">            list_file.write(<span class="string">&#x27;%s/VOC%s/JPEGImages/%s.jpg&#x27;</span> % (os.path.abspath(VOCdevkit_path), year, image_id))</span><br><span class="line">            convert_annotation(year, image_id, list_file)</span><br><span class="line">            list_file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        list_file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;针对 VOC2007、VOC2012和COCO 的具体用法&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前广大研究者们普遍使用的是 VOC2007和VOC2012数据集，因为二者是互斥的，不相容的。&lt;/p&gt;
&lt;p&gt;论文中针对 VOC2007和VOC2012 的具体</summary>
      
    
    
    
    <category term="数据集" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数据集" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python数据处理篇之Matplotlib系列</title>
    <link href="http://example.com/2021/10/30/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AF%87%E4%B9%8BMatplotlib%E7%B3%BB%E5%88%97/"/>
    <id>http://example.com/2021/10/30/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AF%87%E4%B9%8BMatplotlib%E7%B3%BB%E5%88%97/</id>
    <published>2021-10-30T14:52:01.000Z</published>
    <updated>2021-11-26T13:26:44.207Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Python数据处理篇之Matplotlib系列">TOC</a></p><h1 id="创建画布与显示"><a href="#创建画布与显示" class="headerlink" title="创建画布与显示"></a>创建画布与显示</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504622.html">Python数据处理篇之Matplotlib系列(一)—-初识Matplotlib</a></p><h1 id="plt-scatter-散点图"><a href="#plt-scatter-散点图" class="headerlink" title="plt.scatter()散点图"></a>plt.scatter()散点图</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504628.html">Python数据处理篇之Matplotlib系列(二)—-plt.scatter()散点图</a></p><h1 id="plt-plot-折线图"><a href="#plt-plot-折线图" class="headerlink" title="plt.plot()折线图"></a>plt.plot()折线图</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504633.html">Python数据处理篇之Matplotlib系列(三)—-plt.plot()折线图</a></p><h1 id="plt-bar-与plt-barh条形图"><a href="#plt-bar-与plt-barh条形图" class="headerlink" title="plt.bar()与plt.barh条形图"></a>plt.bar()与plt.barh条形图</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504637.html">Python数据处理篇之Matplotlib系列(四)—-plt.bar()与plt.barh条形图</a></p><h1 id="plt-pie-饼状图"><a href="#plt-pie-饼状图" class="headerlink" title="plt.pie()饼状图"></a>plt.pie()饼状图</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504640.html">Python数据处理篇之Matplotlib系列(五)—-plt.pie()饼状图</a></p><h1 id="plt-hist-与plt-hist2d-直方图"><a href="#plt-hist-与plt-hist2d-直方图" class="headerlink" title="plt.hist()与plt.hist2d()直方图"></a>plt.hist()与plt.hist2d()直方图</h1><p><a href="https://www.cnblogs.com/zyg123/p/10504645.html">Python数据处理篇之Matplotlib系列(六)—-plt.hist()与plt.hist2d()直方图</a></p><h1 id="matplotlib原理分析"><a href="#matplotlib原理分析" class="headerlink" title="matplotlib原理分析"></a>matplotlib原理分析</h1><p><a href="https://www.cnblogs.com/zyg123/p/10512513.html">Python数据处理篇之Matplotlib系列(七)—-matplotlib原理分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;Python数据处理篇之Matplotlib系列&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建画布与显示&quot;&gt;&lt;a href=&quot;#创建画布与显示&quot; class=&quot;headerlink&quot; title=&quot;创建画布与显示&quot;&gt;&lt;/a&gt;创建画布与显示&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    <category term="python工具包类" scheme="http://example.com/categories/python%E5%B7%A5%E5%85%B7%E5%8C%85%E7%B1%BB/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="Matplotlib" scheme="http://example.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>AlexNet 元老 开创的创新点</title>
    <link href="http://example.com/2021/10/29/AlexNet%20%E5%85%83%E8%80%81%20%E5%BC%80%E5%88%9B%E7%9A%84%E5%88%9B%E6%96%B0%E7%82%B9/"/>
    <id>http://example.com/2021/10/29/AlexNet%20%E5%85%83%E8%80%81%20%E5%BC%80%E5%88%9B%E7%9A%84%E5%88%9B%E6%96%B0%E7%82%B9/</id>
    <published>2021-10-29T14:52:01.000Z</published>
    <updated>2021-10-29T14:58:11.730Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="AlexNet 元老 开创的创新点">TOC</a></p><h1 id="创新点1：CNN-卷积神经网络"><a href="#创新点1：CNN-卷积神经网络" class="headerlink" title="创新点1：CNN 卷积神经网络"></a>创新点1：CNN 卷积神经网络</h1><p>这个就不用说了 CNN 都懂的啊</p><h1 id="创新点2：relu激活函数"><a href="#创新点2：relu激活函数" class="headerlink" title="创新点2：relu激活函数"></a>创新点2：relu激活函数</h1><p>relu 是一个 非饱和的激活函数。用公式来说就是：</p><script type="math/tex; mode=display">f(x) = max (0 , x )</script><p>饱和函数最大的问题在，他左右两边随自变量的变化，应变量变化缓慢。换句话就是说，他的梯度变化基本没有，甚至有可能是0。这就有可能导致梯度消失（如果是0的话），或者训练时间很长，且收敛效果不佳。</p><h1 id="创新点3：双GPU模型并行"><a href="#创新点3：双GPU模型并行" class="headerlink" title="创新点3：双GPU模型并行"></a>创新点3：双GPU模型并行</h1><p>作者使用这个完全是因为当年的GPU的内存实在太小了。那对于现在来说这并不是什么问题，但是这个思想可以参考。<br><img src="https://img-blog.csdnimg.cn/img_convert/2addade07ed13528e4c86bdc62d8b5dc.png#pic_center" alt="AlexNet的网络结构"></p><h1 id="创新点4：LRN局部响应归一化"><a href="#创新点4：LRN局部响应归一化" class="headerlink" title="创新点4：LRN局部响应归一化"></a>创新点4：LRN局部响应归一化</h1><p>其提出的目的，是作者认为，每个通道的像素点不应该过高的激活，过高的激活可能就会导致 <strong>其他通道的对应像素点激活被抑制</strong>。这就好像，生物学上，你过分的激活了对顶芽的生长，就会抑制其侧芽的生长一样。</p><p>其作用在AlexNet的前两个卷积层，顺序为 Relu之后为LRN再 MaxPooling</p><p>他整体的思路如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa9ffa5a4bcf383a94fcb9f0f7f5d496.png#pic_center" alt="LRN描述"><br>上面相当于其查看了其附近两个通道的，公式就是上面红色的部分。其具体的计算公式如右图所示（其参数意思看下图）<br><img src="https://img-blog.csdnimg.cn/img_convert/c0ed720c1d6fb8a5a998d12f1aee458c.png#pic_center" alt="LRN 公式参考"></p><p><font color="red">但这个方法 被后来的VGG证实没有啥用，就是其根本就不起作用。用了还占内存</font><br>其实想想看确实没啥用，Relu函数作为一个非饱和激活函数，其压根不需要normalization啊。normalization的意思是将数据统一在中间区域内，本质的含义其实就是为了让他避免饱和区啦。</p><h1 id="创新点5：重叠池化-overlapping-pooling"><a href="#创新点5：重叠池化-overlapping-pooling" class="headerlink" title="创新点5：重叠池化 overlapping pooling"></a>创新点5：重叠池化 overlapping pooling</h1><p>作者认为可以 防止过拟合。 现在没人用了。<br><img src="https://img-blog.csdnimg.cn/img_convert/fa0b6df532ca6ec291650ea1cc13ca44.png#pic_center" alt="重叠池化"></p><h1 id="创新点6：防止过拟合之数据增强"><a href="#创新点6：防止过拟合之数据增强" class="headerlink" title="创新点6：防止过拟合之数据增强"></a>创新点6：防止过拟合之数据增强</h1><p>其提供了两种数据增强的方式。 注意：这个完全可以由CPU来做，所以作者在训练上一个batch的时候，已经准备好了下一次batch所需要的图像数据。</p><ol><li>第一种就是图像翻转，裁剪等（平移和水平翻转）<br><img src="https://img-blog.csdnimg.cn/img_convert/8a93f605bc3e15d5edda9ad9893c5fc0.png#pic_center" alt="图像翻转，裁剪"></li><li>颜色变换。<br> 其使用了PCA的方式先提取了一下他的主成分。他的意思是我在其主成分的基础上进行一定的调整颜色和光照强度和亮度，这样的话可以使我生成的图片更加的自然。具体可以看下面的公式：<br><img src="https://img-blog.csdnimg.cn/img_convert/a6c26321e94e016760b8adc7858da580.png#pic_center" alt="颜色变换的公式"></li></ol><h1 id="创新点7：防止过拟合之Dropout"><a href="#创新点7：防止过拟合之Dropout" class="headerlink" title="创新点7：防止过拟合之Dropout"></a>创新点7：防止过拟合之Dropout</h1><p>这个非常有用。现在还在用。<br>其大致的意思就是，训练阶段每一个batch随机掐死一半的神经元（也就是将神经元的输出设置为0 即其在前向和反向传播中均不起作用）。<br>在预测阶段，保留所有神经元。<br>这里还是要具体了解一下，暂时我还不知道具体原理啥的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;AlexNet 元老 开创的创新点&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创新点1：CNN-卷积神经网络&quot;&gt;&lt;a href=&quot;#创新点1：CNN-卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;创新点1：CNN 卷积神经网络&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何评价目标检测的性能 MAP如何计算等</title>
    <link href="http://example.com/2021/10/26/%E5%A6%82%E4%BD%95%E8%AF%84%E4%BB%B7%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9A%84%E6%80%A7%E8%83%BD%20MAP%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%AD%89/"/>
    <id>http://example.com/2021/10/26/%E5%A6%82%E4%BD%95%E8%AF%84%E4%BB%B7%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9A%84%E6%80%A7%E8%83%BD%20MAP%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%AD%89/</id>
    <published>2021-10-26T14:35:01.000Z</published>
    <updated>2021-10-29T15:03:55.678Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="如何评价目标检测的性能 MAP如何计算等">TOC</a><br>目标检测模型的性能指标分为速度指标和准确度指标。速度指标通常用每秒推断帧数 FPS （Frames Per Second）衡量，但受硬件影响较大。</p><p>目标检测输入图像，输出图像中各个目标预测框的矩形坐标及各类别预测置信度Conf。</p><p>采用交并比 IOU 衡量预测框和标注框的重合程度，即预测框的定位是否准确。</p><script type="math/tex; mode=display">IOU=\frac{area(B_{p}∩B_{gt})}{area(B_{p}∪B_{gt})}</script><p>式子中，$B<em>{p}$为预测框，$B</em>{gt}$为标准框</p><p>根据与标注框的关系，可将某一预测框划分为下式四类中的某一类</p><blockquote><ul><li>真正例（TP）：样本的预测与实际标签相同 </li><li>假正例（FP）：样本实际标签不是C，但模型预测成C了 </li><li>假负例（FN）：样本实际标签为C，模型预测错了</li><li>真负例（TN）：样本实际为其他类，模型也预测为其他类</li></ul></blockquote><p> TP： $Conf &gt; P<em>{thresh}$ 且 $IOU &gt; IOU</em>{thresh}$<br> FP： $Conf &gt; P<em>{thresh}$ 且 $IOU &lt; IOU</em>{thresh}$<br> FN： $Conf &lt; P<em>{thresh}$ 且 $IOU &gt; IOU</em>{thresh}$<br> TN： $Conf &lt; P<em>{thresh}$ 且 $IOU &lt; IOU</em>{thresh}$</p><p>式子中，$IOU_{thresh}$为0-1之间的常数，需人工指定。<br>对于某一特定类别，TP、FP、FN、TN 四种预测框的个数构成混淆矩阵（Confusion Matrix）。例如这边用 同济子豪兄大哥的 毕设波磨检测为例。（这里的其他类别指的是背景）<br><img src="https://img-blog.csdnimg.cn/img_convert/222b3b01bcd2ff73f2408bddfc8abf77.png#pic_center" alt="混淆矩阵"><br>进一步定义以下参数：</p><ol><li>Precison(查准率) 是指所有预测框中预测正确的比例，反应了模型“不把背景冤枉成目标”的准确性。<br><img src="https://img-blog.csdnimg.cn/img_convert/f3ae30d6a98aeb65efad9cbf82b5123e.png#pic_center" alt="在这里插入图片描述">    </li><li>Recall(查全率、敏感性、召回率)是指所有 应该被预测出来的标准框 中被正确预测的比例，反应了模型“不把目标放过为背景”的敏感性。<br><img src="https://img-blog.csdnimg.cn/img_convert/cfb0d9475b56951b1d78def0e79655a9.png#pic_center" alt="在这里插入图片描述"></li><li>Average Precision（平均精度，简称AP）：<br>将 $P<em>{thrshold}$ 阈值从0到1变化，计算每个  $P</em>{threshold}$ 阈值对应的Precision和Recall，绘制成某类别的PR性能曲线，其围成的面积为该类别的AP。<br><img src="https://img-blog.csdnimg.cn/img_convert/553b6e044b25f0efbf068d4794dedb68.png#pic_center" alt="比如猫的AP"></li></ol><p>取所有类别的AP和不同的 $IOU<em>{thresh}$ ，可分别计算 mAP@0.5 和 mAP@0.5:0.95 。                     mAP@0.5为 $IOU</em>{thresh}$ 取0.5时，各类别AP的平均值。 mAP@0.5:0.95为 $IOU_{thresh}$ 分别取以0.05为步长，从0.5增大到0.95的10个数时，各类别AP的平均值。如下式所示，j分别取 0.5、0.55、0.6、0.65、0.7、0.75、0.8、0.85、0.9、0.95，N为类别总数20（类别总数）。</p><script type="math/tex; mode=display">AP = \int_{0}^{1}P_{thresh}(r) dr</script><script type="math/tex; mode=display">mAP@0.5=\frac{1}{N}\sum_{i=1}^{N}AP_{i}(IOU_{thresh}=0.5)</script><script type="math/tex; mode=display">mAP@0.5:0.95=\frac{1}{N}\sum_{i=1}^{N}\sum_{j}AP_{i}(IOU_{thresh}=j)</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;如何评价目标检测的性能 MAP如何计算等&quot;&gt;TOC&lt;/a&gt;&lt;br&gt;目标检测模型的性能指标分为速度指标和准确度指标。速度指标通常用每秒推断帧数 FPS （Frames Per Second）衡量，但受硬件影响较大。&lt;/p&gt;
&lt;p&gt;目标检测输入图像，输出图像</summary>
      
    
    
    
    <category term="机器学习基础" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="目标检测" scheme="http://example.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>cv2 各类函数 详解</title>
    <link href="http://example.com/2021/10/25/cv2%20%E5%90%84%E7%B1%BB%E5%87%BD%E6%95%B0%20%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/10/25/cv2%20%E5%90%84%E7%B1%BB%E5%87%BD%E6%95%B0%20%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-10-25T14:09:01.000Z</published>
    <updated>2021-10-29T15:03:40.074Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="cv2 各类函数 详解">TOC</a></p><h1 id="cv2-rectangle-在任何图像上绘制矩形"><a href="#cv2-rectangle-在任何图像上绘制矩形" class="headerlink" title="cv2.rectangle  在任何图像上绘制矩形"></a>cv2.rectangle  在任何图像上绘制矩形</h1><p>用法： cv2.rectangle(image, start_point, end_point, color, thickness) 参数：</p><blockquote><p>image:它是要在其上绘制矩形的图像。 start_point：它是矩形的起始坐标。坐标表示为两个值的元组，即(X坐标值，Y坐标值)。<br>end_point：它是矩形的结束坐标。坐标表示为两个值的元组，即(X坐标值ÿ坐标值)。<br>color:它是要绘制的矩形的边界线的颜色。对于BGR，我们通过一个元组。例如：(255，0，0)为蓝色。<br>thickness:它是矩形边框线的粗细像素。厚度-1像素将以指定的颜色填充矩形形状。 返回值：它返回一个图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.rectangle(img,(x,y),(x+w,y+h),color,<span class="number">8</span>)</span><br></pre></td></tr></table></figure></blockquote><h1 id="cv2-putText-在图像上加字"><a href="#cv2-putText-在图像上加字" class="headerlink" title="cv2.putText 在图像上加字"></a>cv2.putText 在图像上加字</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(class_names[i],confidence)</span><br><span class="line">cv2.putText(img,string,(x,y+<span class="number">20</span>),cv2.FONT_HERSHEY_PLAIN,<span class="number">3</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>各参数依次为：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细</p><p>其中字体可以选择：<br>FONT_HERSHEY_SIMPLEX 、 FONT_HERSHEY_PLAIN、 FONT_HERSHEY_DUPLEX 等</p><h1 id="cv2-dnn-readNet-用于读取网络参数并构建网络"><a href="#cv2-dnn-readNet-用于读取网络参数并构建网络" class="headerlink" title="cv2.dnn.readNet 用于读取网络参数并构建网络"></a>cv2.dnn.readNet 用于读取网络参数并构建网络</h1><p>注意 cv2的dnn 网络库集合了多种网络<br>具体可以查看这个 博客 <a href="https://blog.csdn.net/Hellow_RMB/article/details/110070686">OpenCV中DNN支持的网络架构</a><br>如：读取 yolov3的配置文件与网络参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net = cv2.dnn.readNet(<span class="string">&#x27;yolov3.weights&#x27;</span>,<span class="string">&#x27;yolov3.cfg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="cv2-imread-用于读取图片文件"><a href="#cv2-imread-用于读取图片文件" class="headerlink" title="cv2.imread 用于读取图片文件"></a>cv2.imread 用于读取图片文件</h1><p>imread函数有两个参数。<br>第一个参数是图片路径，第二个参数表示读取图片的形式，有三种：</p><ul><li>cv2.IMREAD_COLOR：加载彩色图片，这个是默认参数，可以直接写1。<br>cv2.IMREAD_GRAYSCALE：以灰度模式加载图片，可以直接写0。<br>cv2.IMREAD_UNCHANGED：包括alpha，可以直接写-1</li></ul><p>cv2.imread()读取图片后已多维数组的形式保存图片信息，前两维表示图片的像素坐标，最后一维表示图片的通道索引，具体图像的通道数由图片的格式来决定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入图像 默认彩色</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;guoge_and_ shark.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="cv2-imwrite-保存图像"><a href="#cv2-imwrite-保存图像" class="headerlink" title="cv2.imwrite  保存图像"></a>cv2.imwrite  保存图像</h1><p>cv2.imwrite(file，img，num)保存一个图像。</p><blockquote><p>第一个参数是要保存的文件名，第二个参数是要保存的图像。<br>可选的第三个参数，它针对特定的格式：<br>对于JPEG，其表示的是图像的质量，用0 -100的整数表示，默认95;<br>对于png ,第三个参数表示的是压缩级别。默认为3.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;result-guoge.jpg&#x27;</span>,img)</span><br></pre></td></tr></table></figure><h1 id="cv2-imshow-显示图像"><a href="#cv2-imshow-显示图像" class="headerlink" title="cv2.imshow()  显示图像"></a>cv2.imshow()  显示图像</h1><p>cv2.imshow(窗口名字，图像名称) 显示图像。<br>窗口会自动调整为图像大小。第一个参数是窗口的名字，其次才是我们的图像。你可以创建多个窗口，只要你喜欢，但是必须给他们不同的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">&#x27;lena.png&#x27;</span>,img)</span><br></pre></td></tr></table></figure><h1 id="cv2-dnn-blobFromImage-对图像进行预处理，包括减均值，比例缩放，裁剪，交换通道等"><a href="#cv2-dnn-blobFromImage-对图像进行预处理，包括减均值，比例缩放，裁剪，交换通道等" class="headerlink" title="cv2.dnn.blobFromImage 对图像进行预处理，包括减均值，比例缩放，裁剪，交换通道等"></a>cv2.dnn.blobFromImage 对图像进行预处理，包括减均值，比例缩放，裁剪，交换通道等</h1><blockquote><p>参数：<br>image:输入图像（1、3或者4通道）<br>———————————————<br>可选参数 ：<br>scalefactor:图像各通道数值的缩放比例<br>size:输出图像的空间尺寸,如size=(200,300)表示高h=300,宽w=200<br>mean:用于各通道减去的值，以降低光照的影响<br> swapRB:交换RB通道，默认为False.(cv2.imread读取的是彩图是BGR通道，正常图片都为RGB)<br>crop:图像裁剪,默认为False.当值为True时，先按比例缩放，然后从中心裁剪成size尺寸<br>ddepth:输出的图像深度，可选CV_32F 或者 CV_8U.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对图像预处理</span></span><br><span class="line"><span class="comment"># 1/255把所有像素归一化 除以255 （0，0，0）表示对每个像素RGB减去常数 这里不减</span></span><br><span class="line"><span class="comment"># 因为opencv读入的为BGR 所以我们这里要反一下 swapRB=True crop不对图片进行裁剪</span></span><br><span class="line">blob = cv2.dnn.blobFromImage(img,<span class="number">1</span>/<span class="number">255</span>,(<span class="number">416</span>,<span class="number">416</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),swapRB=<span class="literal">True</span>,crop=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="cv2-dnn-NMSBoxes-非极大值抑制法"><a href="#cv2-dnn-NMSBoxes-非极大值抑制法" class="headerlink" title="cv2.dnn.NMSBoxes 非极大值抑制法"></a>cv2.dnn.NMSBoxes 非极大值抑制法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONF_THRES = <span class="number">0.1</span> <span class="comment">#指定置信度阈值，阈值越大，置信度过滤越强</span></span><br><span class="line">NMS_THRES = <span class="number">0.4</span> <span class="comment">#指定NMS阈值，阈值越小，NMS越强</span></span><br><span class="line"></span><br><span class="line">indexes = cv2.dnn.NMSBoxes(boxes,confidences,CONF_THRES,NMS_THRES)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;cv2 各类函数 详解&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;cv2-rectangle-在任何图像上绘制矩形&quot;&gt;&lt;a href=&quot;#cv2-rectangle-在任何图像上绘制矩形&quot; class=&quot;headerlink&quot; title=&quot;cv2.re</summary>
      
    
    
    
    <category term="机器学习基础" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="目标检测，OpenCv" scheme="http://example.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%8COpenCv/"/>
    
  </entry>
  
</feed>
